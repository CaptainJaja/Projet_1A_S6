
Code_Projet_1A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f4  080001f4  080001f4  000011f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080089e8  080089e8  000099e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af0  08008af0  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008af0  08008af0  00009af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af8  08008af8  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af8  08008af8  00009af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008afc  08008afc  00009afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008b00  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000006c  08008b6c  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  08008b6c  0000a470  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019165  00000000  00000000  0000a0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003181  00000000  00000000  00023207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00026388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  000279f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfb1  00000000  00000000  00028b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d8d  00000000  00000000  00054b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d7d8  00000000  00000000  0006d8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018b07f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  0018b0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001918ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	@ (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000006c 	.word	0x2000006c
 8000210:	00000000 	.word	0x00000000
 8000214:	080089d0 	.word	0x080089d0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	@ (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	@ (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	@ (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000070 	.word	0x20000070
 8000230:	080089d0 	.word	0x080089d0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000248:	f000 b9b0 	b.w	80005ac <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800026a:	4688      	mov	r8, r1
 800026c:	4604      	mov	r4, r0
 800026e:	468e      	mov	lr, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d95f      	bls.n	800033a <__udivmoddi4+0xd6>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 fe06 	lsl.w	lr, r1, r6
 8000288:	40b7      	lsls	r7, r6
 800028a:	40b4      	lsls	r4, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	ea43 0e0e 	orr.w	lr, r3, lr
 8000294:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	0c23      	lsrs	r3, r4, #16
 800029e:	fbbe f1f8 	udiv	r1, lr, r8
 80002a2:	fb08 ee11 	mls	lr, r8, r1, lr
 80002a6:	fb01 f20c 	mul.w	r2, r1, ip
 80002aa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	429a      	cmp	r2, r3
 80002bc:	f200 8154 	bhi.w	8000568 <__udivmoddi4+0x304>
 80002c0:	4601      	mov	r1, r0
 80002c2:	1a9b      	subs	r3, r3, r2
 80002c4:	b2a2      	uxth	r2, r4
 80002c6:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ca:	fb08 3310 	mls	r3, r8, r0, r3
 80002ce:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80002d6:	4594      	cmp	ip, r2
 80002d8:	d90b      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002da:	18ba      	adds	r2, r7, r2
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80002e0:	bf2c      	ite	cs
 80002e2:	2401      	movcs	r4, #1
 80002e4:	2400      	movcc	r4, #0
 80002e6:	4594      	cmp	ip, r2
 80002e8:	d902      	bls.n	80002f0 <__udivmoddi4+0x8c>
 80002ea:	2c00      	cmp	r4, #0
 80002ec:	f000 813f 	beq.w	800056e <__udivmoddi4+0x30a>
 80002f0:	4618      	mov	r0, r3
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba2 020c 	sub.w	r2, r2, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f2      	lsrs	r2, r6
 8000300:	2300      	movs	r3, #0
 8000302:	e9c5 2300 	strd	r2, r3, [r5]
 8000306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d14e      	bne.n	80003c0 <__udivmoddi4+0x15c>
 8000322:	4543      	cmp	r3, r8
 8000324:	f0c0 8112 	bcc.w	800054c <__udivmoddi4+0x2e8>
 8000328:	4282      	cmp	r2, r0
 800032a:	f240 810f 	bls.w	800054c <__udivmoddi4+0x2e8>
 800032e:	4608      	mov	r0, r1
 8000330:	2d00      	cmp	r5, #0
 8000332:	d0e8      	beq.n	8000306 <__udivmoddi4+0xa2>
 8000334:	e9c5 4e00 	strd	r4, lr, [r5]
 8000338:	e7e5      	b.n	8000306 <__udivmoddi4+0xa2>
 800033a:	2a00      	cmp	r2, #0
 800033c:	f000 80ac 	beq.w	8000498 <__udivmoddi4+0x234>
 8000340:	fab2 f682 	clz	r6, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	f040 80bb 	bne.w	80004c0 <__udivmoddi4+0x25c>
 800034a:	1a8b      	subs	r3, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b2bc      	uxth	r4, r7
 8000352:	2101      	movs	r1, #1
 8000354:	0c02      	lsrs	r2, r0, #16
 8000356:	b280      	uxth	r0, r0
 8000358:	fbb3 fcfe 	udiv	ip, r3, lr
 800035c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000360:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000364:	fb04 f20c 	mul.w	r2, r4, ip
 8000368:	429a      	cmp	r2, r3
 800036a:	d90e      	bls.n	800038a <__udivmoddi4+0x126>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80ec 	beq.w	8000560 <__udivmoddi4+0x2fc>
 8000388:	46c4      	mov	ip, r8
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000390:	fb0e 3318 	mls	r3, lr, r8, r3
 8000394:	fb04 f408 	mul.w	r4, r4, r8
 8000398:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 800039c:	4294      	cmp	r4, r2
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x154>
 80003a0:	18ba      	adds	r2, r7, r2
 80003a2:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003a6:	bf2c      	ite	cs
 80003a8:	2001      	movcs	r0, #1
 80003aa:	2000      	movcc	r0, #0
 80003ac:	4294      	cmp	r4, r2
 80003ae:	d902      	bls.n	80003b6 <__udivmoddi4+0x152>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	f000 80d1 	beq.w	8000558 <__udivmoddi4+0x2f4>
 80003b6:	4698      	mov	r8, r3
 80003b8:	1b12      	subs	r2, r2, r4
 80003ba:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80003be:	e79d      	b.n	80002fc <__udivmoddi4+0x98>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa08 f401 	lsl.w	r4, r8, r1
 80003ca:	fa00 f901 	lsl.w	r9, r0, r1
 80003ce:	fa22 f706 	lsr.w	r7, r2, r6
 80003d2:	fa28 f806 	lsr.w	r8, r8, r6
 80003d6:	408a      	lsls	r2, r1
 80003d8:	431f      	orrs	r7, r3
 80003da:	fa20 f306 	lsr.w	r3, r0, r6
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa1f fc87 	uxth.w	ip, r7
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fbb8 fef0 	udiv	lr, r8, r0
 80003ec:	fb00 881e 	mls	r8, r0, lr, r8
 80003f0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80003f4:	fb0e f80c 	mul.w	r8, lr, ip
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d90e      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	45a0      	cmp	r8, r4
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 80b8 	beq.w	8000588 <__udivmoddi4+0x324>
 8000418:	46d6      	mov	lr, sl
 800041a:	eba4 0408 	sub.w	r4, r4, r8
 800041e:	fa1f f883 	uxth.w	r8, r3
 8000422:	fbb4 f3f0 	udiv	r3, r4, r0
 8000426:	fb00 4413 	mls	r4, r0, r3, r4
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000432:	45a4      	cmp	ip, r4
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1f0>
 8000436:	193c      	adds	r4, r7, r4
 8000438:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0801 	movcs.w	r8, #1
 8000442:	f04f 0800 	movcc.w	r8, #0
 8000446:	45a4      	cmp	ip, r4
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x1ee>
 800044a:	f1b8 0f00 	cmp.w	r8, #0
 800044e:	f000 809f 	beq.w	8000590 <__udivmoddi4+0x32c>
 8000452:	4603      	mov	r3, r0
 8000454:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000458:	eba4 040c 	sub.w	r4, r4, ip
 800045c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000460:	4564      	cmp	r4, ip
 8000462:	4673      	mov	r3, lr
 8000464:	46e0      	mov	r8, ip
 8000466:	d302      	bcc.n	800046e <__udivmoddi4+0x20a>
 8000468:	d107      	bne.n	800047a <__udivmoddi4+0x216>
 800046a:	45f1      	cmp	r9, lr
 800046c:	d205      	bcs.n	800047a <__udivmoddi4+0x216>
 800046e:	ebbe 0302 	subs.w	r3, lr, r2
 8000472:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000476:	3801      	subs	r0, #1
 8000478:	46e0      	mov	r8, ip
 800047a:	b15d      	cbz	r5, 8000494 <__udivmoddi4+0x230>
 800047c:	ebb9 0203 	subs.w	r2, r9, r3
 8000480:	eb64 0408 	sbc.w	r4, r4, r8
 8000484:	fa04 f606 	lsl.w	r6, r4, r6
 8000488:	fa22 f301 	lsr.w	r3, r2, r1
 800048c:	40cc      	lsrs	r4, r1
 800048e:	431e      	orrs	r6, r3
 8000490:	e9c5 6400 	strd	r6, r4, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	e736      	b.n	8000306 <__udivmoddi4+0xa2>
 8000498:	fbb1 fcf2 	udiv	ip, r1, r2
 800049c:	0c01      	lsrs	r1, r0, #16
 800049e:	4614      	mov	r4, r2
 80004a0:	b280      	uxth	r0, r0
 80004a2:	4696      	mov	lr, r2
 80004a4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004a8:	2620      	movs	r6, #32
 80004aa:	4690      	mov	r8, r2
 80004ac:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004b0:	4610      	mov	r0, r2
 80004b2:	fbb1 f1f2 	udiv	r1, r1, r2
 80004b6:	eba3 0308 	sub.w	r3, r3, r8
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	e74b      	b.n	8000358 <__udivmoddi4+0xf4>
 80004c0:	40b7      	lsls	r7, r6
 80004c2:	f1c6 0320 	rsb	r3, r6, #32
 80004c6:	fa01 f206 	lsl.w	r2, r1, r6
 80004ca:	fa21 f803 	lsr.w	r8, r1, r3
 80004ce:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d2:	fa20 f303 	lsr.w	r3, r0, r3
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	40b0      	lsls	r0, r6
 80004da:	4313      	orrs	r3, r2
 80004dc:	0c02      	lsrs	r2, r0, #16
 80004de:	0c19      	lsrs	r1, r3, #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	fbb8 f9fe 	udiv	r9, r8, lr
 80004e6:	fb0e 8819 	mls	r8, lr, r9, r8
 80004ea:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	4588      	cmp	r8, r1
 80004f4:	d951      	bls.n	800059a <__udivmoddi4+0x336>
 80004f6:	1879      	adds	r1, r7, r1
 80004f8:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 80004fc:	bf2c      	ite	cs
 80004fe:	f04f 0a01 	movcs.w	sl, #1
 8000502:	f04f 0a00 	movcc.w	sl, #0
 8000506:	4588      	cmp	r8, r1
 8000508:	d902      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800050a:	f1ba 0f00 	cmp.w	sl, #0
 800050e:	d031      	beq.n	8000574 <__udivmoddi4+0x310>
 8000510:	eba1 0108 	sub.w	r1, r1, r8
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	fb0e 1119 	mls	r1, lr, r9, r1
 8000520:	b29b      	uxth	r3, r3
 8000522:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000526:	4543      	cmp	r3, r8
 8000528:	d235      	bcs.n	8000596 <__udivmoddi4+0x332>
 800052a:	18fb      	adds	r3, r7, r3
 800052c:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0a01 	movcs.w	sl, #1
 8000536:	f04f 0a00 	movcc.w	sl, #0
 800053a:	4543      	cmp	r3, r8
 800053c:	d2bb      	bcs.n	80004b6 <__udivmoddi4+0x252>
 800053e:	f1ba 0f00 	cmp.w	sl, #0
 8000542:	d1b8      	bne.n	80004b6 <__udivmoddi4+0x252>
 8000544:	f1a9 0102 	sub.w	r1, r9, #2
 8000548:	443b      	add	r3, r7
 800054a:	e7b4      	b.n	80004b6 <__udivmoddi4+0x252>
 800054c:	1a84      	subs	r4, r0, r2
 800054e:	eb68 0203 	sbc.w	r2, r8, r3
 8000552:	2001      	movs	r0, #1
 8000554:	4696      	mov	lr, r2
 8000556:	e6eb      	b.n	8000330 <__udivmoddi4+0xcc>
 8000558:	443a      	add	r2, r7
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	e72b      	b.n	80003b8 <__udivmoddi4+0x154>
 8000560:	f1ac 0c02 	sub.w	ip, ip, #2
 8000564:	443b      	add	r3, r7
 8000566:	e710      	b.n	800038a <__udivmoddi4+0x126>
 8000568:	3902      	subs	r1, #2
 800056a:	443b      	add	r3, r7
 800056c:	e6a9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800056e:	443a      	add	r2, r7
 8000570:	3802      	subs	r0, #2
 8000572:	e6be      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000574:	eba7 0808 	sub.w	r8, r7, r8
 8000578:	f1a9 0c02 	sub.w	ip, r9, #2
 800057c:	4441      	add	r1, r8
 800057e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000582:	fb09 f804 	mul.w	r8, r9, r4
 8000586:	e7c9      	b.n	800051c <__udivmoddi4+0x2b8>
 8000588:	f1ae 0e02 	sub.w	lr, lr, #2
 800058c:	443c      	add	r4, r7
 800058e:	e744      	b.n	800041a <__udivmoddi4+0x1b6>
 8000590:	3b02      	subs	r3, #2
 8000592:	443c      	add	r4, r7
 8000594:	e75e      	b.n	8000454 <__udivmoddi4+0x1f0>
 8000596:	4649      	mov	r1, r9
 8000598:	e78d      	b.n	80004b6 <__udivmoddi4+0x252>
 800059a:	eba1 0108 	sub.w	r1, r1, r8
 800059e:	46cc      	mov	ip, r9
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7b8      	b.n	800051c <__udivmoddi4+0x2b8>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Motor_Stop>:
#include "Functions.h"
#include "main.h"
extern TIM_HandleTypeDef htim4;
uint16_t speed = 150;

void Motor_Stop() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ba:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <Motor_Stop+0x48>)
 80005bc:	f002 fdec 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005c6:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <Motor_Stop+0x48>)
 80005c8:	f002 fde6 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2108      	movs	r1, #8
 80005d0:	480a      	ldr	r0, [pc, #40]	@ (80005fc <Motor_Stop+0x4c>)
 80005d2:	f002 fde1 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005dc:	4808      	ldr	r0, [pc, #32]	@ (8000600 <Motor_Stop+0x50>)
 80005de:	f002 fddb 	bl	8003198 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <Motor_Stop+0x54>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <Motor_Stop+0x54>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	42020000 	.word	0x42020000
 80005fc:	42021c00 	.word	0x42021c00
 8000600:	42020400 	.word	0x42020400
 8000604:	200001a4 	.word	0x200001a4

08000608 <Motor_Forward>:

void Motor_Forward() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000612:	4810      	ldr	r0, [pc, #64]	@ (8000654 <Motor_Forward+0x4c>)
 8000614:	f002 fdc0 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800061e:	480d      	ldr	r0, [pc, #52]	@ (8000654 <Motor_Forward+0x4c>)
 8000620:	f002 fdba 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2108      	movs	r1, #8
 8000628:	480b      	ldr	r0, [pc, #44]	@ (8000658 <Motor_Forward+0x50>)
 800062a:	f002 fdb5 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000634:	4809      	ldr	r0, [pc, #36]	@ (800065c <Motor_Forward+0x54>)
 8000636:	f002 fdaf 	bl	8003198 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed);
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <Motor_Forward+0x58>)
 800063c:	881a      	ldrh	r2, [r3, #0]
 800063e:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <Motor_Forward+0x5c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, speed);
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <Motor_Forward+0x58>)
 8000646:	881a      	ldrh	r2, [r3, #0]
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <Motor_Forward+0x5c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	42020000 	.word	0x42020000
 8000658:	42021c00 	.word	0x42021c00
 800065c:	42020400 	.word	0x42020400
 8000660:	20000000 	.word	0x20000000
 8000664:	200001a4 	.word	0x200001a4

08000668 <Motor_Backward>:

void Motor_Backward() {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000672:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <Motor_Backward+0x4c>)
 8000674:	f002 fd90 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800067e:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <Motor_Backward+0x4c>)
 8000680:	f002 fd8a 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	480b      	ldr	r0, [pc, #44]	@ (80006b8 <Motor_Backward+0x50>)
 800068a:	f002 fd85 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <Motor_Backward+0x54>)
 8000696:	f002 fd7f 	bl	8003198 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed);
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <Motor_Backward+0x58>)
 800069c:	881a      	ldrh	r2, [r3, #0]
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <Motor_Backward+0x5c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, speed);
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <Motor_Backward+0x58>)
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <Motor_Backward+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	42020000 	.word	0x42020000
 80006b8:	42021c00 	.word	0x42021c00
 80006bc:	42020400 	.word	0x42020400
 80006c0:	20000000 	.word	0x20000000
 80006c4:	200001a4 	.word	0x200001a4

080006c8 <Motor_Right>:

void Motor_Right() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d2:	480f      	ldr	r0, [pc, #60]	@ (8000710 <Motor_Right+0x48>)
 80006d4:	f002 fd60 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006de:	480c      	ldr	r0, [pc, #48]	@ (8000710 <Motor_Right+0x48>)
 80006e0:	f002 fd5a 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2108      	movs	r1, #8
 80006e8:	480a      	ldr	r0, [pc, #40]	@ (8000714 <Motor_Right+0x4c>)
 80006ea:	f002 fd55 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f4:	4808      	ldr	r0, [pc, #32]	@ (8000718 <Motor_Right+0x50>)
 80006f6:	f002 fd4f 	bl	8003198 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, speed);
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <Motor_Right+0x54>)
 80006fc:	881a      	ldrh	r2, [r3, #0]
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <Motor_Right+0x58>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <Motor_Right+0x58>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2200      	movs	r2, #0
 800070a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	42020000 	.word	0x42020000
 8000714:	42021c00 	.word	0x42021c00
 8000718:	42020400 	.word	0x42020400
 800071c:	20000000 	.word	0x20000000
 8000720:	200001a4 	.word	0x200001a4

08000724 <Motor_Left>:

void Motor_Left() {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(AIN1_GPIO_Port, AIN1_Pin, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072e:	480f      	ldr	r0, [pc, #60]	@ (800076c <Motor_Left+0x48>)
 8000730:	f002 fd32 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(AIN2_GPIO_Port, AIN2_Pin, 0);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800073a:	480c      	ldr	r0, [pc, #48]	@ (800076c <Motor_Left+0x48>)
 800073c:	f002 fd2c 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	480a      	ldr	r0, [pc, #40]	@ (8000770 <Motor_Left+0x4c>)
 8000746:	f002 fd27 	bl	8003198 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000750:	4808      	ldr	r0, [pc, #32]	@ (8000774 <Motor_Left+0x50>)
 8000752:	f002 fd21 	bl	8003198 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <Motor_Left+0x54>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2200      	movs	r2, #0
 800075c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, speed);
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <Motor_Left+0x58>)
 8000760:	881a      	ldrh	r2, [r3, #0]
 8000762:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <Motor_Left+0x54>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	42020000 	.word	0x42020000
 8000770:	42021c00 	.word	0x42021c00
 8000774:	42020400 	.word	0x42020400
 8000778:	200001a4 	.word	0x200001a4
 800077c:	20000000 	.word	0x20000000

08000780 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	b29a      	uxth	r2, r3
 8000790:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <_write+0x28>)
 8000798:	f005 fc2a 	bl	8005ff0 <HAL_UART_Transmit>
    return len;
 800079c:	687b      	ldr	r3, [r7, #4]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000284 	.word	0x20000284

080007ac <HAL_UART_RxCpltCallback>:
void Motor_Left() ;
void Motor_Right();



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {  // Important : comparer huart->Instance !
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a30      	ldr	r2, [pc, #192]	@ (800087c <HAL_UART_RxCpltCallback+0xd0>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d159      	bne.n	8000872 <HAL_UART_RxCpltCallback+0xc6>
        //HAL_GPIO_TogglePin(LED_BLUE_PORT, LED_BLUE_PIN);

        printf("Commande reçue : %c\r\n", received_data);  // Affichage clair de la réception
 80007be:	4b30      	ldr	r3, [pc, #192]	@ (8000880 <HAL_UART_RxCpltCallback+0xd4>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4619      	mov	r1, r3
 80007c4:	482f      	ldr	r0, [pc, #188]	@ (8000884 <HAL_UART_RxCpltCallback+0xd8>)
 80007c6:	f007 fa27 	bl	8007c18 <iprintf>

        switch (received_data) {
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <HAL_UART_RxCpltCallback+0xd4>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3b42      	subs	r3, #66	@ 0x42
 80007d0:	2b11      	cmp	r3, #17
 80007d2:	d845      	bhi.n	8000860 <HAL_UART_RxCpltCallback+0xb4>
 80007d4:	a201      	add	r2, pc, #4	@ (adr r2, 80007dc <HAL_UART_RxCpltCallback+0x30>)
 80007d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007da:	bf00      	nop
 80007dc:	08000831 	.word	0x08000831
 80007e0:	08000861 	.word	0x08000861
 80007e4:	08000861 	.word	0x08000861
 80007e8:	08000861 	.word	0x08000861
 80007ec:	08000825 	.word	0x08000825
 80007f0:	08000861 	.word	0x08000861
 80007f4:	08000861 	.word	0x08000861
 80007f8:	08000861 	.word	0x08000861
 80007fc:	08000861 	.word	0x08000861
 8000800:	08000861 	.word	0x08000861
 8000804:	0800083d 	.word	0x0800083d
 8000808:	08000861 	.word	0x08000861
 800080c:	08000861 	.word	0x08000861
 8000810:	08000861 	.word	0x08000861
 8000814:	08000861 	.word	0x08000861
 8000818:	08000861 	.word	0x08000861
 800081c:	08000849 	.word	0x08000849
 8000820:	08000855 	.word	0x08000855
            case 'F': Motor_Forward(); printf("Avance\n"); break;
 8000824:	f7ff fef0 	bl	8000608 <Motor_Forward>
 8000828:	4817      	ldr	r0, [pc, #92]	@ (8000888 <HAL_UART_RxCpltCallback+0xdc>)
 800082a:	f007 fa5d 	bl	8007ce8 <puts>
 800082e:	e01b      	b.n	8000868 <HAL_UART_RxCpltCallback+0xbc>
            case 'B': Motor_Backward(); printf("Recule\n"); break;
 8000830:	f7ff ff1a 	bl	8000668 <Motor_Backward>
 8000834:	4815      	ldr	r0, [pc, #84]	@ (800088c <HAL_UART_RxCpltCallback+0xe0>)
 8000836:	f007 fa57 	bl	8007ce8 <puts>
 800083a:	e015      	b.n	8000868 <HAL_UART_RxCpltCallback+0xbc>
            case 'L': Motor_Left(); printf("Gauche\n"); break;
 800083c:	f7ff ff72 	bl	8000724 <Motor_Left>
 8000840:	4813      	ldr	r0, [pc, #76]	@ (8000890 <HAL_UART_RxCpltCallback+0xe4>)
 8000842:	f007 fa51 	bl	8007ce8 <puts>
 8000846:	e00f      	b.n	8000868 <HAL_UART_RxCpltCallback+0xbc>
            case 'R': Motor_Right(); printf("Droite\n"); break;
 8000848:	f7ff ff3e 	bl	80006c8 <Motor_Right>
 800084c:	4811      	ldr	r0, [pc, #68]	@ (8000894 <HAL_UART_RxCpltCallback+0xe8>)
 800084e:	f007 fa4b 	bl	8007ce8 <puts>
 8000852:	e009      	b.n	8000868 <HAL_UART_RxCpltCallback+0xbc>
            case 'S': Motor_Stop(); printf("Stop\n"); break;
 8000854:	f7ff feac 	bl	80005b0 <Motor_Stop>
 8000858:	480f      	ldr	r0, [pc, #60]	@ (8000898 <HAL_UART_RxCpltCallback+0xec>)
 800085a:	f007 fa45 	bl	8007ce8 <puts>
 800085e:	e003      	b.n	8000868 <HAL_UART_RxCpltCallback+0xbc>
            default: printf("Commande inconnue\n"); break;
 8000860:	480e      	ldr	r0, [pc, #56]	@ (800089c <HAL_UART_RxCpltCallback+0xf0>)
 8000862:	f007 fa41 	bl	8007ce8 <puts>
 8000866:	bf00      	nop
        }

        HAL_UART_Receive_IT(&huart4, &received_data, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	4905      	ldr	r1, [pc, #20]	@ (8000880 <HAL_UART_RxCpltCallback+0xd4>)
 800086c:	480c      	ldr	r0, [pc, #48]	@ (80008a0 <HAL_UART_RxCpltCallback+0xf4>)
 800086e:	f005 fc4d 	bl	800610c <HAL_UART_Receive_IT>
    }
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40004c00 	.word	0x40004c00
 8000880:	20000318 	.word	0x20000318
 8000884:	080089e8 	.word	0x080089e8
 8000888:	08008a00 	.word	0x08008a00
 800088c:	08008a08 	.word	0x08008a08
 8000890:	08008a10 	.word	0x08008a10
 8000894:	08008a18 	.word	0x08008a18
 8000898:	08008a20 	.word	0x08008a20
 800089c:	08008a28 	.word	0x08008a28
 80008a0:	200001f0 	.word	0x200001f0

080008a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a8:	f000 ff95 	bl	80017d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ac:	f000 f82c 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b0:	f000 fb36 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 80008b4:	f000 fb0a 	bl	8000ecc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008b8:	f000 fabc 	bl	8000e34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80008bc:	f000 f930 	bl	8000b20 <MX_TIM1_Init>
  MX_UART4_Init();
 80008c0:	f000 fa6c 	bl	8000d9c <MX_UART4_Init>
  MX_ADC1_Init();
 80008c4:	f000 f872 	bl	80009ac <MX_ADC1_Init>
  MX_ICACHE_Init();
 80008c8:	f000 f916 	bl	8000af8 <MX_ICACHE_Init>
  MX_TIM4_Init();
 80008cc:	f000 f9e4 	bl	8000c98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, 1);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	4808      	ldr	r0, [pc, #32]	@ (80008f8 <main+0x54>)
 80008d6:	f002 fc5f 	bl	8003198 <HAL_GPIO_WritePin>
  // For the motors
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008da:	2100      	movs	r1, #0
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <main+0x58>)
 80008de:	f004 fb01 	bl	8004ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008e2:	210c      	movs	r1, #12
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <main+0x58>)
 80008e6:	f004 fafd 	bl	8004ee4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart4, &received_data, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	4904      	ldr	r1, [pc, #16]	@ (8000900 <main+0x5c>)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <main+0x60>)
 80008f0:	f005 fc0c 	bl	800610c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <main+0x50>
 80008f8:	42020400 	.word	0x42020400
 80008fc:	200001a4 	.word	0x200001a4
 8000900:	20000318 	.word	0x20000318
 8000904:	200001f0 	.word	0x200001f0

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b098      	sub	sp, #96	@ 0x60
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	2248      	movs	r2, #72	@ 0x48
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fac6 	bl	8007ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800092a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800092e:	f002 fcc5 	bl	80032bc <HAL_PWREx_ControlVoltageScaling>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000938:	f000 fb96 	bl	8001068 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800093c:	2310      	movs	r3, #16
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000940:	2301      	movs	r3, #1
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000948:	2360      	movs	r3, #96	@ 0x60
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000950:	2301      	movs	r3, #1
 8000952:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000958:	2328      	movs	r3, #40	@ 0x28
 800095a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800095c:	2307      	movs	r3, #7
 800095e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000960:	2302      	movs	r3, #2
 8000962:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000964:	2302      	movs	r3, #2
 8000966:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fd35 	bl	80033dc <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000978:	f000 fb76 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000980:	2303      	movs	r3, #3
 8000982:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2103      	movs	r1, #3
 8000994:	4618      	mov	r0, r3
 8000996:	f003 f9f7 	bl	8003d88 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009a0:	f000 fb62 	bl	8001068 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3760      	adds	r7, #96	@ 0x60
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009ce:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009d0:	4a44      	ldr	r2, [pc, #272]	@ (8000ae4 <MX_ADC1_Init+0x138>)
 80009d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d4:	4b42      	ldr	r3, [pc, #264]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009da:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009e6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009ec:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009f2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f8:	4b39      	ldr	r3, [pc, #228]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80009fe:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a04:	4b36      	ldr	r3, [pc, #216]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a12:	4b33      	ldr	r3, [pc, #204]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a18:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a2e:	482c      	ldr	r0, [pc, #176]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a30:	f001 f8e8 	bl	8001c04 <HAL_ADC_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a3a:	f000 fb15 	bl	8001068 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4825      	ldr	r0, [pc, #148]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a4a:	f001 fe37 	bl	80026bc <HAL_ADCEx_MultiModeConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a54:	f000 fb08 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a58:	4b23      	ldr	r3, [pc, #140]	@ (8000ae8 <MX_ADC1_Init+0x13c>)
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000a60:	2305      	movs	r3, #5
 8000a62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a64:	237f      	movs	r3, #127	@ 0x7f
 8000a66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	481a      	ldr	r0, [pc, #104]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a76:	f001 fa11 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a80:	f000 faf2 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_ADC1_Init+0x140>)
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a88:	230c      	movs	r3, #12
 8000a8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000a92:	f001 fa03 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000a9c:	f000 fae4 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <MX_ADC1_Init+0x144>)
 8000aa2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000aae:	f001 f9f5 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000ab8:	f000 fad6 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000abc:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <MX_ADC1_Init+0x148>)
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ac0:	2318      	movs	r3, #24
 8000ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_ADC1_Init+0x134>)
 8000aca:	f001 f9e7 	bl	8001e9c <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8000ad4:	f000 fac8 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000088 	.word	0x20000088
 8000ae4:	42028000 	.word	0x42028000
 8000ae8:	25b00200 	.word	0x25b00200
 8000aec:	2a000400 	.word	0x2a000400
 8000af0:	2e300800 	.word	0x2e300800
 8000af4:	32601000 	.word	0x32601000

08000af8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000afc:	2000      	movs	r0, #0
 8000afe:	f002 fb9f 	bl	8003240 <HAL_ICACHE_ConfigAssociativityMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000b08:	f000 faae 	bl	8001068 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000b0c:	f002 fbb8 	bl	8003280 <HAL_ICACHE_Enable>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000b16:	f000 faa7 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09c      	sub	sp, #112	@ 0x70
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2234      	movs	r2, #52	@ 0x34
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f007 f9a4 	bl	8007ea8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b60:	4b4b      	ldr	r3, [pc, #300]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b62:	4a4c      	ldr	r2, [pc, #304]	@ (8000c94 <MX_TIM1_Init+0x174>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b66:	4b4a      	ldr	r3, [pc, #296]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b48      	ldr	r3, [pc, #288]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b72:	4b47      	ldr	r3, [pc, #284]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7a:	4b45      	ldr	r3, [pc, #276]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b80:	4b43      	ldr	r3, [pc, #268]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b86:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8c:	4840      	ldr	r0, [pc, #256]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000b8e:	f004 f8f1 	bl	8004d74 <HAL_TIM_Base_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b98:	f000 fa66 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4839      	ldr	r0, [pc, #228]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000baa:	f004 fbb5 	bl	8005318 <HAL_TIM_ConfigClockSource>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000bb4:	f000 fa58 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bb8:	4835      	ldr	r0, [pc, #212]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000bba:	f004 f932 	bl	8004e22 <HAL_TIM_PWM_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000bc4:	f000 fa50 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bd8:	4619      	mov	r1, r3
 8000bda:	482d      	ldr	r0, [pc, #180]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000bdc:	f005 f8a4 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000be6:	f000 fa3f 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bea:	2360      	movs	r3, #96	@ 0x60
 8000bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000c10:	f004 fa6e 	bl	80050f0 <HAL_TIM_PWM_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000c1a:	f000 fa25 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c22:	2204      	movs	r2, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	481a      	ldr	r0, [pc, #104]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000c28:	f004 fa62 	bl	80050f0 <HAL_TIM_PWM_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000c32:	f000 fa19 	bl	8001068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4807      	ldr	r0, [pc, #28]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000c74:	f005 f8e0 	bl	8005e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c7e:	f000 f9f3 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c82:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <MX_TIM1_Init+0x170>)
 8000c84:	f000 faf0 	bl	8001268 <HAL_TIM_MspPostInit>

}
 8000c88:	bf00      	nop
 8000c8a:	3770      	adds	r7, #112	@ 0x70
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000158 	.word	0x20000158
 8000c94:	40012c00 	.word	0x40012c00

08000c98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	@ 0x38
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cca:	4b32      	ldr	r3, [pc, #200]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000ccc:	4a32      	ldr	r2, [pc, #200]	@ (8000d98 <MX_TIM4_Init+0x100>)
 8000cce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000cd0:	4b30      	ldr	r3, [pc, #192]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000cd2:	224f      	movs	r2, #79	@ 0x4f
 8000cd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000cde:	22c7      	movs	r2, #199	@ 0xc7
 8000ce0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cee:	4829      	ldr	r0, [pc, #164]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000cf0:	f004 f840 	bl	8004d74 <HAL_TIM_Base_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000cfa:	f000 f9b5 	bl	8001068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4822      	ldr	r0, [pc, #136]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000d0c:	f004 fb04 	bl	8005318 <HAL_TIM_ConfigClockSource>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000d16:	f000 f9a7 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d1a:	481e      	ldr	r0, [pc, #120]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000d1c:	f004 f881 	bl	8004e22 <HAL_TIM_PWM_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000d26:	f000 f99f 	bl	8001068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4816      	ldr	r0, [pc, #88]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000d3a:	f004 fff5 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000d44:	f000 f990 	bl	8001068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d48:	2360      	movs	r3, #96	@ 0x60
 8000d4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d58:	463b      	mov	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000d60:	f004 f9c6 	bl	80050f0 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000d6a:	f000 f97d 	bl	8001068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	220c      	movs	r2, #12
 8000d72:	4619      	mov	r1, r3
 8000d74:	4807      	ldr	r0, [pc, #28]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000d76:	f004 f9bb 	bl	80050f0 <HAL_TIM_PWM_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000d80:	f000 f972 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d84:	4803      	ldr	r0, [pc, #12]	@ (8000d94 <MX_TIM4_Init+0xfc>)
 8000d86:	f000 fa6f 	bl	8001268 <HAL_TIM_MspPostInit>

}
 8000d8a:	bf00      	nop
 8000d8c:	3738      	adds	r7, #56	@ 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200001a4 	.word	0x200001a4
 8000d98:	40000800 	.word	0x40000800

08000d9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000da0:	4b22      	ldr	r3, [pc, #136]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000da2:	4a23      	ldr	r2, [pc, #140]	@ (8000e30 <MX_UART4_Init+0x94>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000da6:	4b21      	ldr	r3, [pc, #132]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000da8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000de4:	4811      	ldr	r0, [pc, #68]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000de6:	f005 f8b3 	bl	8005f50 <HAL_UART_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000df0:	f000 f93a 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000df8:	f006 fd81 	bl	80078fe <HAL_UARTEx_SetTxFifoThreshold>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e02:	f000 f931 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e06:	2100      	movs	r1, #0
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000e0a:	f006 fdb6 	bl	800797a <HAL_UARTEx_SetRxFifoThreshold>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e14:	f000 f928 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e18:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_UART4_Init+0x90>)
 8000e1a:	f006 fd37 	bl	800788c <HAL_UARTEx_DisableFifoMode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e24:	f000 f920 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001f0 	.word	0x200001f0
 8000e30:	40004c00 	.word	0x40004c00

08000e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ec8 <MX_USART2_UART_Init+0x94>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e7c:	4811      	ldr	r0, [pc, #68]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e7e:	f005 f867 	bl	8005f50 <HAL_UART_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e88:	f000 f8ee 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000e90:	f006 fd35 	bl	80078fe <HAL_UARTEx_SetTxFifoThreshold>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f000 f8e5 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000ea2:	f006 fd6a 	bl	800797a <HAL_UARTEx_SetRxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 f8dc 	bl	8001068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	@ (8000ec4 <MX_USART2_UART_Init+0x90>)
 8000eb2:	f006 fceb 	bl	800788c <HAL_UARTEx_DisableFifoMode>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 f8d4 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000284 	.word	0x20000284
 8000ec8:	40004400 	.word	0x40004400

08000ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_DMA_Init+0x50>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed6:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <MX_DMA_Init+0x50>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_DMA_Init+0x50>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_DMA_Init+0x50>)
 8000eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eee:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <MX_DMA_Init+0x50>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ef6:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_DMA_Init+0x50>)
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201d      	movs	r0, #29
 8000f08:	f001 fd57 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f0c:	201d      	movs	r0, #29
 8000f0e:	f001 fd6e 	bl	80029ee <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	4b48      	ldr	r3, [pc, #288]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a47      	ldr	r2, [pc, #284]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b45      	ldr	r3, [pc, #276]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b42      	ldr	r3, [pc, #264]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a41      	ldr	r2, [pc, #260]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a3b      	ldr	r2, [pc, #236]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <MX_GPIO_Init+0x138>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRIG_Pin|STBY_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 518c 	mov.w	r1, #4480	@ 0x1180
 8000f84:	4835      	ldr	r0, [pc, #212]	@ (800105c <MX_GPIO_Init+0x13c>)
 8000f86:	f002 f907 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000f90:	4833      	ldr	r0, [pc, #204]	@ (8001060 <MX_GPIO_Init+0x140>)
 8000f92:	f002 f901 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN1_GPIO_Port, BIN1_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2108      	movs	r1, #8
 8000f9a:	4832      	ldr	r0, [pc, #200]	@ (8001064 <MX_GPIO_Init+0x144>)
 8000f9c:	f002 f8fc 	bl	8003198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4829      	ldr	r0, [pc, #164]	@ (800105c <MX_GPIO_Init+0x13c>)
 8000fb6:	f001 ff6f 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin STBY_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|STBY_Pin|BIN2_Pin;
 8000fba:	f44f 538c 	mov.w	r3, #4480	@ 0x1180
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4822      	ldr	r0, [pc, #136]	@ (800105c <MX_GPIO_Init+0x13c>)
 8000fd4:	f001 ff60 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fde:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	481b      	ldr	r0, [pc, #108]	@ (800105c <MX_GPIO_Init+0x13c>)
 8000ff0:	f001 ff52 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 8000ff4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4814      	ldr	r0, [pc, #80]	@ (8001060 <MX_GPIO_Init+0x140>)
 800100e:	f001 ff43 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN1_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin;
 8001012:	2308      	movs	r3, #8
 8001014:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BIN1_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <MX_GPIO_Init+0x144>)
 800102a:	f001 ff35 	bl	8002e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	200b      	movs	r0, #11
 8001034:	f001 fcc1 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001038:	200b      	movs	r0, #11
 800103a:	f001 fcd8 	bl	80029ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2018      	movs	r0, #24
 8001044:	f001 fcb9 	bl	80029ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001048:	2018      	movs	r0, #24
 800104a:	f001 fcd0 	bl	80029ee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000
 800105c:	42020400 	.word	0x42020400
 8001060:	42020000 	.word	0x42020000
 8001064:	42021c00 	.word	0x42021c00

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_MspInit+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6613      	str	r3, [r2, #96]	@ 0x60
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_MspInit+0x44>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	@ 0x58
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

    /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010aa:	f002 f963 	bl	8003374 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ae      	sub	sp, #184	@ 0xb8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2294      	movs	r2, #148	@ 0x94
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f006 fee3 	bl	8007ea8 <memset>
  if(hadc->Instance==ADC1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a41      	ldr	r2, [pc, #260]	@ (80011ec <HAL_ADC_MspInit+0x130>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d17a      	bne.n	80011e2 <HAL_ADC_MspInit+0x126>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_MSI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001102:	2310      	movs	r3, #16
 8001104:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001106:	2307      	movs	r3, #7
 8001108:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800110a:	2302      	movs	r3, #2
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001112:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f913 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001128:	f7ff ff9e 	bl	8001068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <HAL_ADC_MspInit+0x134>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a2f      	ldr	r2, [pc, #188]	@ (80011f0 <HAL_ADC_MspInit+0x134>)
 8001132:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <HAL_ADC_MspInit+0x134>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <HAL_ADC_MspInit+0x134>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001148:	4a29      	ldr	r2, [pc, #164]	@ (80011f0 <HAL_ADC_MspInit+0x134>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001150:	4b27      	ldr	r3, [pc, #156]	@ (80011f0 <HAL_ADC_MspInit+0x134>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = X1_Pin|X2_Pin|X3_Pin|X4_Pin;
 800115c:	23f0      	movs	r3, #240	@ 0xf0
 800115e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001162:	2303      	movs	r3, #3
 8001164:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001172:	4619      	mov	r1, r3
 8001174:	481f      	ldr	r0, [pc, #124]	@ (80011f4 <HAL_ADC_MspInit+0x138>)
 8001176:	f001 fe8f 	bl	8002e98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800117a:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 800117c:	4a1f      	ldr	r2, [pc, #124]	@ (80011fc <HAL_ADC_MspInit+0x140>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001180:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 8001182:	2205      	movs	r2, #5
 8001184:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 800119a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800119e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011aa:	2220      	movs	r2, #32
 80011ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011b4:	4810      	ldr	r0, [pc, #64]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011b6:	f001 fc35 	bl	8002a24 <HAL_DMA_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80011c0:	f7ff ff52 	bl	8001068 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80011c4:	2110      	movs	r1, #16
 80011c6:	480c      	ldr	r0, [pc, #48]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011c8:	f001 fdd4 	bl	8002d74 <HAL_DMA_ConfigChannelAttributes>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80011d2:	f7ff ff49 	bl	8001068 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011da:	651a      	str	r2, [r3, #80]	@ 0x50
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_ADC_MspInit+0x13c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011e2:	bf00      	nop
 80011e4:	37b8      	adds	r7, #184	@ 0xb8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	42028000 	.word	0x42028000
 80011f0:	40021000 	.word	0x40021000
 80011f4:	42020000 	.word	0x42020000
 80011f8:	200000f0 	.word	0x200000f0
 80011fc:	40020008 	.word	0x40020008

08001200 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a13      	ldr	r2, [pc, #76]	@ (800125c <HAL_TIM_Base_MspInit+0x5c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10c      	bne.n	800122c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001212:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001216:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001218:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800121c:	6613      	str	r3, [r2, #96]	@ 0x60
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 800122a:	e010      	b.n	800124e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <HAL_TIM_Base_MspInit+0x64>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10b      	bne.n	800124e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a09      	ldr	r2, [pc, #36]	@ (8001260 <HAL_TIM_Base_MspInit+0x60>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <HAL_TIM_Base_MspInit+0x60>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40012c00 	.word	0x40012c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40000800 	.word	0x40000800

08001268 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	@ 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <HAL_TIM_MspPostInit+0xac>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d11d      	bne.n	80012c6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_TIM_MspPostInit+0xb0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a22      	ldr	r2, [pc, #136]	@ (8001318 <HAL_TIM_MspPostInit+0xb0>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_TIM_MspPostInit+0xb0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Servo2_Pin|Servo1_Pin;
 80012a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4817      	ldr	r0, [pc, #92]	@ (800131c <HAL_TIM_MspPostInit+0xb4>)
 80012c0:	f001 fdea 	bl	8002e98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012c4:	e021      	b.n	800130a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <HAL_TIM_MspPostInit+0xb8>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d11c      	bne.n	800130a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_TIM_MspPostInit+0xb0>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <HAL_TIM_MspPostInit+0xb0>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_TIM_MspPostInit+0xb0>)
 80012de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80012e8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012fa:	2302      	movs	r3, #2
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4807      	ldr	r0, [pc, #28]	@ (8001324 <HAL_TIM_MspPostInit+0xbc>)
 8001306:	f001 fdc7 	bl	8002e98 <HAL_GPIO_Init>
}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40012c00 	.word	0x40012c00
 8001318:	40021000 	.word	0x40021000
 800131c:	42020000 	.word	0x42020000
 8001320:	40000800 	.word	0x40000800
 8001324:	42020400 	.word	0x42020400

08001328 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b0b0      	sub	sp, #192	@ 0xc0
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	f107 0318 	add.w	r3, r7, #24
 8001344:	2294      	movs	r2, #148	@ 0x94
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f006 fdad 	bl	8007ea8 <memset>
  if(huart->Instance==UART4)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a41      	ldr	r2, [pc, #260]	@ (8001458 <HAL_UART_MspInit+0x130>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d13b      	bne.n	80013d0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001358:	2308      	movs	r3, #8
 800135a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800135c:	2300      	movs	r3, #0
 800135e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f002 ffef 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001370:	f7ff fe7a 	bl	8001068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001374:	4b39      	ldr	r3, [pc, #228]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001378:	4a38      	ldr	r2, [pc, #224]	@ (800145c <HAL_UART_MspInit+0x134>)
 800137a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800137e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b33      	ldr	r3, [pc, #204]	@ (800145c <HAL_UART_MspInit+0x134>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a32      	ldr	r2, [pc, #200]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_UART_MspInit+0x134>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013bc:	2308      	movs	r3, #8
 80013be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013c6:	4619      	mov	r1, r3
 80013c8:	4825      	ldr	r0, [pc, #148]	@ (8001460 <HAL_UART_MspInit+0x138>)
 80013ca:	f001 fd65 	bl	8002e98 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ce:	e03f      	b.n	8001450 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a23      	ldr	r2, [pc, #140]	@ (8001464 <HAL_UART_MspInit+0x13c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d13a      	bne.n	8001450 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013de:	2300      	movs	r3, #0
 80013e0:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 ffae 	bl	8004348 <HAL_RCCEx_PeriphCLKConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013f2:	f7ff fe39 	bl	8001068 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f6:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_UART_MspInit+0x134>)
 80013f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fa:	4a18      	ldr	r2, [pc, #96]	@ (800145c <HAL_UART_MspInit+0x134>)
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001400:	6593      	str	r3, [r2, #88]	@ 0x58
 8001402:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	4a12      	ldr	r2, [pc, #72]	@ (800145c <HAL_UART_MspInit+0x134>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_UART_MspInit+0x134>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001426:	230c      	movs	r3, #12
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800143e:	2307      	movs	r3, #7
 8001440:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	@ (8001460 <HAL_UART_MspInit+0x138>)
 800144c:	f001 fd24 	bl	8002e98 <HAL_GPIO_Init>
}
 8001450:	bf00      	nop
 8001452:	37c0      	adds	r7, #192	@ 0xc0
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40004c00 	.word	0x40004c00
 800145c:	40021000 	.word	0x40021000
 8001460:	42020000 	.word	0x42020000
 8001464:	40004400 	.word	0x40004400

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <NMI_Handler+0x4>

08001470 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <MemManage_Handler+0x4>

08001480 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014be:	f000 f9e1 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f001 fe7c 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHO_Pin);
 80014d8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014dc:	f001 fe74 	bl	80031c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <DMA1_Channel1_IRQHandler+0x10>)
 80014ea:	f001 fb43 	bl	8002b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000f0 	.word	0x200000f0

080014f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
  }

  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800155a:	605a      	str	r2, [r3, #4]
  return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	@ (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	@ (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f006 fcba 	bl	8007f44 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20030000 	.word	0x20030000
 80015fc:	00000400 	.word	0x00000400
 8001600:	2000031c 	.word	0x2000031c
 8001604:	20000470 	.word	0x20000470

08001608 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001632:	4b4f      	ldr	r3, [pc, #316]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d107      	bne.n	800164e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800163e:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e005      	b.n	800165a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800164e:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800165a:	4a46      	ldr	r2, [pc, #280]	@ (8001774 <SystemCoreClockUpdate+0x148>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001664:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d866      	bhi.n	800173e <SystemCoreClockUpdate+0x112>
 8001670:	a201      	add	r2, pc, #4	@ (adr r2, 8001678 <SystemCoreClockUpdate+0x4c>)
 8001672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001676:	bf00      	nop
 8001678:	080016ad 	.word	0x080016ad
 800167c:	0800173f 	.word	0x0800173f
 8001680:	0800173f 	.word	0x0800173f
 8001684:	0800173f 	.word	0x0800173f
 8001688:	080016b5 	.word	0x080016b5
 800168c:	0800173f 	.word	0x0800173f
 8001690:	0800173f 	.word	0x0800173f
 8001694:	0800173f 	.word	0x0800173f
 8001698:	080016bd 	.word	0x080016bd
 800169c:	0800173f 	.word	0x0800173f
 80016a0:	0800173f 	.word	0x0800173f
 80016a4:	0800173f 	.word	0x0800173f
 80016a8:	080016c5 	.word	0x080016c5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80016ac:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6013      	str	r3, [r2, #0]
      break;
 80016b2:	e048      	b.n	8001746 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80016b4:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 80016b6:	4a31      	ldr	r2, [pc, #196]	@ (800177c <SystemCoreClockUpdate+0x150>)
 80016b8:	601a      	str	r2, [r3, #0]
      break;
 80016ba:	e044      	b.n	8001746 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80016bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 80016be:	4a2f      	ldr	r2, [pc, #188]	@ (800177c <SystemCoreClockUpdate+0x150>)
 80016c0:	601a      	str	r2, [r3, #0]
      break;
 80016c2:	e040      	b.n	8001746 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	3301      	adds	r3, #1
 80016da:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d003      	beq.n	80016ea <SystemCoreClockUpdate+0xbe>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d006      	beq.n	80016f6 <SystemCoreClockUpdate+0xca>
 80016e8:	e00b      	b.n	8001702 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80016ea:	4a24      	ldr	r2, [pc, #144]	@ (800177c <SystemCoreClockUpdate+0x150>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	613b      	str	r3, [r7, #16]
          break;
 80016f4:	e00b      	b.n	800170e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80016f6:	4a21      	ldr	r2, [pc, #132]	@ (800177c <SystemCoreClockUpdate+0x150>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	613b      	str	r3, [r7, #16]
          break;
 8001700:	e005      	b.n	800170e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	613b      	str	r3, [r7, #16]
          break;
 800170c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800170e:	4b18      	ldr	r3, [pc, #96]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0e5b      	lsrs	r3, r3, #25
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	3301      	adds	r3, #1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 800173a:	6013      	str	r3, [r2, #0]
      break;
 800173c:	e003      	b.n	8001746 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	6013      	str	r3, [r2, #0]
      break;
 8001744:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <SystemCoreClockUpdate+0x144>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	4a0b      	ldr	r2, [pc, #44]	@ (8001780 <SystemCoreClockUpdate+0x154>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <SystemCoreClockUpdate+0x14c>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	371c      	adds	r7, #28
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	08008a54 	.word	0x08008a54
 8001778:	20000004 	.word	0x20000004
 800177c:	00f42400 	.word	0x00f42400
 8001780:	08008a3c 	.word	0x08008a3c

08001784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001788:	f7ff ff3e 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800178c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800178e:	e003      	b.n	8001798 <LoopCopyDataInit>

08001790 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001792:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001794:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001796:	3104      	adds	r1, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001798:	480a      	ldr	r0, [pc, #40]	@ (80017c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800179a:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800179c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800179e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017a0:	d3f6      	bcc.n	8001790 <CopyDataInit>
	ldr	r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80017a4:	e002      	b.n	80017ac <LoopFillZerobss>

080017a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017a8:	f842 3b04 	str.w	r3, [r2], #4

080017ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <LoopForever+0x16>)
	cmp	r2, r3
 80017ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017b0:	d3f9      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017b2:	f006 fbcd 	bl	8007f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b6:	f7ff f875 	bl	80008a4 <main>

080017ba <LoopForever>:

LoopForever:
    b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80017bc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80017c0:	08008b00 	.word	0x08008b00
	ldr	r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017c8:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80017cc:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80017d0:	20000470 	.word	0x20000470

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>

080017d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80017e0:	2004      	movs	r0, #4
 80017e2:	f001 f8df 	bl	80029a4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80017e6:	f7ff ff21 	bl	800162c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ea:	2007      	movs	r0, #7
 80017ec:	f000 f80e 	bl	800180c <HAL_InitTick>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	e001      	b.n	8001800 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017fc:	f7ff fc3a 	bl	8001074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001800:	79fb      	ldrb	r3, [r7, #7]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001818:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <HAL_InitTick+0x6c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d023      	beq.n	8001868 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_InitTick+0x70>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_InitTick+0x6c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f001 f8e7 	bl	8002a0a <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10f      	bne.n	8001862 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b07      	cmp	r3, #7
 8001846:	d809      	bhi.n	800185c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001850:	f001 f8b3 	bl	80029ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001854:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <HAL_InitTick+0x74>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e007      	b.n	800186c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e004      	b.n	800186c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
 8001866:	e001      	b.n	800186c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000000c 	.word	0x2000000c
 800187c:	20000004 	.word	0x20000004
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	20000320 	.word	0x20000320

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000320 	.word	0x20000320

080018c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	609a      	str	r2, [r3, #8]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3360      	adds	r3, #96	@ 0x60
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <LL_ADC_SetOffset+0x44>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	4313      	orrs	r3, r2
 800195c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	03fff000 	.word	0x03fff000

08001974 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3360      	adds	r3, #96	@ 0x60
 8001982:	461a      	mov	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3360      	adds	r3, #96	@ 0x60
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	431a      	orrs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019ca:	bf00      	nop
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	615a      	str	r2, [r3, #20]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3330      	adds	r3, #48	@ 0x30
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 031f 	and.w	r3, r3, #31
 8001a26:	211f      	movs	r1, #31
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	0e9b      	lsrs	r3, r3, #26
 8001a34:	f003 011f 	and.w	r1, r3, #31
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	431a      	orrs	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a48:	bf00      	nop
 8001a4a:	371c      	adds	r7, #28
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3314      	adds	r3, #20
 8001a64:	461a      	mov	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	0e5b      	lsrs	r3, r3, #25
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	0d1b      	lsrs	r3, r3, #20
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2107      	movs	r1, #7
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	401a      	ands	r2, r3
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	0d1b      	lsrs	r3, r3, #20
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0318 	and.w	r3, r3, #24
 8001ace:	4908      	ldr	r1, [pc, #32]	@ (8001af0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ad0:	40d9      	lsrs	r1, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ada:	431a      	orrs	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	0007ffff 	.word	0x0007ffff

08001af4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6093      	str	r3, [r2, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b7c:	d101      	bne.n	8001b82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <LL_ADC_IsEnabled+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <LL_ADC_IsEnabled+0x1a>
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d101      	bne.n	8001bce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d101      	bne.n	8001bf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e12e      	b.n	8001e7c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d109      	bne.n	8001c40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fa45 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff67 	bl	8001b18 <LL_ADC_IsDeepPowerDownEnabled>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff4d 	bl	8001af4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff82 	bl	8001b68 <LL_ADC_IsInternalRegulatorEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ff66 	bl	8001b40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c74:	4b83      	ldr	r3, [pc, #524]	@ (8001e84 <HAL_ADC_Init+0x280>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	099b      	lsrs	r3, r3, #6
 8001c7a:	4a83      	ldr	r2, [pc, #524]	@ (8001e88 <HAL_ADC_Init+0x284>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	099b      	lsrs	r3, r3, #6
 8001c82:	3301      	adds	r3, #1
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c88:	e002      	b.n	8001c90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f9      	bne.n	8001c8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff ff64 	bl	8001b68 <LL_ADC_IsInternalRegulatorEnabled>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff75 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f040 80c7 	bne.w	8001e6a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 80c3 	bne.w	8001e6a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001cec:	f043 0202 	orr.w	r2, r3, #2
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff49 	bl	8001b90 <LL_ADC_IsEnabled>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d110      	bne.n	8001d26 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d04:	4861      	ldr	r0, [pc, #388]	@ (8001e8c <HAL_ADC_Init+0x288>)
 8001d06:	f7ff ff43 	bl	8001b90 <LL_ADC_IsEnabled>
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4860      	ldr	r0, [pc, #384]	@ (8001e90 <HAL_ADC_Init+0x28c>)
 8001d0e:	f7ff ff3f 	bl	8001b90 <LL_ADC_IsEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4323      	orrs	r3, r4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d105      	bne.n	8001d26 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	485c      	ldr	r0, [pc, #368]	@ (8001e94 <HAL_ADC_Init+0x290>)
 8001d22:	f7ff fdcf 	bl	80018c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7e5b      	ldrb	r3, [r3, #25]
 8001d2a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d30:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001d36:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001d3c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d106      	bne.n	8001d62 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	045b      	lsls	r3, r3, #17
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d6e:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	4b44      	ldr	r3, [pc, #272]	@ (8001e98 <HAL_ADC_Init+0x294>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	69b9      	ldr	r1, [r7, #24]
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff20 	bl	8001bdc <LL_ADC_INJ_IsConversionOngoing>
 8001d9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d140      	bne.n	8001e26 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d13d      	bne.n	8001e26 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e1b      	ldrb	r3, [r3, #24]
 8001db2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001db4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dbc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001dcc:	f023 0306 	bic.w	r3, r3, #6
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	69b9      	ldr	r1, [r7, #24]
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d118      	bne.n	8001e16 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e00:	4311      	orrs	r1, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e06:	430a      	orrs	r2, r1
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	611a      	str	r2, [r3, #16]
 8001e14:	e007      	b.n	8001e26 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10c      	bne.n	8001e48 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	f023 010f 	bic.w	r1, r3, #15
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	1e5a      	subs	r2, r3, #1
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e46:	e007      	b.n	8001e58 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 020f 	bic.w	r2, r2, #15
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f023 0303 	bic.w	r3, r3, #3
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e68:	e007      	b.n	8001e7a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	f043 0210 	orr.w	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3724      	adds	r7, #36	@ 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}
 8001e84:	20000004 	.word	0x20000004
 8001e88:	053e2d63 	.word	0x053e2d63
 8001e8c:	42028000 	.word	0x42028000
 8001e90:	42028100 	.word	0x42028100
 8001e94:	42028300 	.word	0x42028300
 8001e98:	fff0c007 	.word	0xfff0c007

08001e9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b0b7      	sub	sp, #220	@ 0xdc
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x22>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e3c1      	b.n	8002642 <HAL_ADC_ConfigChannel+0x7a6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe73 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 83a6 	bne.w	8002624 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f7ff fd89 	bl	80019fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fe61 	bl	8001bb6 <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fe6d 	bl	8001bdc <LL_ADC_INJ_IsConversionOngoing>
 8001f02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 81c1 	bne.w	8002292 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f040 81bc 	bne.w	8002292 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f22:	d10f      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7ff fd90 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fd4a 	bl	80019d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f42:	e00e      	b.n	8001f62 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f7ff fd7f 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fd3a 	bl	80019d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b04      	cmp	r3, #4
 8001f82:	d00a      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6919      	ldr	r1, [r3, #16]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f94:	f7ff fcca 	bl	800192c <LL_ADC_SetOffset>
 8001f98:	e17b      	b.n	8002292 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fce7 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x12a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fcdc 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	e01e      	b.n	8002004 <HAL_ADC_ConfigChannel+0x168>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fcd1 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e004      	b.n	8002002 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001ff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_ADC_ConfigChannel+0x180>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	e018      	b.n	800204e <HAL_ADC_ConfigChannel+0x1b2>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002038:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8002044:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fca0 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2101      	movs	r1, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fc84 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1f0>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2101      	movs	r1, #1
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fc79 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	e01e      	b.n	80020ca <HAL_ADC_ConfigChannel+0x22e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fc6e 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e004      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80020be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x246>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	e018      	b.n	8002114 <HAL_ADC_ConfigChannel+0x278>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80020f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80020fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80020fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e004      	b.n	8002114 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800210a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800210e:	fab3 f383 	clz	r3, r3
 8002112:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002114:	429a      	cmp	r2, r3
 8002116:	d106      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2101      	movs	r1, #1
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fc3d 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2102      	movs	r1, #2
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fc21 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002132:	4603      	mov	r3, r0
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x2b6>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2102      	movs	r1, #2
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fc16 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	0e9b      	lsrs	r3, r3, #26
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	e01e      	b.n	8002190 <HAL_ADC_ConfigChannel+0x2f4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2102      	movs	r1, #2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fc0b 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002178:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002180:	2320      	movs	r3, #32
 8002182:	e004      	b.n	800218e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002184:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x30c>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	e016      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x33a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80021c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e004      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80021cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d106      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2200      	movs	r2, #0
 80021e0:	2102      	movs	r1, #2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fbdc 	bl	80019a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2103      	movs	r1, #3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fbc0 	bl	8001974 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x378>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2103      	movs	r1, #3
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fbb5 	bl	8001974 <LL_ADC_GetOffsetChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	0e9b      	lsrs	r3, r3, #26
 800220e:	f003 021f 	and.w	r2, r3, #31
 8002212:	e017      	b.n	8002244 <HAL_ADC_ConfigChannel+0x3a8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2103      	movs	r1, #3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fbaa 	bl	8001974 <LL_ADC_GetOffsetChannel>
 8002220:	4603      	mov	r3, r0
 8002222:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800222c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800222e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 800223a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3c0>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	e011      	b.n	8002280 <HAL_ADC_ConfigChannel+0x3e4>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800226a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800226c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800226e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002274:	2320      	movs	r3, #32
 8002276:	e003      	b.n	8002280 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002280:	429a      	cmp	r2, r3
 8002282:	d106      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	2103      	movs	r1, #3
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fb87 	bl	80019a0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fc7a 	bl	8001b90 <LL_ADC_IsEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 81c9 	bne.w	8002636 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	461a      	mov	r2, r3
 80022b2:	f7ff fbfb 	bl	8001aac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4a8f      	ldr	r2, [pc, #572]	@ (80024f8 <HAL_ADC_ConfigChannel+0x65c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	f040 8131 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x44e>
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	0e9b      	lsrs	r3, r3, #26
 80022d8:	3301      	adds	r3, #1
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2b09      	cmp	r3, #9
 80022e0:	bf94      	ite	ls
 80022e2:	2301      	movls	r3, #1
 80022e4:	2300      	movhi	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	e019      	b.n	800231e <HAL_ADC_ConfigChannel+0x482>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80022f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022fa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80022fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2b09      	cmp	r3, #9
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800231e:	2b00      	cmp	r3, #0
 8002320:	d079      	beq.n	8002416 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_ADC_ConfigChannel+0x4a2>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	3301      	adds	r3, #1
 8002336:	069b      	lsls	r3, r3, #26
 8002338:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800233c:	e015      	b.n	800236a <HAL_ADC_ConfigChannel+0x4ce>
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002346:	fa93 f3a3 	rbit	r3, r3
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800234c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800234e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002356:	2320      	movs	r3, #32
 8002358:	e003      	b.n	8002362 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800235a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800235c:	fab3 f383 	clz	r3, r3
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3301      	adds	r3, #1
 8002364:	069b      	lsls	r3, r3, #26
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_ADC_ConfigChannel+0x4ee>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	0e9b      	lsrs	r3, r3, #26
 800237c:	3301      	adds	r3, #1
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	e017      	b.n	80023ba <HAL_ADC_ConfigChannel+0x51e>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800239a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800239c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80023a2:	2320      	movs	r3, #32
 80023a4:	e003      	b.n	80023ae <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80023a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	ea42 0103 	orr.w	r1, r2, r3
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x544>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e9b      	lsrs	r3, r3, #26
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 021f 	and.w	r2, r3, #31
 80023d6:	4613      	mov	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	051b      	lsls	r3, r3, #20
 80023de:	e018      	b.n	8002412 <HAL_ADC_ConfigChannel+0x576>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80023ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80023f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f003 021f 	and.w	r2, r3, #31
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002412:	430b      	orrs	r3, r1
 8002414:	e081      	b.n	800251a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x596>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	3301      	adds	r3, #1
 800242a:	069b      	lsls	r3, r3, #26
 800242c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002430:	e015      	b.n	800245e <HAL_ADC_ConfigChannel+0x5c2>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800244a:	2320      	movs	r3, #32
 800244c:	e003      	b.n	8002456 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	069b      	lsls	r3, r3, #26
 800245a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <HAL_ADC_ConfigChannel+0x5e2>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0e9b      	lsrs	r3, r3, #26
 8002470:	3301      	adds	r3, #1
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	2101      	movs	r1, #1
 8002478:	fa01 f303 	lsl.w	r3, r1, r3
 800247c:	e017      	b.n	80024ae <HAL_ADC_ConfigChannel+0x612>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	61fb      	str	r3, [r7, #28]
  return result;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e003      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	3301      	adds	r3, #1
 80024a4:	f003 031f 	and.w	r3, r3, #31
 80024a8:	2101      	movs	r1, #1
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	ea42 0103 	orr.w	r1, r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_ADC_ConfigChannel+0x63e>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	0e9b      	lsrs	r3, r3, #26
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	051b      	lsls	r3, r3, #20
 80024d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024d8:	e01e      	b.n	8002518 <HAL_ADC_ConfigChannel+0x67c>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	613b      	str	r3, [r7, #16]
  return result;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80024f2:	2320      	movs	r3, #32
 80024f4:	e006      	b.n	8002504 <HAL_ADC_ConfigChannel+0x668>
 80024f6:	bf00      	nop
 80024f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	fab3 f383 	clz	r3, r3
 8002502:	b2db      	uxtb	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	3b1e      	subs	r3, #30
 8002512:	051b      	lsls	r3, r3, #20
 8002514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002518:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251e:	4619      	mov	r1, r3
 8002520:	f7ff fa98 	bl	8001a54 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b48      	ldr	r3, [pc, #288]	@ (800264c <HAL_ADC_ConfigChannel+0x7b0>)
 800252a:	4013      	ands	r3, r2
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 8082 	beq.w	8002636 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002532:	4847      	ldr	r0, [pc, #284]	@ (8002650 <HAL_ADC_ConfigChannel+0x7b4>)
 8002534:	f7ff f9ec 	bl	8001910 <LL_ADC_GetCommonPathInternalCh>
 8002538:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800253c:	4845      	ldr	r0, [pc, #276]	@ (8002654 <HAL_ADC_ConfigChannel+0x7b8>)
 800253e:	f7ff fb27 	bl	8001b90 <LL_ADC_IsEnabled>
 8002542:	4604      	mov	r4, r0
 8002544:	4844      	ldr	r0, [pc, #272]	@ (8002658 <HAL_ADC_ConfigChannel+0x7bc>)
 8002546:	f7ff fb23 	bl	8001b90 <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	4323      	orrs	r3, r4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d15e      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a41      	ldr	r2, [pc, #260]	@ (800265c <HAL_ADC_ConfigChannel+0x7c0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d127      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800255c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002560:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d121      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a39      	ldr	r2, [pc, #228]	@ (8002654 <HAL_ADC_ConfigChannel+0x7b8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d161      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002576:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800257a:	4619      	mov	r1, r3
 800257c:	4834      	ldr	r0, [pc, #208]	@ (8002650 <HAL_ADC_ConfigChannel+0x7b4>)
 800257e:	f7ff f9b4 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002582:	4b37      	ldr	r3, [pc, #220]	@ (8002660 <HAL_ADC_ConfigChannel+0x7c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	4a36      	ldr	r2, [pc, #216]	@ (8002664 <HAL_ADC_ConfigChannel+0x7c8>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	099b      	lsrs	r3, r3, #6
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	4613      	mov	r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800259a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800259c:	e002      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025aa:	e044      	b.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002668 <HAL_ADC_ConfigChannel+0x7cc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d113      	bne.n	80025de <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10d      	bne.n	80025de <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <HAL_ADC_ConfigChannel+0x7b8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d134      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025d4:	4619      	mov	r1, r3
 80025d6:	481e      	ldr	r0, [pc, #120]	@ (8002650 <HAL_ADC_ConfigChannel+0x7b4>)
 80025d8:	f7ff f987 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025dc:	e02b      	b.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a22      	ldr	r2, [pc, #136]	@ (800266c <HAL_ADC_ConfigChannel+0x7d0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d126      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d120      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a16      	ldr	r2, [pc, #88]	@ (8002654 <HAL_ADC_ConfigChannel+0x7b8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d11b      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002602:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002606:	4619      	mov	r1, r3
 8002608:	4811      	ldr	r0, [pc, #68]	@ (8002650 <HAL_ADC_ConfigChannel+0x7b4>)
 800260a:	f7ff f96e 	bl	80018ea <LL_ADC_SetCommonPathInternalCh>
 800260e:	e012      	b.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	659a      	str	r2, [r3, #88]	@ 0x58

          tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002622:	e008      	b.n	8002636 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800263e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002642:	4618      	mov	r0, r3
 8002644:	37dc      	adds	r7, #220	@ 0xdc
 8002646:	46bd      	mov	sp, r7
 8002648:	bd90      	pop	{r4, r7, pc}
 800264a:	bf00      	nop
 800264c:	80080000 	.word	0x80080000
 8002650:	42028300 	.word	0x42028300
 8002654:	42028000 	.word	0x42028000
 8002658:	42028100 	.word	0x42028100
 800265c:	c7520000 	.word	0xc7520000
 8002660:	20000004 	.word	0x20000004
 8002664:	053e2d63 	.word	0x053e2d63
 8002668:	cb840000 	.word	0xcb840000
 800266c:	80000001 	.word	0x80000001

08002670 <LL_ADC_IsEnabled>:
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <LL_ADC_IsEnabled+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_IsEnabled+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_REG_IsConversionOngoing>:
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d101      	bne.n	80026ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b0a1      	sub	sp, #132	@ 0x84
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e089      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026e2:	2300      	movs	r3, #0
 80026e4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026e6:	2300      	movs	r3, #0
 80026e8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a42      	ldr	r2, [pc, #264]	@ (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d102      	bne.n	80026fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026f4:	4b41      	ldr	r3, [pc, #260]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e001      	b.n	80026fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e068      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ffb9 	bl	8002696 <LL_ADC_REG_IsConversionOngoing>
 8002724:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ffb3 	bl	8002696 <LL_ADC_REG_IsConversionOngoing>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d14a      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002738:	2b00      	cmp	r3, #0
 800273a:	d147      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800273c:	4b30      	ldr	r3, [pc, #192]	@ (8002800 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800273e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d027      	beq.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002748:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800275a:	035b      	lsls	r3, r3, #13
 800275c:	430b      	orrs	r3, r1
 800275e:	431a      	orrs	r2, r3
 8002760:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002762:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002764:	4824      	ldr	r0, [pc, #144]	@ (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002766:	f7ff ff83 	bl	8002670 <LL_ADC_IsEnabled>
 800276a:	4604      	mov	r4, r0
 800276c:	4823      	ldr	r0, [pc, #140]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800276e:	f7ff ff7f 	bl	8002670 <LL_ADC_IsEnabled>
 8002772:	4603      	mov	r3, r0
 8002774:	4323      	orrs	r3, r4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d132      	bne.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800277a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002782:	f023 030f 	bic.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	6811      	ldr	r1, [r2, #0]
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	6892      	ldr	r2, [r2, #8]
 800278e:	430a      	orrs	r2, r1
 8002790:	431a      	orrs	r2, r3
 8002792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002794:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002796:	e023      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027a4:	4814      	ldr	r0, [pc, #80]	@ (80027f8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80027a6:	f7ff ff63 	bl	8002670 <LL_ADC_IsEnabled>
 80027aa:	4604      	mov	r4, r0
 80027ac:	4813      	ldr	r0, [pc, #76]	@ (80027fc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80027ae:	f7ff ff5f 	bl	8002670 <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4323      	orrs	r3, r4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d112      	bne.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80027ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027c2:	f023 030f 	bic.w	r3, r3, #15
 80027c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80027c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027ca:	e009      	b.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027de:	e000      	b.n	80027e2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80027ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3784      	adds	r7, #132	@ 0x84
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	42028000 	.word	0x42028000
 80027fc:	42028100 	.word	0x42028100
 8002800:	42028300 	.word	0x42028300

08002804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	@ (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	2b00      	cmp	r3, #0
 8002878:	db0b      	blt.n	8002892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4907      	ldr	r1, [pc, #28]	@ (80028a0 <__NVIC_EnableIRQ+0x38>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	2001      	movs	r0, #1
 800288a:	fa00 f202 	lsl.w	r2, r0, r2
 800288e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0152      	lsls	r2, r2, #5
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	@ (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0152      	lsls	r2, r2, #5
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b03      	cmp	r3, #3
 8002914:	bf28      	it	cs
 8002916:	2303      	movcs	r3, #3
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3303      	adds	r3, #3
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b04      	subs	r3, #4
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	@ 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3b01      	subs	r3, #1
 800296c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002970:	d301      	bcc.n	8002976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002972:	2301      	movs	r3, #1
 8002974:	e00f      	b.n	8002996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <SysTick_Config+0x40>)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3b01      	subs	r3, #1
 800297c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297e:	2107      	movs	r1, #7
 8002980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002984:	f7ff ff8e 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <SysTick_Config+0x40>)
 800298a:	2200      	movs	r2, #0
 800298c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <SysTick_Config+0x40>)
 8002990:	2207      	movs	r2, #7
 8002992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	e000e010 	.word	0xe000e010

080029a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff29 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b086      	sub	sp, #24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff40 	bl	800284c <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff90 	bl	80028f8 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5f 	bl	80028a4 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff33 	bl	8002868 <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffa4 	bl	8002960 <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e08d      	b.n	8002b52 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b47      	ldr	r3, [pc, #284]	@ (8002b5c <HAL_DMA_Init+0x138>)
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d80f      	bhi.n	8002a62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	4b45      	ldr	r3, [pc, #276]	@ (8002b60 <HAL_DMA_Init+0x13c>)
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a45      	ldr	r2, [pc, #276]	@ (8002b64 <HAL_DMA_Init+0x140>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	009a      	lsls	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	@ (8002b68 <HAL_DMA_Init+0x144>)
 8002a5e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002a60:	e00e      	b.n	8002a80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b40      	ldr	r3, [pc, #256]	@ (8002b6c <HAL_DMA_Init+0x148>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a3d      	ldr	r2, [pc, #244]	@ (8002b64 <HAL_DMA_Init+0x140>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8002b70 <HAL_DMA_Init+0x14c>)
 8002a7e:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8002a96:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8002a9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f97e 	bl	8002dd4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002afc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_DMA_Init+0x104>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d80c      	bhi.n	8002b28 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f99e 	bl	8002e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e008      	b.n	8002b3a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40020407 	.word	0x40020407
 8002b60:	bffdfff8 	.word	0xbffdfff8
 8002b64:	cccccccd 	.word	0xcccccccd
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	bffdfbf8 	.word	0xbffdfbf8
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b90:	f003 031c 	and.w	r3, r3, #28
 8002b94:	2204      	movs	r2, #4
 8002b96:	409a      	lsls	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d053      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd4>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d04e      	beq.n	8002c48 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d024      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	f003 021c 	and.w	r2, r3, #28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bca:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 80c0 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002bec:	e0ba      	b.n	8002d64 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80b6 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c00:	e0b0      	b.n	8002d64 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d107      	bne.n	8002c20 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0204 	bic.w	r2, r2, #4
 8002c1e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c24:	f003 021c 	and.w	r2, r3, #28
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c32:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8093 	beq.w	8002d64 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c46:	e08d      	b.n	8002d64 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c4c:	f003 031c 	and.w	r3, r3, #28
 8002c50:	2202      	movs	r2, #2
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d04e      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x186>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d049      	beq.n	8002cfa <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d018      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d108      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d06e      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002c92:	e069      	b.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d065      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ca4:	e060      	b.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 020a 	bic.w	r2, r2, #10
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd0:	f003 021c 	and.w	r2, r3, #28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd8:	2102      	movs	r1, #2
 8002cda:	fa01 f202 	lsl.w	r2, r1, r2
 8002cde:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if(hdma->XferCpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d03b      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002cf8:	e036      	b.n	8002d68 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	f003 031c 	and.w	r3, r3, #28
 8002d02:	2208      	movs	r2, #8
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d02e      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x1f8>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d029      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 020e 	bic.w	r2, r2, #14
 8002d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2c:	f003 021c 	and.w	r2, r3, #28
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	2101      	movs	r1, #1
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d62:	e002      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d64:	bf00      	nop
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002d68:	bf00      	nop
  return;
 8002d6a:	bf00      	nop
 8002d6c:	bf00      	nop
}
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d103      	bne.n	8002d90 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	72fb      	strb	r3, [r7, #11]
    return status;
 8002d8c:	7afb      	ldrb	r3, [r7, #11]
 8002d8e:	e01b      	b.n	8002dc8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e003      	b.n	8002dbe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	601a      	str	r2, [r3, #0]

  return status;
 8002dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d80a      	bhi.n	8002dfe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002df4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002dfc:	e007      	b.n	8002e0e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	009a      	lsls	r2, r3, #2
 8002e06:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e08:	4413      	add	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6513      	str	r3, [r2, #80]	@ 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3b08      	subs	r3, #8
 8002e16:	4a0c      	ldr	r2, [pc, #48]	@ (8002e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e24:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40020407 	.word	0x40020407
 8002e44:	40020820 	.word	0x40020820
 8002e48:	cccccccd 	.word	0xcccccccd
 8002e4c:	40020880 	.word	0x40020880

08002e50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002e64:	4413      	add	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a08      	ldr	r2, [pc, #32]	@ (8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002e72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	665a      	str	r2, [r3, #100]	@ 0x64
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	1000823f 	.word	0x1000823f
 8002e94:	40020940 	.word	0x40020940

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ea6:	e158      	b.n	800315a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2101      	movs	r1, #1
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 814a 	beq.w	8003154 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d005      	beq.n	8002ed8 <HAL_GPIO_Init+0x40>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d130      	bne.n	8002f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4013      	ands	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f0e:	2201      	movs	r2, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	f003 0201 	and.w	r2, r3, #1
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d017      	beq.n	8002f76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d123      	bne.n	8002fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	08da      	lsrs	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3208      	adds	r2, #8
 8002f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	08da      	lsrs	r2, r3, #3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3208      	adds	r2, #8
 8002fc4:	6939      	ldr	r1, [r7, #16]
 8002fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0203 	and.w	r2, r3, #3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 80a4 	beq.w	8003154 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800300c:	4a5a      	ldr	r2, [pc, #360]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3318      	adds	r3, #24
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a52      	ldr	r2, [pc, #328]	@ (800317c <HAL_GPIO_Init+0x2e4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d025      	beq.n	8003084 <HAL_GPIO_Init+0x1ec>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a51      	ldr	r2, [pc, #324]	@ (8003180 <HAL_GPIO_Init+0x2e8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01f      	beq.n	8003080 <HAL_GPIO_Init+0x1e8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a50      	ldr	r2, [pc, #320]	@ (8003184 <HAL_GPIO_Init+0x2ec>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d019      	beq.n	800307c <HAL_GPIO_Init+0x1e4>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a4f      	ldr	r2, [pc, #316]	@ (8003188 <HAL_GPIO_Init+0x2f0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <HAL_GPIO_Init+0x1e0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a4e      	ldr	r2, [pc, #312]	@ (800318c <HAL_GPIO_Init+0x2f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00d      	beq.n	8003074 <HAL_GPIO_Init+0x1dc>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a4d      	ldr	r2, [pc, #308]	@ (8003190 <HAL_GPIO_Init+0x2f8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d007      	beq.n	8003070 <HAL_GPIO_Init+0x1d8>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a4c      	ldr	r2, [pc, #304]	@ (8003194 <HAL_GPIO_Init+0x2fc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d101      	bne.n	800306c <HAL_GPIO_Init+0x1d4>
 8003068:	2306      	movs	r3, #6
 800306a:	e00c      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 800306c:	2307      	movs	r3, #7
 800306e:	e00a      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003070:	2305      	movs	r3, #5
 8003072:	e008      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003074:	2304      	movs	r3, #4
 8003076:	e006      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003078:	2303      	movs	r3, #3
 800307a:	e004      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 800307c:	2302      	movs	r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003084:	2300      	movs	r3, #0
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	f002 0203 	and.w	r2, r2, #3
 800308c:	00d2      	lsls	r2, r2, #3
 800308e:	4093      	lsls	r3, r2
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003096:	4938      	ldr	r1, [pc, #224]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3318      	adds	r3, #24
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a4:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030f2:	4a21      	ldr	r2, [pc, #132]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800311e:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8003126:	4b14      	ldr	r3, [pc, #80]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 8003128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800314c:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <HAL_GPIO_Init+0x2e0>)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f ae9f 	bne.w	8002ea8 <HAL_GPIO_Init+0x10>
  }
}
 800316a:	bf00      	nop
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	4002f400 	.word	0x4002f400
 800317c:	42020000 	.word	0x42020000
 8003180:	42020400 	.word	0x42020400
 8003184:	42020800 	.word	0x42020800
 8003188:	42020c00 	.word	0x42020c00
 800318c:	42021000 	.word	0x42021000
 8003190:	42021400 	.word	0x42021400
 8003194:	42021800 	.word	0x42021800

08003198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	807b      	strh	r3, [r7, #2]
 80031a4:	4613      	mov	r3, r2
 80031a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031a8:	787b      	ldrb	r3, [r7, #1]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b4:	e002      	b.n	80031bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80031d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	4013      	ands	r3, r2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d006      	beq.n	80031ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80031de:	4a0c      	ldr	r2, [pc, #48]	@ (8003210 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f814 	bl	8003214 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80031ec:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d006      	beq.n	8003206 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031f8:	4a05      	ldr	r2, [pc, #20]	@ (8003210 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f812 	bl	800322a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	4002f400 	.word	0x4002f400

08003214 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	e007      	b.n	800326e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800325e:	4b07      	ldr	r3, [pc, #28]	@ (800327c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0204 	bic.w	r2, r3, #4
 8003266:	4905      	ldr	r1, [pc, #20]	@ (800327c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800326e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40030400 	.word	0x40030400

08003280 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_ICACHE_Enable+0x1c>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a04      	ldr	r2, [pc, #16]	@ (800329c <HAL_ICACHE_Enable+0x1c>)
 800328a:	f043 0301 	orr.w	r3, r3, #1
 800328e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40030400 	.word	0x40030400

080032a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80032a4:	4b04      	ldr	r3, [pc, #16]	@ (80032b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40007000 	.word	0x40007000

080032bc <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80032c4:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032cc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80032ce:	f000 f861 	bl	8003394 <HAL_PWREx_SMPS_GetEffectiveMode>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d8:	d101      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e03e      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80032de:	4b21      	ldr	r3, [pc, #132]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ea:	d101      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e035      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d101      	bne.n	80032fc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	e02f      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80032fc:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003304:	4917      	ldr	r1, [pc, #92]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 800330c:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	4a16      	ldr	r2, [pc, #88]	@ (800336c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003314:	fba2 2303 	umull	r2, r3, r2, r3
 8003318:	09db      	lsrs	r3, r3, #7
 800331a:	2232      	movs	r2, #50	@ 0x32
 800331c:	fb02 f303 	mul.w	r3, r2, r3
 8003320:	4a13      	ldr	r2, [pc, #76]	@ (8003370 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	08db      	lsrs	r3, r3, #3
 8003328:	3301      	adds	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332c:	e002      	b.n	8003334 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b01      	subs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003334:	4b0b      	ldr	r3, [pc, #44]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003340:	d102      	bne.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f2      	bne.n	800332e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003354:	d101      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e000      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40007000 	.word	0x40007000
 8003368:	20000004 	.word	0x20000004
 800336c:	0a7c5ac5 	.word	0x0a7c5ac5
 8003370:	cccccccd 	.word	0xcccccccd

08003374 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a04      	ldr	r2, [pc, #16]	@ (8003390 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800337e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003382:	6093      	str	r3, [r2, #8]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40007000 	.word	0x40007000

08003394 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80033aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033ae:	607b      	str	r3, [r7, #4]
 80033b0:	e00a      	b.n	80033c8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80033bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	e001      	b.n	80033c8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80033c4:	2300      	movs	r3, #0
 80033c6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80033c8:	687b      	ldr	r3, [r7, #4]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40007000 	.word	0x40007000

080033dc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f000 bcc2 	b.w	8003d74 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f0:	4b99      	ldr	r3, [pc, #612]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fa:	4b97      	ldr	r3, [pc, #604]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 80e9 	beq.w	80035e4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <HAL_RCC_OscConfig+0x4a>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	f040 8083 	bne.w	8003526 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d17f      	bne.n	8003526 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003426:	4b8c      	ldr	r3, [pc, #560]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_RCC_OscConfig+0x64>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f000 bc9a 	b.w	8003d74 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003444:	4b84      	ldr	r3, [pc, #528]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d004      	beq.n	800345a <HAL_RCC_OscConfig+0x7e>
 8003450:	4b81      	ldr	r3, [pc, #516]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003458:	e005      	b.n	8003466 <HAL_RCC_OscConfig+0x8a>
 800345a:	4b7f      	ldr	r3, [pc, #508]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003466:	4293      	cmp	r3, r2
 8003468:	d224      	bcs.n	80034b4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fe9a 	bl	80041a8 <RCC_SetFlashLatencyFromMSIRange>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f000 bc7a 	b.w	8003d74 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003480:	4b75      	ldr	r3, [pc, #468]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a74      	ldr	r2, [pc, #464]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b72      	ldr	r3, [pc, #456]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	496f      	ldr	r1, [pc, #444]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349e:	4b6e      	ldr	r3, [pc, #440]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	496a      	ldr	r1, [pc, #424]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
 80034b2:	e026      	b.n	8003502 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034b4:	4b68      	ldr	r3, [pc, #416]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a67      	ldr	r2, [pc, #412]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b65      	ldr	r3, [pc, #404]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	4962      	ldr	r1, [pc, #392]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d2:	4b61      	ldr	r3, [pc, #388]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	495d      	ldr	r1, [pc, #372]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fe59 	bl	80041a8 <RCC_SetFlashLatencyFromMSIRange>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f000 bc39 	b.w	8003d74 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003502:	f000 fe15 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8003506:	4603      	mov	r3, r0
 8003508:	4a54      	ldr	r2, [pc, #336]	@ (800365c <HAL_RCC_OscConfig+0x280>)
 800350a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800350c:	4b54      	ldr	r3, [pc, #336]	@ (8003660 <HAL_RCC_OscConfig+0x284>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe f97b 	bl	800180c <HAL_InitTick>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d060      	beq.n	80035e2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	f000 bc27 	b.w	8003d74 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d039      	beq.n	80035a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800352e:	4b4a      	ldr	r3, [pc, #296]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a49      	ldr	r2, [pc, #292]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800353a:	f7fe f9b7 	bl	80018ac <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003540:	e00f      	b.n	8003562 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003542:	f7fe f9b3 	bl	80018ac <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d908      	bls.n	8003562 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003550:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	f000 bc09 	b.w	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003562:	4b3d      	ldr	r3, [pc, #244]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0e9      	beq.n	8003542 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356e:	4b3a      	ldr	r3, [pc, #232]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a39      	ldr	r2, [pc, #228]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003574:	f043 0308 	orr.w	r3, r3, #8
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b37      	ldr	r3, [pc, #220]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	4934      	ldr	r1, [pc, #208]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800358c:	4b32      	ldr	r3, [pc, #200]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	492f      	ldr	r1, [pc, #188]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
 80035a0:	e020      	b.n	80035e4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035ae:	f7fe f97d 	bl	80018ac <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b4:	e00e      	b.n	80035d4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b6:	f7fe f979 	bl	80018ac <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d907      	bls.n	80035d4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c4:	4b24      	ldr	r3, [pc, #144]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e3cf      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035d4:	4b20      	ldr	r3, [pc, #128]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1ea      	bne.n	80035b6 <HAL_RCC_OscConfig+0x1da>
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d07e      	beq.n	80036ee <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x226>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b0c      	cmp	r3, #12
 80035fa:	d10e      	bne.n	800361a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b03      	cmp	r3, #3
 8003600:	d10b      	bne.n	800361a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003602:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d06e      	beq.n	80036ec <HAL_RCC_OscConfig+0x310>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d16a      	bne.n	80036ec <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e3ac      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003622:	d106      	bne.n	8003632 <HAL_RCC_OscConfig+0x256>
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a0b      	ldr	r2, [pc, #44]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	e024      	b.n	800367c <HAL_RCC_OscConfig+0x2a0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800363a:	d113      	bne.n	8003664 <HAL_RCC_OscConfig+0x288>
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 8003642:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	4b03      	ldr	r3, [pc, #12]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a02      	ldr	r2, [pc, #8]	@ (8003658 <HAL_RCC_OscConfig+0x27c>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e012      	b.n	800367c <HAL_RCC_OscConfig+0x2a0>
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000
 800365c:	20000004 	.word	0x20000004
 8003660:	20000008 	.word	0x20000008
 8003664:	4b8b      	ldr	r3, [pc, #556]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a8a      	ldr	r2, [pc, #552]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b88      	ldr	r3, [pc, #544]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a87      	ldr	r2, [pc, #540]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800367a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d019      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe f912 	bl	80018ac <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368a:	e00e      	b.n	80036aa <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe f90e 	bl	80018ac <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d907      	bls.n	80036aa <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800369a:	4b7e      	ldr	r3, [pc, #504]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e364      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0ea      	beq.n	800368c <HAL_RCC_OscConfig+0x2b0>
 80036b6:	e01a      	b.n	80036ee <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fe f8f8 	bl	80018ac <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036be:	e00e      	b.n	80036de <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fe f8f4 	bl	80018ac <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	@ 0x64
 80036cc:	d907      	bls.n	80036de <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ce:	4b71      	ldr	r3, [pc, #452]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e34a      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036de:	4b6d      	ldr	r3, [pc, #436]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1ea      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2e4>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d06c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d005      	beq.n	800370c <HAL_RCC_OscConfig+0x330>
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d119      	bne.n	800373a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d116      	bne.n	800373a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370c:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_OscConfig+0x348>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e327      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4b5b      	ldr	r3, [pc, #364]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	4958      	ldr	r1, [pc, #352]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003738:	e04c      	b.n	80037d4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d029      	beq.n	8003796 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003742:	4b54      	ldr	r3, [pc, #336]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a53      	ldr	r2, [pc, #332]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374e:	f7fe f8ad 	bl	80018ac <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003754:	e00e      	b.n	8003774 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7fe f8a9 	bl	80018ac <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d907      	bls.n	8003774 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003764:	4b4b      	ldr	r3, [pc, #300]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e2ff      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003774:	4b47      	ldr	r3, [pc, #284]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ea      	beq.n	8003756 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b44      	ldr	r3, [pc, #272]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	4941      	ldr	r1, [pc, #260]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	e01e      	b.n	80037d4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b3f      	ldr	r3, [pc, #252]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3e      	ldr	r2, [pc, #248]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe f883 	bl	80018ac <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a8:	e00e      	b.n	80037c8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037aa:	f7fe f87f 	bl	80018ac <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d907      	bls.n	80037c8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b8:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e2d5      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c8:	4b32      	ldr	r3, [pc, #200]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ea      	bne.n	80037aa <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d062      	beq.n	80038a6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d038      	beq.n	800385a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d108      	bne.n	8003802 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80037f0:	4b28      	ldr	r3, [pc, #160]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f6:	4a27      	ldr	r2, [pc, #156]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f023 0310 	bic.w	r3, r3, #16
 80037fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003800:	e007      	b.n	8003812 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003808:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800380a:	f043 0310 	orr.w	r3, r3, #16
 800380e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b20      	ldr	r3, [pc, #128]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003818:	4a1e      	ldr	r2, [pc, #120]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fe f843 	bl	80018ac <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	e00f      	b.n	800384a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7fe f83f 	bl	80018ac <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b07      	cmp	r3, #7
 8003836:	d908      	bls.n	800384a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003838:	4b16      	ldr	r3, [pc, #88]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800383a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e294      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0e8      	beq.n	800382a <HAL_RCC_OscConfig+0x44e>
 8003858:	e025      	b.n	80038a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b0e      	ldr	r3, [pc, #56]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003860:	4a0c      	ldr	r2, [pc, #48]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe f81f 	bl	80018ac <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	e012      	b.n	8003898 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe f81b 	bl	80018ac <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b07      	cmp	r3, #7
 800387e:	d90b      	bls.n	8003898 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e270      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003898:	4ba8      	ldr	r3, [pc, #672]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1e5      	bne.n	8003872 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 812d 	beq.w	8003b0e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b4:	2300      	movs	r3, #0
 80038b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038b8:	4ba0      	ldr	r3, [pc, #640]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c4:	4b9d      	ldr	r3, [pc, #628]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	4a9c      	ldr	r2, [pc, #624]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80038ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038dc:	2301      	movs	r3, #1
 80038de:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e0:	4b97      	ldr	r3, [pc, #604]	@ (8003b40 <HAL_RCC_OscConfig+0x764>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11e      	bne.n	800392a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ec:	4b94      	ldr	r3, [pc, #592]	@ (8003b40 <HAL_RCC_OscConfig+0x764>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a93      	ldr	r2, [pc, #588]	@ (8003b40 <HAL_RCC_OscConfig+0x764>)
 80038f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f8:	f7fd ffd8 	bl	80018ac <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	e00e      	b.n	800391e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7fd ffd4 	bl	80018ac <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d907      	bls.n	800391e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800390e:	4b8c      	ldr	r3, [pc, #560]	@ (8003b40 <HAL_RCC_OscConfig+0x764>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e22a      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800391e:	4b88      	ldr	r3, [pc, #544]	@ (8003b40 <HAL_RCC_OscConfig+0x764>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0ea      	beq.n	8003900 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01f      	beq.n	8003976 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d010      	beq.n	8003964 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003942:	4b7e      	ldr	r3, [pc, #504]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003948:	4a7c      	ldr	r2, [pc, #496]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003952:	4b7a      	ldr	r3, [pc, #488]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003958:	4a78      	ldr	r2, [pc, #480]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003962:	e018      	b.n	8003996 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003964:	4b75      	ldr	r3, [pc, #468]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800396a:	4a74      	ldr	r2, [pc, #464]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003974:	e00f      	b.n	8003996 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003976:	4b71      	ldr	r3, [pc, #452]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397c:	4a6f      	ldr	r2, [pc, #444]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003986:	4b6d      	ldr	r3, [pc, #436]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398c:	4a6b      	ldr	r2, [pc, #428]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 800398e:	f023 0304 	bic.w	r3, r3, #4
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d068      	beq.n	8003a70 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399e:	f7fd ff85 	bl	80018ac <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a4:	e011      	b.n	80039ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fd ff81 	bl	80018ac <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d908      	bls.n	80039ca <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b8:	4b60      	ldr	r3, [pc, #384]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e1d4      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ca:	4b5c      	ldr	r3, [pc, #368]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0e6      	beq.n	80039a6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d022      	beq.n	8003a2a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039e4:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ea:	4a54      	ldr	r2, [pc, #336]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 80039ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80039f4:	e011      	b.n	8003a1a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fd ff59 	bl	80018ac <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d908      	bls.n	8003a1a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a08:	4b4c      	ldr	r3, [pc, #304]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1ac      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a1a:	4b48      	ldr	r3, [pc, #288]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0e6      	beq.n	80039f6 <HAL_RCC_OscConfig+0x61a>
 8003a28:	e068      	b.n	8003afc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a2a:	4b44      	ldr	r3, [pc, #272]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	4a42      	ldr	r2, [pc, #264]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a3a:	e011      	b.n	8003a60 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fd ff36 	bl	80018ac <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d908      	bls.n	8003a60 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e189      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a60:	4b36      	ldr	r3, [pc, #216]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <HAL_RCC_OscConfig+0x660>
 8003a6e:	e045      	b.n	8003afc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a70:	f7fd ff1c 	bl	80018ac <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a76:	e011      	b.n	8003a9c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fd ff18 	bl	80018ac <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d908      	bls.n	8003a9c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e16b      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a9c:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e6      	bne.n	8003a78 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003aaa:	4b24      	ldr	r3, [pc, #144]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d021      	beq.n	8003afc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ab8:	4b20      	ldr	r3, [pc, #128]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a1f      	ldr	r2, [pc, #124]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ac8:	e011      	b.n	8003aee <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fd feef 	bl	80018ac <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d908      	bls.n	8003aee <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003adc:	4b17      	ldr	r3, [pc, #92]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e142      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003aee:	4b13      	ldr	r3, [pc, #76]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afc:	7ffb      	ldrb	r3, [r7, #31]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d105      	bne.n	8003b0e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b0e      	ldr	r3, [pc, #56]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	4a0d      	ldr	r2, [pc, #52]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d04f      	beq.n	8003bba <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d028      	beq.n	8003b74 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b22:	4b06      	ldr	r3, [pc, #24]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b28:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <HAL_RCC_OscConfig+0x760>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd febb 	bl	80018ac <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b38:	e014      	b.n	8003b64 <HAL_RCC_OscConfig+0x788>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b44:	f7fd feb2 	bl	80018ac <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d908      	bls.n	8003b64 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b52:	4b8a      	ldr	r3, [pc, #552]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e107      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b64:	4b85      	ldr	r3, [pc, #532]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0e8      	beq.n	8003b44 <HAL_RCC_OscConfig+0x768>
 8003b72:	e022      	b.n	8003bba <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b74:	4b81      	ldr	r3, [pc, #516]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b7a:	4a80      	ldr	r2, [pc, #512]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fd fe92 	bl	80018ac <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b8a:	e00f      	b.n	8003bac <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b8c:	f7fd fe8e 	bl	80018ac <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d908      	bls.n	8003bac <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b9a:	4b78      	ldr	r3, [pc, #480]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0e3      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bac:	4b73      	ldr	r3, [pc, #460]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e8      	bne.n	8003b8c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80d7 	beq.w	8003d72 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc4:	4b6d      	ldr	r3, [pc, #436]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b0c      	cmp	r3, #12
 8003bce:	f000 8091 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d166      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b68      	ldr	r3, [pc, #416]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a67      	ldr	r2, [pc, #412]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003be0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be6:	f7fd fe61 	bl	80018ac <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bec:	e00e      	b.n	8003c0c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fd fe5d 	bl	80018ac <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d907      	bls.n	8003c0c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfc:	4b5f      	ldr	r3, [pc, #380]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e0b3      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ea      	bne.n	8003bee <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c18:	4b58      	ldr	r3, [pc, #352]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c1a:	68da      	ldr	r2, [r3, #12]
 8003c1c:	4b58      	ldr	r3, [pc, #352]	@ (8003d80 <HAL_RCC_OscConfig+0x9a4>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0112      	lsls	r2, r2, #4
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c32:	0212      	lsls	r2, r2, #8
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c3a:	0852      	lsrs	r2, r2, #1
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	0552      	lsls	r2, r2, #21
 8003c40:	4311      	orrs	r1, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c46:	0852      	lsrs	r2, r2, #1
 8003c48:	3a01      	subs	r2, #1
 8003c4a:	0652      	lsls	r2, r2, #25
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c52:	06d2      	lsls	r2, r2, #27
 8003c54:	430a      	orrs	r2, r1
 8003c56:	4949      	ldr	r1, [pc, #292]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c5c:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a46      	ldr	r2, [pc, #280]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c68:	4b44      	ldr	r3, [pc, #272]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	4a43      	ldr	r2, [pc, #268]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fe1a 	bl	80018ac <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7a:	e00e      	b.n	8003c9a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fe16 	bl	80018ac <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d907      	bls.n	8003c9a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e06c      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9a:	4b38      	ldr	r3, [pc, #224]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ea      	beq.n	8003c7c <HAL_RCC_OscConfig+0x8a0>
 8003ca6:	e064      	b.n	8003d72 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a33      	ldr	r2, [pc, #204]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fdfa 	bl	80018ac <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cba:	e00e      	b.n	8003cda <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fd fdf6 	bl	80018ac <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d907      	bls.n	8003cda <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cca:	4b2c      	ldr	r3, [pc, #176]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e04c      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cda:	4b28      	ldr	r3, [pc, #160]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1ea      	bne.n	8003cbc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003ce6:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	4924      	ldr	r1, [pc, #144]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003cec:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <HAL_RCC_OscConfig+0x9a8>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	60cb      	str	r3, [r1, #12]
 8003cf2:	e03e      	b.n	8003d72 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e039      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003d00:	4b1e      	ldr	r3, [pc, #120]	@ (8003d7c <HAL_RCC_OscConfig+0x9a0>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0203 	and.w	r2, r3, #3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d12c      	bne.n	8003d6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d123      	bne.n	8003d6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d30:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d11b      	bne.n	8003d6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d40:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d113      	bne.n	8003d6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d50:	085b      	lsrs	r3, r3, #1
 8003d52:	3b01      	subs	r3, #1
 8003d54:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d109      	bne.n	8003d6e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	3b01      	subs	r3, #1
 8003d68:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	019f800c 	.word	0x019f800c
 8003d84:	feeefffc 	.word	0xfeeefffc

08003d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e11c      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b90      	ldr	r3, [pc, #576]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 020f 	bic.w	r2, r3, #15
 8003db6:	498b      	ldr	r1, [pc, #556]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b89      	ldr	r3, [pc, #548]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e104      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d010      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	4b81      	ldr	r3, [pc, #516]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d908      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b7e      	ldr	r3, [pc, #504]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	497b      	ldr	r1, [pc, #492]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8085 	beq.w	8003f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d11f      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e14:	4b74      	ldr	r3, [pc, #464]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0da      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e24:	f000 fa24 	bl	8004270 <RCC_GetSysClockFreqFromPLLSource>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4a6f      	ldr	r2, [pc, #444]	@ (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d947      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e32:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d141      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e46:	4a68      	ldr	r2, [pc, #416]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e4e:	2380      	movs	r3, #128	@ 0x80
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e036      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e5c:	4b62      	ldr	r3, [pc, #392]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d115      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0b6      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e74:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0aa      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e84:	4b58      	ldr	r3, [pc, #352]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0a2      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e94:	f000 f8b0 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4a53      	ldr	r2, [pc, #332]	@ (8003fec <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d90f      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ea2:	4b51      	ldr	r3, [pc, #324]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eae:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ebc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b49      	ldr	r3, [pc, #292]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4946      	ldr	r1, [pc, #280]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed4:	f7fd fcea 	bl	80018ac <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e013      	b.n	8003f04 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fd fce6 	bl	80018ac <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90a      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e06a      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f04:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 020c 	and.w	r2, r3, #12
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d1e2      	bne.n	8003edc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b80      	cmp	r3, #128	@ 0x80
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f1c:	4b32      	ldr	r3, [pc, #200]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a31      	ldr	r2, [pc, #196]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f26:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d010      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d208      	bcs.n	8003f56 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b28      	ldr	r3, [pc, #160]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4925      	ldr	r1, [pc, #148]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f56:	4b23      	ldr	r3, [pc, #140]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d210      	bcs.n	8003f86 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f64:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 020f 	bic.w	r2, r3, #15
 8003f6c:	491d      	ldr	r1, [pc, #116]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f74:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_RCC_ClockConfig+0x25c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d001      	beq.n	8003f86 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e029      	b.n	8003fda <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4912      	ldr	r1, [pc, #72]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	490a      	ldr	r1, [pc, #40]	@ (8003fe8 <HAL_RCC_ClockConfig+0x260>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fc4:	f000 f8b4 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4a09      	ldr	r2, [pc, #36]	@ (8003ff0 <HAL_RCC_ClockConfig+0x268>)
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fce:	4b09      	ldr	r3, [pc, #36]	@ (8003ff4 <HAL_RCC_ClockConfig+0x26c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fd fc1a 	bl	800180c <HAL_InitTick>
 8003fd8:	4603      	mov	r3, r0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40022000 	.word	0x40022000
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	04c4b400 	.word	0x04c4b400
 8003ff0:	20000004 	.word	0x20000004
 8003ff4:	20000008 	.word	0x20000008

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004006:	4b47      	ldr	r3, [pc, #284]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004010:	4b44      	ldr	r3, [pc, #272]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x34>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d121      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d11e      	bne.n	800406a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800402c:	4b3d      	ldr	r3, [pc, #244]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004038:	4b3a      	ldr	r3, [pc, #232]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 800403a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e005      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004048:	4b36      	ldr	r3, [pc, #216]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004054:	4a34      	ldr	r2, [pc, #208]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x130>)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10d      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b04      	cmp	r3, #4
 800406e:	d102      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCC_GetSysClockFreq+0x134>)
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	e004      	b.n	8004080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d101      	bne.n	8004080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800407c:	4b2b      	ldr	r3, [pc, #172]	@ (800412c <HAL_RCC_GetSysClockFreq+0x134>)
 800407e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0c      	cmp	r3, #12
 8004084:	d146      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004086:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004090:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d003      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0xb4>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d00d      	beq.n	80040c6 <HAL_RCC_GetSysClockFreq+0xce>
 80040aa:	e019      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ac:	4a1f      	ldr	r2, [pc, #124]	@ (800412c <HAL_RCC_GetSysClockFreq+0x134>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040b6:	68d2      	ldr	r2, [r2, #12]
 80040b8:	0a12      	lsrs	r2, r2, #8
 80040ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
        break;
 80040c4:	e019      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040c6:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_RCC_GetSysClockFreq+0x134>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040d0:	68d2      	ldr	r2, [r2, #12]
 80040d2:	0a12      	lsrs	r2, r2, #8
 80040d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
        break;
 80040de:	e00c      	b.n	80040fa <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	4a0e      	ldr	r2, [pc, #56]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040ea:	68d2      	ldr	r2, [r2, #12]
 80040ec:	0a12      	lsrs	r2, r2, #8
 80040ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	617b      	str	r3, [r7, #20]
        break;
 80040f8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80040fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x12c>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	0e5b      	lsrs	r3, r3, #25
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	3301      	adds	r3, #1
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004114:	69bb      	ldr	r3, [r7, #24]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	@ 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	08008a54 	.word	0x08008a54
 800412c:	00f42400 	.word	0x00f42400

08004130 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004134:	f7ff ff60 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <HAL_RCC_GetHCLKFreq+0x20>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	4903      	ldr	r1, [pc, #12]	@ (8004154 <HAL_RCC_GetHCLKFreq+0x24>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	08008a3c 	.word	0x08008a3c

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800415c:	f7ff ffe8 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	@ (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08008a4c 	.word	0x08008a4c

08004180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004184:	f7ff ffd4 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004188:	4602      	mov	r2, r0
 800418a:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	0adb      	lsrs	r3, r3, #11
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	4903      	ldr	r1, [pc, #12]	@ (80041a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004196:	5ccb      	ldrb	r3, [r1, r3]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800419c:	4618      	mov	r0, r3
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08008a4c 	.word	0x08008a4c

080041a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041b4:	4b2c      	ldr	r3, [pc, #176]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041c0:	f7ff f86e 	bl	80032a0 <HAL_PWREx_GetVoltageRange>
 80041c4:	6138      	str	r0, [r7, #16]
 80041c6:	e014      	b.n	80041f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b27      	ldr	r3, [pc, #156]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041cc:	4a26      	ldr	r2, [pc, #152]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d4:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041e0:	f7ff f85e 	bl	80032a0 <HAL_PWREx_GetVoltageRange>
 80041e4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004268 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x58>
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041fe:	d10b      	bne.n	8004218 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b80      	cmp	r3, #128	@ 0x80
 8004204:	d919      	bls.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2ba0      	cmp	r3, #160	@ 0xa0
 800420a:	d902      	bls.n	8004212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800420c:	2302      	movs	r3, #2
 800420e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004210:	e013      	b.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004212:	2301      	movs	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004216:	e010      	b.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b80      	cmp	r3, #128	@ 0x80
 800421c:	d902      	bls.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800421e:	2303      	movs	r3, #3
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e00a      	b.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b80      	cmp	r3, #128	@ 0x80
 8004228:	d102      	bne.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800422a:	2302      	movs	r3, #2
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e004      	b.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b70      	cmp	r3, #112	@ 0x70
 8004234:	d101      	bne.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004236:	2301      	movs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800423a:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 020f 	bic.w	r2, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	@ (800426c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800424a:	4b08      	ldr	r3, [pc, #32]	@ (800426c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	40022000 	.word	0x40022000

08004270 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004276:	4b31      	ldr	r3, [pc, #196]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004280:	4b2e      	ldr	r3, [pc, #184]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3301      	adds	r3, #1
 800428c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d015      	beq.n	80042c0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b03      	cmp	r3, #3
 8004298:	d839      	bhi.n	800430e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d01c      	beq.n	80042da <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d133      	bne.n	800430e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042a6:	4a26      	ldr	r2, [pc, #152]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ae:	4a23      	ldr	r2, [pc, #140]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042b0:	68d2      	ldr	r2, [r2, #12]
 80042b2:	0a12      	lsrs	r2, r2, #8
 80042b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
 80042bc:	613b      	str	r3, [r7, #16]
      break;
 80042be:	e029      	b.n	8004314 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004340 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	4a1c      	ldr	r2, [pc, #112]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042ca:	68d2      	ldr	r2, [r2, #12]
 80042cc:	0a12      	lsrs	r2, r2, #8
 80042ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
 80042d6:	613b      	str	r3, [r7, #16]
      break;
 80042d8:	e01c      	b.n	8004314 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042da:	4b18      	ldr	r3, [pc, #96]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042e6:	4b15      	ldr	r3, [pc, #84]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ec:	0a1b      	lsrs	r3, r3, #8
 80042ee:	f003 030f 	and.w	r3, r3, #15
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e005      	b.n	8004302 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042f6:	4b11      	ldr	r3, [pc, #68]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	091b      	lsrs	r3, r3, #4
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004302:	4a10      	ldr	r2, [pc, #64]	@ (8004344 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430a:	613b      	str	r3, [r7, #16]
        break;
 800430c:	e002      	b.n	8004314 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
      break;
 8004312:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004314:	4b09      	ldr	r3, [pc, #36]	@ (800433c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0e5b      	lsrs	r3, r3, #25
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800432e:	683b      	ldr	r3, [r7, #0]
}
 8004330:	4618      	mov	r0, r3
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40021000 	.word	0x40021000
 8004340:	00f42400 	.word	0x00f42400
 8004344:	08008a54 	.word	0x08008a54

08004348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004354:	2300      	movs	r3, #0
 8004356:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004360:	2b00      	cmp	r3, #0
 8004362:	d040      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004368:	2b80      	cmp	r3, #128	@ 0x80
 800436a:	d02a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800436c:	2b80      	cmp	r3, #128	@ 0x80
 800436e:	d825      	bhi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004370:	2b60      	cmp	r3, #96	@ 0x60
 8004372:	d026      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004374:	2b60      	cmp	r3, #96	@ 0x60
 8004376:	d821      	bhi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	d006      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800437c:	2b40      	cmp	r3, #64	@ 0x40
 800437e:	d81d      	bhi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d009      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004384:	2b20      	cmp	r3, #32
 8004386:	d010      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004388:	e018      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800438a:	4b8f      	ldr	r3, [pc, #572]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	4a8e      	ldr	r2, [pc, #568]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004394:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004396:	e015      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb56 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043a8:	e00c      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3320      	adds	r3, #32
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fc33 	bl	8004c1c <RCCEx_PLLSAI2_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043ba:	e003      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	77fb      	strb	r3, [r7, #31]
        break;
 80043c0:	e000      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80043c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c4:	7ffb      	ldrb	r3, [r7, #31]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ca:	4b7f      	ldr	r3, [pc, #508]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043d0:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d8:	497b      	ldr	r1, [pc, #492]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80043e0:	e001      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e2:	7ffb      	ldrb	r3, [r7, #31]
 80043e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d047      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043fa:	d030      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004400:	d82a      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004406:	d02a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800440c:	d824      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800440e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004412:	d008      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004418:	d81e      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800441e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004422:	d010      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004424:	e018      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004426:	4b68      	ldr	r3, [pc, #416]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4a67      	ldr	r2, [pc, #412]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004430:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004432:	e015      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fb08 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004444:	e00c      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3320      	adds	r3, #32
 800444a:	2100      	movs	r1, #0
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fbe5 	bl	8004c1c <RCCEx_PLLSAI2_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	77fb      	strb	r3, [r7, #31]
        break;
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800445e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004460:	7ffb      	ldrb	r3, [r7, #31]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004466:	4b58      	ldr	r3, [pc, #352]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800446c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004474:	4954      	ldr	r1, [pc, #336]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800447c:	e001      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	7ffb      	ldrb	r3, [r7, #31]
 8004480:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80ab 	beq.w	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004490:	2300      	movs	r3, #0
 8004492:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004494:	4b4c      	ldr	r3, [pc, #304]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a0:	4b49      	ldr	r3, [pc, #292]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a4:	4a48      	ldr	r2, [pc, #288]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044ac:	4b46      	ldr	r3, [pc, #280]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044bc:	4b43      	ldr	r3, [pc, #268]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a42      	ldr	r2, [pc, #264]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c8:	f7fd f9f0 	bl	80018ac <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ce:	e00f      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7fd f9ec 	bl	80018ac <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d908      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044de:	4b3b      	ldr	r3, [pc, #236]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80044ee:	e006      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f0:	4b36      	ldr	r3, [pc, #216]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0e9      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80044fc:	e000      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80044fe:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004500:	7ffb      	ldrb	r3, [r7, #31]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d164      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004510:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d019      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004524:	4b28      	ldr	r3, [pc, #160]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800452e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004530:	4b25      	ldr	r3, [pc, #148]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	4a24      	ldr	r2, [pc, #144]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800453c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004540:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004546:	4a20      	ldr	r2, [pc, #128]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d01f      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004562:	f7fd f9a3 	bl	80018ac <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	e012      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd f99f 	bl	80018ac <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d909      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800457c:	4b12      	ldr	r3, [pc, #72]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800458e:	e007      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004590:	4b0d      	ldr	r3, [pc, #52]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0e5      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80045a0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80045a2:	7ffb      	ldrb	r3, [r7, #31]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a8:	4b07      	ldr	r3, [pc, #28]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045b8:	4903      	ldr	r1, [pc, #12]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80045c0:	e008      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045c2:	7ffb      	ldrb	r3, [r7, #31]
 80045c4:	77bb      	strb	r3, [r7, #30]
 80045c6:	e005      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	7ffb      	ldrb	r3, [r7, #31]
 80045d2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d105      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b9c      	ldr	r3, [pc, #624]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	4a9b      	ldr	r2, [pc, #620]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045f2:	4b96      	ldr	r3, [pc, #600]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f8:	f023 0203 	bic.w	r2, r3, #3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004600:	4992      	ldr	r1, [pc, #584]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004614:	4b8d      	ldr	r3, [pc, #564]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f023 020c 	bic.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	498a      	ldr	r1, [pc, #552]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004636:	4b85      	ldr	r3, [pc, #532]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004644:	4981      	ldr	r1, [pc, #516]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004658:	4b7c      	ldr	r3, [pc, #496]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	4979      	ldr	r1, [pc, #484]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800467a:	4b74      	ldr	r3, [pc, #464]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004688:	4970      	ldr	r1, [pc, #448]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800469c:	4b6b      	ldr	r3, [pc, #428]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046aa:	4968      	ldr	r1, [pc, #416]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046be:	4b63      	ldr	r3, [pc, #396]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046cc:	495f      	ldr	r1, [pc, #380]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046e0:	4b5a      	ldr	r3, [pc, #360]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	4957      	ldr	r1, [pc, #348]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004702:	4b52      	ldr	r3, [pc, #328]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004708:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004710:	494e      	ldr	r1, [pc, #312]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d031      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800472c:	d00e      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800472e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004732:	d814      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d015      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004738:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800473c:	d10f      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473e:	4b43      	ldr	r3, [pc, #268]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	4a42      	ldr	r2, [pc, #264]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004748:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800474a:	e00c      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f97c 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800475c:	e003      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	77fb      	strb	r3, [r7, #31]
        break;
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004766:	7ffb      	ldrb	r3, [r7, #31]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800476c:	4b37      	ldr	r3, [pc, #220]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004772:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800477a:	4934      	ldr	r1, [pc, #208]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004782:	e001      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	7ffb      	ldrb	r3, [r7, #31]
 8004786:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004794:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a2:	492a      	ldr	r1, [pc, #168]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b6:	4b25      	ldr	r3, [pc, #148]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c4:	4921      	ldr	r1, [pc, #132]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d8:	4b1c      	ldr	r3, [pc, #112]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e6:	4919      	ldr	r1, [pc, #100]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fa:	4b14      	ldr	r3, [pc, #80]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004800:	f023 0203 	bic.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004808:	4910      	ldr	r1, [pc, #64]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d02b      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800483a:	d109      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800483c:	4b03      	ldr	r3, [pc, #12]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a02      	ldr	r2, [pc, #8]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004846:	60d3      	str	r3, [r2, #12]
 8004848:	e014      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004858:	d10c      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	2101      	movs	r1, #1
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f8f5 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800486a:	7ffb      	ldrb	r3, [r7, #31]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004870:	7ffb      	ldrb	r3, [r7, #31]
 8004872:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d04a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004888:	d108      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x554>
 800488a:	4b70      	ldr	r3, [pc, #448]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800488c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004890:	4a6e      	ldr	r2, [pc, #440]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004896:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800489a:	e012      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800489c:	4b6b      	ldr	r3, [pc, #428]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048aa:	4968      	ldr	r1, [pc, #416]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048b2:	4b66      	ldr	r3, [pc, #408]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048b8:	4a64      	ldr	r2, [pc, #400]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048be:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048ca:	d10d      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f8bc 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d019      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80048e2:	7ffb      	ldrb	r3, [r7, #31]
 80048e4:	77bb      	strb	r3, [r7, #30]
 80048e6:	e016      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048f0:	d106      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f2:	4b56      	ldr	r3, [pc, #344]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4a55      	ldr	r2, [pc, #340]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fc:	60d3      	str	r3, [r2, #12]
 80048fe:	e00a      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004908:	d105      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800490a:	4b50      	ldr	r3, [pc, #320]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	4a4f      	ldr	r2, [pc, #316]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004914:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d028      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004922:	4b4a      	ldr	r3, [pc, #296]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004928:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004930:	4946      	ldr	r1, [pc, #280]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800493c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004940:	d106      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004942:	4b42      	ldr	r3, [pc, #264]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	4a41      	ldr	r2, [pc, #260]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800494c:	60d3      	str	r3, [r2, #12]
 800494e:	e011      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004958:	d10c      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	2101      	movs	r1, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f000 f875 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01e      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004980:	4b32      	ldr	r3, [pc, #200]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004986:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004990:	492e      	ldr	r1, [pc, #184]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049a2:	d10c      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	2102      	movs	r1, #2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f850 	bl	8004a50 <RCCEx_PLLSAI1_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80049b4:	7ffb      	ldrb	r3, [r7, #31]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80049ba:	7ffb      	ldrb	r3, [r7, #31]
 80049bc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049ca:	4b20      	ldr	r3, [pc, #128]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d0:	f023 0204 	bic.w	r2, r3, #4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049da:	491c      	ldr	r1, [pc, #112]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049ee:	4b17      	ldr	r3, [pc, #92]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049f4:	f023 0218 	bic.w	r2, r3, #24
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	4913      	ldr	r1, [pc, #76]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d017      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a12:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a22:	490a      	ldr	r1, [pc, #40]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a34:	d105      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a36:	4b05      	ldr	r3, [pc, #20]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a40:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004a42:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000

08004a50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d018      	beq.n	8004a98 <RCCEx_PLLSAI1_Config+0x48>
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	d81f      	bhi.n	8004aaa <RCCEx_PLLSAI1_Config+0x5a>
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d002      	beq.n	8004a74 <RCCEx_PLLSAI1_Config+0x24>
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d009      	beq.n	8004a86 <RCCEx_PLLSAI1_Config+0x36>
 8004a72:	e01a      	b.n	8004aaa <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a74:	4b65      	ldr	r3, [pc, #404]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d117      	bne.n	8004ab0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a84:	e014      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a86:	4b61      	ldr	r3, [pc, #388]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d110      	bne.n	8004ab4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a96:	e00d      	b.n	8004ab4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004a98:	4b5c      	ldr	r3, [pc, #368]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d109      	bne.n	8004ab8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa8:	e006      	b.n	8004ab8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	73fb      	strb	r3, [r7, #15]
      break;
 8004aae:	e004      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e002      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ab4:	bf00      	nop
 8004ab6:	e000      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ab8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f040 809f 	bne.w	8004c00 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ac2:	4b52      	ldr	r3, [pc, #328]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a51      	ldr	r2, [pc, #324]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ac8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ace:	f7fc feed 	bl	80018ac <HAL_GetTick>
 8004ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad4:	e00f      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad6:	f7fc fee9 	bl	80018ac <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d908      	bls.n	8004af6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae4:	4b49      	ldr	r3, [pc, #292]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004af4:	e006      	b.n	8004b04 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af6:	4b45      	ldr	r3, [pc, #276]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1e9      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x86>
 8004b02:	e000      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004b04:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d179      	bne.n	8004c00 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d116      	bne.n	8004b40 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b12:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	4b3e      	ldr	r3, [pc, #248]	@ (8004c10 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6892      	ldr	r2, [r2, #8]
 8004b1e:	0211      	lsls	r1, r2, #8
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	68d2      	ldr	r2, [r2, #12]
 8004b24:	06d2      	lsls	r2, r2, #27
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6852      	ldr	r2, [r2, #4]
 8004b2c:	3a01      	subs	r2, #1
 8004b2e:	0112      	lsls	r2, r2, #4
 8004b30:	4311      	orrs	r1, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	4934      	ldr	r1, [pc, #208]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	610b      	str	r3, [r1, #16]
 8004b3e:	e033      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d118      	bne.n	8004b78 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b46:	4b31      	ldr	r3, [pc, #196]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	4b32      	ldr	r3, [pc, #200]	@ (8004c14 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6892      	ldr	r2, [r2, #8]
 8004b52:	0211      	lsls	r1, r2, #8
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6912      	ldr	r2, [r2, #16]
 8004b58:	0852      	lsrs	r2, r2, #1
 8004b5a:	3a01      	subs	r2, #1
 8004b5c:	0552      	lsls	r2, r2, #21
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6852      	ldr	r2, [r2, #4]
 8004b64:	3a01      	subs	r2, #1
 8004b66:	0112      	lsls	r2, r2, #4
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	4926      	ldr	r1, [pc, #152]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	610b      	str	r3, [r1, #16]
 8004b76:	e017      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b78:	4b24      	ldr	r3, [pc, #144]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	4b26      	ldr	r3, [pc, #152]	@ (8004c18 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6892      	ldr	r2, [r2, #8]
 8004b84:	0211      	lsls	r1, r2, #8
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6952      	ldr	r2, [r2, #20]
 8004b8a:	0852      	lsrs	r2, r2, #1
 8004b8c:	3a01      	subs	r2, #1
 8004b8e:	0652      	lsls	r2, r2, #25
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6852      	ldr	r2, [r2, #4]
 8004b96:	3a01      	subs	r2, #1
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	491a      	ldr	r1, [pc, #104]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ba8:	4b18      	ldr	r3, [pc, #96]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a17      	ldr	r2, [pc, #92]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb4:	f7fc fe7a 	bl	80018ac <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bba:	e00f      	b.n	8004bdc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bbc:	f7fc fe76 	bl	80018ac <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d908      	bls.n	8004bdc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bca:	4b10      	ldr	r3, [pc, #64]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004bda:	e006      	b.n	8004bea <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0e9      	beq.n	8004bbc <RCCEx_PLLSAI1_Config+0x16c>
 8004be8:	e000      	b.n	8004bec <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004bea:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	4904      	ldr	r1, [pc, #16]	@ (8004c0c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	07ff800c 	.word	0x07ff800c
 8004c14:	ff9f800c 	.word	0xff9f800c
 8004c18:	f9ff800c 	.word	0xf9ff800c

08004c1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d018      	beq.n	8004c64 <RCCEx_PLLSAI2_Config+0x48>
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d81f      	bhi.n	8004c76 <RCCEx_PLLSAI2_Config+0x5a>
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d002      	beq.n	8004c40 <RCCEx_PLLSAI2_Config+0x24>
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d009      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0x36>
 8004c3e:	e01a      	b.n	8004c76 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c40:	4b4a      	ldr	r3, [pc, #296]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d117      	bne.n	8004c7c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e014      	b.n	8004c7c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c52:	4b46      	ldr	r3, [pc, #280]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d110      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c62:	e00d      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c64:	4b41      	ldr	r3, [pc, #260]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c74:	e006      	b.n	8004c84 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7a:	e004      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c7c:	bf00      	nop
 8004c7e:	e002      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c84:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d169      	bne.n	8004d60 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c8c:	4b37      	ldr	r3, [pc, #220]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a36      	ldr	r2, [pc, #216]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fc fe08 	bl	80018ac <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c9e:	e00f      	b.n	8004cc0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ca0:	f7fc fe04 	bl	80018ac <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d908      	bls.n	8004cc0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cae:	4b2f      	ldr	r3, [pc, #188]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d009      	beq.n	8004cce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cbe:	e006      	b.n	8004cce <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e9      	bne.n	8004ca0 <RCCEx_PLLSAI2_Config+0x84>
 8004ccc:	e000      	b.n	8004cd0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004cce:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d144      	bne.n	8004d60 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d115      	bne.n	8004d08 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cdc:	4b23      	ldr	r3, [pc, #140]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	4b23      	ldr	r3, [pc, #140]	@ (8004d70 <RCCEx_PLLSAI2_Config+0x154>)
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	0211      	lsls	r1, r2, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	06d2      	lsls	r2, r2, #27
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6852      	ldr	r2, [r2, #4]
 8004cf6:	3a01      	subs	r2, #1
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	491a      	ldr	r1, [pc, #104]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d08:	4b18      	ldr	r3, [pc, #96]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a17      	ldr	r2, [pc, #92]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7fc fdca 	bl	80018ac <HAL_GetTick>
 8004d18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d1a:	e00f      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d1c:	f7fc fdc6 	bl	80018ac <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d908      	bls.n	8004d3c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d2a:	4b10      	ldr	r3, [pc, #64]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d109      	bne.n	8004d4a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0e9      	beq.n	8004d1c <RCCEx_PLLSAI2_Config+0x100>
 8004d48:	e000      	b.n	8004d4c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004d4a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004d52:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d54:	695a      	ldr	r2, [r3, #20]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	4904      	ldr	r1, [pc, #16]	@ (8004d6c <RCCEx_PLLSAI2_Config+0x150>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	07ff800c 	.word	0x07ff800c

08004d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e049      	b.n	8004e1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fc fa30 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 fb7a 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e049      	b.n	8004ec8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f841 	bl	8004ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f000 fb23 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_PWM_Start+0x24>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e03c      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d109      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x3e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e02f      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x58>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e022      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d109      	bne.n	8004f56 <HAL_TIM_PWM_Start+0x72>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	e015      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d109      	bne.n	8004f70 <HAL_TIM_PWM_Start+0x8c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e008      	b.n	8004f82 <HAL_TIM_PWM_Start+0x9e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e09c      	b.n	80050c4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xb6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f98:	e023      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xc6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa8:	e01b      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xd6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb8:	e013      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xe6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fc8:	e00b      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start+0xf6>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd8:	e003      	b.n	8004fe2 <HAL_TIM_PWM_Start+0xfe>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fe76 	bl	8005cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a35      	ldr	r2, [pc, #212]	@ (80050cc <HAL_TIM_PWM_Start+0x1e8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <HAL_TIM_PWM_Start+0x13e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a34      	ldr	r2, [pc, #208]	@ (80050d0 <HAL_TIM_PWM_Start+0x1ec>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIM_PWM_Start+0x13e>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a32      	ldr	r2, [pc, #200]	@ (80050d4 <HAL_TIM_PWM_Start+0x1f0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_TIM_PWM_Start+0x13e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a31      	ldr	r2, [pc, #196]	@ (80050d8 <HAL_TIM_PWM_Start+0x1f4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_TIM_PWM_Start+0x13e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a2f      	ldr	r2, [pc, #188]	@ (80050dc <HAL_TIM_PWM_Start+0x1f8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d101      	bne.n	8005026 <HAL_TIM_PWM_Start+0x142>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <HAL_TIM_PWM_Start+0x144>
 8005026:	2300      	movs	r3, #0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	@ (80050cc <HAL_TIM_PWM_Start+0x1e8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d01d      	beq.n	8005082 <HAL_TIM_PWM_Start+0x19e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d018      	beq.n	8005082 <HAL_TIM_PWM_Start+0x19e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a22      	ldr	r2, [pc, #136]	@ (80050e0 <HAL_TIM_PWM_Start+0x1fc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_TIM_PWM_Start+0x19e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a21      	ldr	r2, [pc, #132]	@ (80050e4 <HAL_TIM_PWM_Start+0x200>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d00e      	beq.n	8005082 <HAL_TIM_PWM_Start+0x19e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <HAL_TIM_PWM_Start+0x204>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d009      	beq.n	8005082 <HAL_TIM_PWM_Start+0x19e>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a17      	ldr	r2, [pc, #92]	@ (80050d0 <HAL_TIM_PWM_Start+0x1ec>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d004      	beq.n	8005082 <HAL_TIM_PWM_Start+0x19e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <HAL_TIM_PWM_Start+0x1f0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d115      	bne.n	80050ae <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	4b18      	ldr	r3, [pc, #96]	@ (80050ec <HAL_TIM_PWM_Start+0x208>)
 800508a:	4013      	ands	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b06      	cmp	r3, #6
 8005092:	d015      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x1dc>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509a:	d011      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	e008      	b.n	80050c0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	e000      	b.n	80050c2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	40013400 	.word	0x40013400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	00010007 	.word	0x00010007

080050f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800510a:	2302      	movs	r3, #2
 800510c:	e0ff      	b.n	800530e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b14      	cmp	r3, #20
 800511a:	f200 80f0 	bhi.w	80052fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005179 	.word	0x08005179
 8005128:	080052ff 	.word	0x080052ff
 800512c:	080052ff 	.word	0x080052ff
 8005130:	080052ff 	.word	0x080052ff
 8005134:	080051b9 	.word	0x080051b9
 8005138:	080052ff 	.word	0x080052ff
 800513c:	080052ff 	.word	0x080052ff
 8005140:	080052ff 	.word	0x080052ff
 8005144:	080051fb 	.word	0x080051fb
 8005148:	080052ff 	.word	0x080052ff
 800514c:	080052ff 	.word	0x080052ff
 8005150:	080052ff 	.word	0x080052ff
 8005154:	0800523b 	.word	0x0800523b
 8005158:	080052ff 	.word	0x080052ff
 800515c:	080052ff 	.word	0x080052ff
 8005160:	080052ff 	.word	0x080052ff
 8005164:	0800527d 	.word	0x0800527d
 8005168:	080052ff 	.word	0x080052ff
 800516c:	080052ff 	.word	0x080052ff
 8005170:	080052ff 	.word	0x080052ff
 8005174:	080052bd 	.word	0x080052bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fa3a 	bl	80055f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0208 	orr.w	r2, r2, #8
 8005192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0204 	bic.w	r2, r2, #4
 80051a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6999      	ldr	r1, [r3, #24]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	619a      	str	r2, [r3, #24]
      break;
 80051b6:	e0a5      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 faaa 	bl	8005718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	021a      	lsls	r2, r3, #8
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	619a      	str	r2, [r3, #24]
      break;
 80051f8:	e084      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68b9      	ldr	r1, [r7, #8]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fb13 	bl	800582c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0208 	orr.w	r2, r2, #8
 8005214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0204 	bic.w	r2, r2, #4
 8005224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69d9      	ldr	r1, [r3, #28]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	61da      	str	r2, [r3, #28]
      break;
 8005238:	e064      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fb7b 	bl	800593c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	021a      	lsls	r2, r3, #8
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	61da      	str	r2, [r3, #28]
      break;
 800527a:	e043      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fbc4 	bl	8005a10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0208 	orr.w	r2, r2, #8
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0204 	bic.w	r2, r2, #4
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052ba:	e023      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fc08 	bl	8005ad8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	021a      	lsls	r2, r3, #8
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052fc:	e002      	b.n	8005304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
      break;
 8005302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop

08005318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIM_ConfigClockSource+0x1c>
 8005330:	2302      	movs	r3, #2
 8005332:	e0b6      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x18a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800535e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005370:	d03e      	beq.n	80053f0 <HAL_TIM_ConfigClockSource+0xd8>
 8005372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005376:	f200 8087 	bhi.w	8005488 <HAL_TIM_ConfigClockSource+0x170>
 800537a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537e:	f000 8086 	beq.w	800548e <HAL_TIM_ConfigClockSource+0x176>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005386:	d87f      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 8005388:	2b70      	cmp	r3, #112	@ 0x70
 800538a:	d01a      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0xaa>
 800538c:	2b70      	cmp	r3, #112	@ 0x70
 800538e:	d87b      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 8005390:	2b60      	cmp	r3, #96	@ 0x60
 8005392:	d050      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x11e>
 8005394:	2b60      	cmp	r3, #96	@ 0x60
 8005396:	d877      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 8005398:	2b50      	cmp	r3, #80	@ 0x50
 800539a:	d03c      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0xfe>
 800539c:	2b50      	cmp	r3, #80	@ 0x50
 800539e:	d873      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 80053a0:	2b40      	cmp	r3, #64	@ 0x40
 80053a2:	d058      	beq.n	8005456 <HAL_TIM_ConfigClockSource+0x13e>
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d86f      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 80053a8:	2b30      	cmp	r3, #48	@ 0x30
 80053aa:	d064      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15e>
 80053ac:	2b30      	cmp	r3, #48	@ 0x30
 80053ae:	d86b      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d060      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15e>
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d867      	bhi.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d05c      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15e>
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d05a      	beq.n	8005476 <HAL_TIM_ConfigClockSource+0x15e>
 80053c0:	e062      	b.n	8005488 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	f000 fc63 	bl	8005c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	609a      	str	r2, [r3, #8]
      break;
 80053ee:	e04f      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	f000 fc4c 	bl	8005c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005412:	609a      	str	r2, [r3, #8]
      break;
 8005414:	e03c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	461a      	mov	r2, r3
 8005424:	f000 fbbe 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2150      	movs	r1, #80	@ 0x50
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fc17 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005434:	e02c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005442:	461a      	mov	r2, r3
 8005444:	f000 fbdd 	bl	8005c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2160      	movs	r1, #96	@ 0x60
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fc07 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005454:	e01c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005462:	461a      	mov	r2, r3
 8005464:	f000 fb9e 	bl	8005ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2140      	movs	r1, #64	@ 0x40
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fbf7 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005474:	e00c      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f000 fbee 	bl	8005c62 <TIM_ITRx_SetConfig>
      break;
 8005486:	e003      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	73fb      	strb	r3, [r7, #15]
      break;
 800548c:	e000      	b.n	8005490 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800548e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a46      	ldr	r2, [pc, #280]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ca:	d00f      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a43      	ldr	r2, [pc, #268]	@ (80055dc <TIM_Base_SetConfig+0x130>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00b      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a42      	ldr	r2, [pc, #264]	@ (80055e0 <TIM_Base_SetConfig+0x134>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d007      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a41      	ldr	r2, [pc, #260]	@ (80055e4 <TIM_Base_SetConfig+0x138>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0x40>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a40      	ldr	r2, [pc, #256]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d108      	bne.n	80054fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a35      	ldr	r2, [pc, #212]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d01f      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800550c:	d01b      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a32      	ldr	r2, [pc, #200]	@ (80055dc <TIM_Base_SetConfig+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d017      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a31      	ldr	r2, [pc, #196]	@ (80055e0 <TIM_Base_SetConfig+0x134>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a30      	ldr	r2, [pc, #192]	@ (80055e4 <TIM_Base_SetConfig+0x138>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2f      	ldr	r2, [pc, #188]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a2e      	ldr	r2, [pc, #184]	@ (80055ec <TIM_Base_SetConfig+0x140>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a2d      	ldr	r2, [pc, #180]	@ (80055f0 <TIM_Base_SetConfig+0x144>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0x9a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a2c      	ldr	r2, [pc, #176]	@ (80055f4 <TIM_Base_SetConfig+0x148>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d108      	bne.n	8005558 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a16      	ldr	r2, [pc, #88]	@ (80055d8 <TIM_Base_SetConfig+0x12c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00f      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a18      	ldr	r2, [pc, #96]	@ (80055e8 <TIM_Base_SetConfig+0x13c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00b      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a17      	ldr	r2, [pc, #92]	@ (80055ec <TIM_Base_SetConfig+0x140>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a16      	ldr	r2, [pc, #88]	@ (80055f0 <TIM_Base_SetConfig+0x144>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_Base_SetConfig+0xf8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <TIM_Base_SetConfig+0x148>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d103      	bne.n	80055ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f023 0201 	bic.w	r2, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
  }
}
 80055ca:	bf00      	nop
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40012c00 	.word	0x40012c00
 80055dc:	40000400 	.word	0x40000400
 80055e0:	40000800 	.word	0x40000800
 80055e4:	40000c00 	.word	0x40000c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800

080055f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 0201 	bic.w	r2, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0303 	bic.w	r3, r3, #3
 8005632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f023 0302 	bic.w	r3, r3, #2
 8005644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a2c      	ldr	r2, [pc, #176]	@ (8005704 <TIM_OC1_SetConfig+0x10c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <TIM_OC1_SetConfig+0x80>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a2b      	ldr	r2, [pc, #172]	@ (8005708 <TIM_OC1_SetConfig+0x110>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_OC1_SetConfig+0x80>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a2a      	ldr	r2, [pc, #168]	@ (800570c <TIM_OC1_SetConfig+0x114>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_OC1_SetConfig+0x80>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a29      	ldr	r2, [pc, #164]	@ (8005710 <TIM_OC1_SetConfig+0x118>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_OC1_SetConfig+0x80>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a28      	ldr	r2, [pc, #160]	@ (8005714 <TIM_OC1_SetConfig+0x11c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d10c      	bne.n	8005692 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 0308 	bic.w	r3, r3, #8
 800567e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a1b      	ldr	r2, [pc, #108]	@ (8005704 <TIM_OC1_SetConfig+0x10c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00f      	beq.n	80056ba <TIM_OC1_SetConfig+0xc2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a1a      	ldr	r2, [pc, #104]	@ (8005708 <TIM_OC1_SetConfig+0x110>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_OC1_SetConfig+0xc2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a19      	ldr	r2, [pc, #100]	@ (800570c <TIM_OC1_SetConfig+0x114>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d007      	beq.n	80056ba <TIM_OC1_SetConfig+0xc2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a18      	ldr	r2, [pc, #96]	@ (8005710 <TIM_OC1_SetConfig+0x118>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_OC1_SetConfig+0xc2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a17      	ldr	r2, [pc, #92]	@ (8005714 <TIM_OC1_SetConfig+0x11c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d111      	bne.n	80056de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4313      	orrs	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	621a      	str	r2, [r3, #32]
}
 80056f8:	bf00      	nop
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40012c00 	.word	0x40012c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	f023 0210 	bic.w	r2, r3, #16
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0320 	bic.w	r3, r3, #32
 8005766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a28      	ldr	r2, [pc, #160]	@ (8005818 <TIM_OC2_SetConfig+0x100>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_OC2_SetConfig+0x6c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a27      	ldr	r2, [pc, #156]	@ (800581c <TIM_OC2_SetConfig+0x104>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10d      	bne.n	80057a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800579e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <TIM_OC2_SetConfig+0x100>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00f      	beq.n	80057c8 <TIM_OC2_SetConfig+0xb0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	@ (800581c <TIM_OC2_SetConfig+0x104>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_OC2_SetConfig+0xb0>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005820 <TIM_OC2_SetConfig+0x108>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_OC2_SetConfig+0xb0>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005824 <TIM_OC2_SetConfig+0x10c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC2_SetConfig+0xb0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a19      	ldr	r2, [pc, #100]	@ (8005828 <TIM_OC2_SetConfig+0x110>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d113      	bne.n	80057f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	621a      	str	r2, [r3, #32]
}
 800580a:	bf00      	nop
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	40012c00 	.word	0x40012c00
 800581c:	40013400 	.word	0x40013400
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400
 8005828:	40014800 	.word	0x40014800

0800582c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800585a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0303 	bic.w	r3, r3, #3
 8005866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a27      	ldr	r2, [pc, #156]	@ (8005928 <TIM_OC3_SetConfig+0xfc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <TIM_OC3_SetConfig+0x6a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a26      	ldr	r2, [pc, #152]	@ (800592c <TIM_OC3_SetConfig+0x100>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10d      	bne.n	80058b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800589c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <TIM_OC3_SetConfig+0xfc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_OC3_SetConfig+0xae>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1b      	ldr	r2, [pc, #108]	@ (800592c <TIM_OC3_SetConfig+0x100>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_OC3_SetConfig+0xae>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005930 <TIM_OC3_SetConfig+0x104>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_OC3_SetConfig+0xae>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a19      	ldr	r2, [pc, #100]	@ (8005934 <TIM_OC3_SetConfig+0x108>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_OC3_SetConfig+0xae>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <TIM_OC3_SetConfig+0x10c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d113      	bne.n	8005902 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40012c00 	.word	0x40012c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400
 8005938:	40014800 	.word	0x40014800

0800593c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800596a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	021b      	lsls	r3, r3, #8
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800598a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	031b      	lsls	r3, r3, #12
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	4313      	orrs	r3, r2
 8005996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a18      	ldr	r2, [pc, #96]	@ (80059fc <TIM_OC4_SetConfig+0xc0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00f      	beq.n	80059c0 <TIM_OC4_SetConfig+0x84>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a17      	ldr	r2, [pc, #92]	@ (8005a00 <TIM_OC4_SetConfig+0xc4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d00b      	beq.n	80059c0 <TIM_OC4_SetConfig+0x84>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a16      	ldr	r2, [pc, #88]	@ (8005a04 <TIM_OC4_SetConfig+0xc8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d007      	beq.n	80059c0 <TIM_OC4_SetConfig+0x84>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a15      	ldr	r2, [pc, #84]	@ (8005a08 <TIM_OC4_SetConfig+0xcc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC4_SetConfig+0x84>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a14      	ldr	r2, [pc, #80]	@ (8005a0c <TIM_OC4_SetConfig+0xd0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d109      	bne.n	80059d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	019b      	lsls	r3, r3, #6
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40014400 	.word	0x40014400
 8005a0c:	40014800 	.word	0x40014800

08005a10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	041b      	lsls	r3, r3, #16
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a17      	ldr	r2, [pc, #92]	@ (8005ac4 <TIM_OC5_SetConfig+0xb4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_OC5_SetConfig+0x7a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ac8 <TIM_OC5_SetConfig+0xb8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_OC5_SetConfig+0x7a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a15      	ldr	r2, [pc, #84]	@ (8005acc <TIM_OC5_SetConfig+0xbc>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_OC5_SetConfig+0x7a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <TIM_OC5_SetConfig+0xc0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_OC5_SetConfig+0x7a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a13      	ldr	r2, [pc, #76]	@ (8005ad4 <TIM_OC5_SetConfig+0xc4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d109      	bne.n	8005a9e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	621a      	str	r2, [r3, #32]
}
 8005ab8:	bf00      	nop
 8005aba:	371c      	adds	r7, #28
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40013400 	.word	0x40013400
 8005acc:	40014000 	.word	0x40014000
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	40014800 	.word	0x40014800

08005ad8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	051b      	lsls	r3, r3, #20
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a18      	ldr	r2, [pc, #96]	@ (8005b90 <TIM_OC6_SetConfig+0xb8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00f      	beq.n	8005b54 <TIM_OC6_SetConfig+0x7c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a17      	ldr	r2, [pc, #92]	@ (8005b94 <TIM_OC6_SetConfig+0xbc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_OC6_SetConfig+0x7c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	@ (8005b98 <TIM_OC6_SetConfig+0xc0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_OC6_SetConfig+0x7c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <TIM_OC6_SetConfig+0xc4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_OC6_SetConfig+0x7c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a14      	ldr	r2, [pc, #80]	@ (8005ba0 <TIM_OC6_SetConfig+0xc8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d109      	bne.n	8005b68 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	621a      	str	r2, [r3, #32]
}
 8005b82:	bf00      	nop
 8005b84:	371c      	adds	r7, #28
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	f023 0201 	bic.w	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f023 030a 	bic.w	r3, r3, #10
 8005be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	621a      	str	r2, [r3, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	371c      	adds	r7, #28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b087      	sub	sp, #28
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	f023 0210 	bic.w	r2, r3, #16
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	031b      	lsls	r3, r3, #12
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f043 0307 	orr.w	r3, r3, #7
 8005c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	609a      	str	r2, [r3, #8]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	021a      	lsls	r2, r3, #8
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	609a      	str	r2, [r3, #8]
}
 8005cd0:	bf00      	nop
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2201      	movs	r2, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e068      	b.n	8005e12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a2e      	ldr	r2, [pc, #184]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d7a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db2:	d018      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a13      	ldr	r2, [pc, #76]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a14      	ldr	r2, [pc, #80]	@ (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d10c      	bne.n	8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40012c00 	.word	0x40012c00
 8005e24:	40013400 	.word	0x40013400
 8005e28:	40000400 	.word	0x40000400
 8005e2c:	40000800 	.word	0x40000800
 8005e30:	40000c00 	.word	0x40000c00
 8005e34:	40014000 	.word	0x40014000

08005e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e073      	b.n	8005f3c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	041b      	lsls	r3, r3, #16
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	@ (8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	@ (8005f4c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d11c      	bne.n	8005f2a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efa:	051b      	lsls	r3, r3, #20
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40013400 	.word	0x40013400

08005f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e042      	b.n	8005fe8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fb f9d7 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2224      	movs	r2, #36	@ 0x24
 8005f7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0201 	bic.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fc18 	bl	80067d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f915 	bl	80061d0 <UART_SetConfig>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e01b      	b.n	8005fe8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fc97 	bl	8006914 <UART_CheckIdleState>
 8005fe6:	4603      	mov	r3, r0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	@ 0x28
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	2b20      	cmp	r3, #32
 8006008:	d17b      	bne.n	8006102 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_UART_Transmit+0x26>
 8006010:	88fb      	ldrh	r3, [r7, #6]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e074      	b.n	8006104 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2221      	movs	r2, #33	@ 0x21
 8006026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800602a:	f7fb fc3f 	bl	80018ac <HAL_GetTick>
 800602e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	88fa      	ldrh	r2, [r7, #6]
 8006034:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006048:	d108      	bne.n	800605c <HAL_UART_Transmit+0x6c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d104      	bne.n	800605c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	e003      	b.n	8006064 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006064:	e030      	b.n	80060c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2200      	movs	r2, #0
 800606e:	2180      	movs	r1, #128	@ 0x80
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f000 fcf9 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e03d      	b.n	8006104 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800609c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	3302      	adds	r3, #2
 80060a2:	61bb      	str	r3, [r7, #24]
 80060a4:	e007      	b.n	80060b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	781a      	ldrb	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	3301      	adds	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1c8      	bne.n	8006066 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2200      	movs	r2, #0
 80060dc:	2140      	movs	r1, #64	@ 0x40
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fcc2 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e006      	b.n	8006104 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80060fe:	2300      	movs	r3, #0
 8006100:	e000      	b.n	8006104 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006102:	2302      	movs	r3, #2
  }
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08a      	sub	sp, #40	@ 0x28
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006120:	2b20      	cmp	r3, #32
 8006122:	d137      	bne.n	8006194 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Receive_IT+0x24>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e030      	b.n	8006196 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <HAL_UART_Receive_IT+0x94>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d01f      	beq.n	8006184 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d018      	beq.n	8006184 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	613b      	str	r3, [r7, #16]
   return(result);
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006166:	627b      	str	r3, [r7, #36]	@ 0x24
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	69f9      	ldr	r1, [r7, #28]
 8006176:	6a3a      	ldr	r2, [r7, #32]
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	61bb      	str	r3, [r7, #24]
   return(result);
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e6      	bne.n	8006152 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006184:	88fb      	ldrh	r3, [r7, #6]
 8006186:	461a      	mov	r2, r3
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fcda 	bl	8006b44 <UART_Start_Receive_IT>
 8006190:	4603      	mov	r3, r0
 8006192:	e000      	b.n	8006196 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3728      	adds	r7, #40	@ 0x28
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40008000 	.word	0x40008000

080061a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d4:	b08c      	sub	sp, #48	@ 0x30
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4baa      	ldr	r3, [pc, #680]	@ (80064a8 <UART_SetConfig+0x2d8>)
 8006200:	4013      	ands	r3, r2
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006208:	430b      	orrs	r3, r1
 800620a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a9f      	ldr	r2, [pc, #636]	@ (80064ac <UART_SetConfig+0x2dc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006238:	4313      	orrs	r3, r2
 800623a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006246:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006250:	430b      	orrs	r3, r1
 8006252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	f023 010f 	bic.w	r1, r3, #15
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a90      	ldr	r2, [pc, #576]	@ (80064b0 <UART_SetConfig+0x2e0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d125      	bne.n	80062c0 <UART_SetConfig+0xf0>
 8006274:	4b8f      	ldr	r3, [pc, #572]	@ (80064b4 <UART_SetConfig+0x2e4>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800627a:	f003 0303 	and.w	r3, r3, #3
 800627e:	2b03      	cmp	r3, #3
 8006280:	d81a      	bhi.n	80062b8 <UART_SetConfig+0xe8>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <UART_SetConfig+0xb8>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	08006299 	.word	0x08006299
 800628c:	080062a9 	.word	0x080062a9
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062b1 	.word	0x080062b1
 8006298:	2301      	movs	r3, #1
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e116      	b.n	80064ce <UART_SetConfig+0x2fe>
 80062a0:	2302      	movs	r3, #2
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e112      	b.n	80064ce <UART_SetConfig+0x2fe>
 80062a8:	2304      	movs	r3, #4
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e10e      	b.n	80064ce <UART_SetConfig+0x2fe>
 80062b0:	2308      	movs	r3, #8
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e10a      	b.n	80064ce <UART_SetConfig+0x2fe>
 80062b8:	2310      	movs	r3, #16
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e106      	b.n	80064ce <UART_SetConfig+0x2fe>
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a7c      	ldr	r2, [pc, #496]	@ (80064b8 <UART_SetConfig+0x2e8>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d138      	bne.n	800633c <UART_SetConfig+0x16c>
 80062ca:	4b7a      	ldr	r3, [pc, #488]	@ (80064b4 <UART_SetConfig+0x2e4>)
 80062cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d82d      	bhi.n	8006334 <UART_SetConfig+0x164>
 80062d8:	a201      	add	r2, pc, #4	@ (adr r2, 80062e0 <UART_SetConfig+0x110>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	08006315 	.word	0x08006315
 80062e4:	08006335 	.word	0x08006335
 80062e8:	08006335 	.word	0x08006335
 80062ec:	08006335 	.word	0x08006335
 80062f0:	08006325 	.word	0x08006325
 80062f4:	08006335 	.word	0x08006335
 80062f8:	08006335 	.word	0x08006335
 80062fc:	08006335 	.word	0x08006335
 8006300:	0800631d 	.word	0x0800631d
 8006304:	08006335 	.word	0x08006335
 8006308:	08006335 	.word	0x08006335
 800630c:	08006335 	.word	0x08006335
 8006310:	0800632d 	.word	0x0800632d
 8006314:	2300      	movs	r3, #0
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631a:	e0d8      	b.n	80064ce <UART_SetConfig+0x2fe>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006322:	e0d4      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632a:	e0d0      	b.n	80064ce <UART_SetConfig+0x2fe>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006332:	e0cc      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633a:	e0c8      	b.n	80064ce <UART_SetConfig+0x2fe>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a5e      	ldr	r2, [pc, #376]	@ (80064bc <UART_SetConfig+0x2ec>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d125      	bne.n	8006392 <UART_SetConfig+0x1c2>
 8006346:	4b5b      	ldr	r3, [pc, #364]	@ (80064b4 <UART_SetConfig+0x2e4>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800634c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006350:	2b30      	cmp	r3, #48	@ 0x30
 8006352:	d016      	beq.n	8006382 <UART_SetConfig+0x1b2>
 8006354:	2b30      	cmp	r3, #48	@ 0x30
 8006356:	d818      	bhi.n	800638a <UART_SetConfig+0x1ba>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d00a      	beq.n	8006372 <UART_SetConfig+0x1a2>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d814      	bhi.n	800638a <UART_SetConfig+0x1ba>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <UART_SetConfig+0x19a>
 8006364:	2b10      	cmp	r3, #16
 8006366:	d008      	beq.n	800637a <UART_SetConfig+0x1aa>
 8006368:	e00f      	b.n	800638a <UART_SetConfig+0x1ba>
 800636a:	2300      	movs	r3, #0
 800636c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006370:	e0ad      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006372:	2302      	movs	r3, #2
 8006374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006378:	e0a9      	b.n	80064ce <UART_SetConfig+0x2fe>
 800637a:	2304      	movs	r3, #4
 800637c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006380:	e0a5      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006382:	2308      	movs	r3, #8
 8006384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006388:	e0a1      	b.n	80064ce <UART_SetConfig+0x2fe>
 800638a:	2310      	movs	r3, #16
 800638c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006390:	e09d      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a4a      	ldr	r2, [pc, #296]	@ (80064c0 <UART_SetConfig+0x2f0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d125      	bne.n	80063e8 <UART_SetConfig+0x218>
 800639c:	4b45      	ldr	r3, [pc, #276]	@ (80064b4 <UART_SetConfig+0x2e4>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80063a8:	d016      	beq.n	80063d8 <UART_SetConfig+0x208>
 80063aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80063ac:	d818      	bhi.n	80063e0 <UART_SetConfig+0x210>
 80063ae:	2b80      	cmp	r3, #128	@ 0x80
 80063b0:	d00a      	beq.n	80063c8 <UART_SetConfig+0x1f8>
 80063b2:	2b80      	cmp	r3, #128	@ 0x80
 80063b4:	d814      	bhi.n	80063e0 <UART_SetConfig+0x210>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <UART_SetConfig+0x1f0>
 80063ba:	2b40      	cmp	r3, #64	@ 0x40
 80063bc:	d008      	beq.n	80063d0 <UART_SetConfig+0x200>
 80063be:	e00f      	b.n	80063e0 <UART_SetConfig+0x210>
 80063c0:	2300      	movs	r3, #0
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	e082      	b.n	80064ce <UART_SetConfig+0x2fe>
 80063c8:	2302      	movs	r3, #2
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ce:	e07e      	b.n	80064ce <UART_SetConfig+0x2fe>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d6:	e07a      	b.n	80064ce <UART_SetConfig+0x2fe>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063de:	e076      	b.n	80064ce <UART_SetConfig+0x2fe>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063e6:	e072      	b.n	80064ce <UART_SetConfig+0x2fe>
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a35      	ldr	r2, [pc, #212]	@ (80064c4 <UART_SetConfig+0x2f4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d12a      	bne.n	8006448 <UART_SetConfig+0x278>
 80063f2:	4b30      	ldr	r3, [pc, #192]	@ (80064b4 <UART_SetConfig+0x2e4>)
 80063f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006400:	d01a      	beq.n	8006438 <UART_SetConfig+0x268>
 8006402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006406:	d81b      	bhi.n	8006440 <UART_SetConfig+0x270>
 8006408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800640c:	d00c      	beq.n	8006428 <UART_SetConfig+0x258>
 800640e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006412:	d815      	bhi.n	8006440 <UART_SetConfig+0x270>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <UART_SetConfig+0x250>
 8006418:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800641c:	d008      	beq.n	8006430 <UART_SetConfig+0x260>
 800641e:	e00f      	b.n	8006440 <UART_SetConfig+0x270>
 8006420:	2300      	movs	r3, #0
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006426:	e052      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006428:	2302      	movs	r3, #2
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642e:	e04e      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006430:	2304      	movs	r3, #4
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006436:	e04a      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006438:	2308      	movs	r3, #8
 800643a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643e:	e046      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006440:	2310      	movs	r3, #16
 8006442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006446:	e042      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a17      	ldr	r2, [pc, #92]	@ (80064ac <UART_SetConfig+0x2dc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d13a      	bne.n	80064c8 <UART_SetConfig+0x2f8>
 8006452:	4b18      	ldr	r3, [pc, #96]	@ (80064b4 <UART_SetConfig+0x2e4>)
 8006454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800645c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006460:	d01a      	beq.n	8006498 <UART_SetConfig+0x2c8>
 8006462:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006466:	d81b      	bhi.n	80064a0 <UART_SetConfig+0x2d0>
 8006468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800646c:	d00c      	beq.n	8006488 <UART_SetConfig+0x2b8>
 800646e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006472:	d815      	bhi.n	80064a0 <UART_SetConfig+0x2d0>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <UART_SetConfig+0x2b0>
 8006478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647c:	d008      	beq.n	8006490 <UART_SetConfig+0x2c0>
 800647e:	e00f      	b.n	80064a0 <UART_SetConfig+0x2d0>
 8006480:	2300      	movs	r3, #0
 8006482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006486:	e022      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006488:	2302      	movs	r3, #2
 800648a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800648e:	e01e      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006496:	e01a      	b.n	80064ce <UART_SetConfig+0x2fe>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800649e:	e016      	b.n	80064ce <UART_SetConfig+0x2fe>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064a6:	e012      	b.n	80064ce <UART_SetConfig+0x2fe>
 80064a8:	cfff69f3 	.word	0xcfff69f3
 80064ac:	40008000 	.word	0x40008000
 80064b0:	40013800 	.word	0x40013800
 80064b4:	40021000 	.word	0x40021000
 80064b8:	40004400 	.word	0x40004400
 80064bc:	40004800 	.word	0x40004800
 80064c0:	40004c00 	.word	0x40004c00
 80064c4:	40005000 	.word	0x40005000
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4ab0      	ldr	r2, [pc, #704]	@ (8006794 <UART_SetConfig+0x5c4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	f040 809b 	bne.w	8006610 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d827      	bhi.n	8006532 <UART_SetConfig+0x362>
 80064e2:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0x318>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	08006533 	.word	0x08006533
 80064f8:	08006523 	.word	0x08006523
 80064fc:	08006533 	.word	0x08006533
 8006500:	08006533 	.word	0x08006533
 8006504:	08006533 	.word	0x08006533
 8006508:	0800652b 	.word	0x0800652b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650c:	f7fd fe24 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006510:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006512:	e014      	b.n	800653e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006514:	f7fd fe34 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800651a:	e010      	b.n	800653e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4b9e      	ldr	r3, [pc, #632]	@ (8006798 <UART_SetConfig+0x5c8>)
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006520:	e00d      	b.n	800653e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fd fd69 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8006526:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006528:	e009      	b.n	800653e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006530:	e005      	b.n	800653e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800653c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8130 	beq.w	80067a6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654a:	4a94      	ldr	r2, [pc, #592]	@ (800679c <UART_SetConfig+0x5cc>)
 800654c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006550:	461a      	mov	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	fbb3 f3f2 	udiv	r3, r3, r2
 8006558:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	429a      	cmp	r2, r3
 8006568:	d305      	bcc.n	8006576 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	429a      	cmp	r2, r3
 8006574:	d903      	bls.n	800657e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800657c:	e113      	b.n	80067a6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	2200      	movs	r2, #0
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	60fa      	str	r2, [r7, #12]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	4a84      	ldr	r2, [pc, #528]	@ (800679c <UART_SetConfig+0x5cc>)
 800658c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006590:	b29b      	uxth	r3, r3
 8006592:	2200      	movs	r2, #0
 8006594:	603b      	str	r3, [r7, #0]
 8006596:	607a      	str	r2, [r7, #4]
 8006598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065a0:	f7f9 fe48 	bl	8000234 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4610      	mov	r0, r2
 80065aa:	4619      	mov	r1, r3
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	020b      	lsls	r3, r1, #8
 80065b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065ba:	0202      	lsls	r2, r0, #8
 80065bc:	6979      	ldr	r1, [r7, #20]
 80065be:	6849      	ldr	r1, [r1, #4]
 80065c0:	0849      	lsrs	r1, r1, #1
 80065c2:	2000      	movs	r0, #0
 80065c4:	460c      	mov	r4, r1
 80065c6:	4605      	mov	r5, r0
 80065c8:	eb12 0804 	adds.w	r8, r2, r4
 80065cc:	eb43 0905 	adc.w	r9, r3, r5
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	469a      	mov	sl, r3
 80065d8:	4693      	mov	fp, r2
 80065da:	4652      	mov	r2, sl
 80065dc:	465b      	mov	r3, fp
 80065de:	4640      	mov	r0, r8
 80065e0:	4649      	mov	r1, r9
 80065e2:	f7f9 fe27 	bl	8000234 <__aeabi_uldivmod>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4613      	mov	r3, r2
 80065ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065f4:	d308      	bcc.n	8006608 <UART_SetConfig+0x438>
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065fc:	d204      	bcs.n	8006608 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a3a      	ldr	r2, [r7, #32]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e0ce      	b.n	80067a6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800660e:	e0ca      	b.n	80067a6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006618:	d166      	bne.n	80066e8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800661a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800661e:	2b08      	cmp	r3, #8
 8006620:	d827      	bhi.n	8006672 <UART_SetConfig+0x4a2>
 8006622:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <UART_SetConfig+0x458>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006655 	.word	0x08006655
 8006630:	0800665d 	.word	0x0800665d
 8006634:	08006673 	.word	0x08006673
 8006638:	08006663 	.word	0x08006663
 800663c:	08006673 	.word	0x08006673
 8006640:	08006673 	.word	0x08006673
 8006644:	08006673 	.word	0x08006673
 8006648:	0800666b 	.word	0x0800666b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800664c:	f7fd fd84 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006652:	e014      	b.n	800667e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006654:	f7fd fd94 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8006658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800665a:	e010      	b.n	800667e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800665c:	4b4e      	ldr	r3, [pc, #312]	@ (8006798 <UART_SetConfig+0x5c8>)
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006660:	e00d      	b.n	800667e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006662:	f7fd fcc9 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8006666:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006668:	e009      	b.n	800667e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006670:	e005      	b.n	800667e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800667c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 8090 	beq.w	80067a6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	4a44      	ldr	r2, [pc, #272]	@ (800679c <UART_SetConfig+0x5cc>)
 800668c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006690:	461a      	mov	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	fbb3 f3f2 	udiv	r3, r3, r2
 8006698:	005a      	lsls	r2, r3, #1
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	441a      	add	r2, r3
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2b0f      	cmp	r3, #15
 80066b0:	d916      	bls.n	80066e0 <UART_SetConfig+0x510>
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b8:	d212      	bcs.n	80066e0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ba:	6a3b      	ldr	r3, [r7, #32]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f023 030f 	bic.w	r3, r3, #15
 80066c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	8bfb      	ldrh	r3, [r7, #30]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	8bfa      	ldrh	r2, [r7, #30]
 80066dc:	60da      	str	r2, [r3, #12]
 80066de:	e062      	b.n	80067a6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066e6:	e05e      	b.n	80067a6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d828      	bhi.n	8006742 <UART_SetConfig+0x572>
 80066f0:	a201      	add	r2, pc, #4	@ (adr r2, 80066f8 <UART_SetConfig+0x528>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800671d 	.word	0x0800671d
 80066fc:	08006725 	.word	0x08006725
 8006700:	0800672d 	.word	0x0800672d
 8006704:	08006743 	.word	0x08006743
 8006708:	08006733 	.word	0x08006733
 800670c:	08006743 	.word	0x08006743
 8006710:	08006743 	.word	0x08006743
 8006714:	08006743 	.word	0x08006743
 8006718:	0800673b 	.word	0x0800673b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800671c:	f7fd fd1c 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006722:	e014      	b.n	800674e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006724:	f7fd fd2c 	bl	8004180 <HAL_RCC_GetPCLK2Freq>
 8006728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800672a:	e010      	b.n	800674e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800672c:	4b1a      	ldr	r3, [pc, #104]	@ (8006798 <UART_SetConfig+0x5c8>)
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006730:	e00d      	b.n	800674e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006732:	f7fd fc61 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8006736:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006738:	e009      	b.n	800674e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800673e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006740:	e005      	b.n	800674e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800674c:	bf00      	nop
    }

    if (pclk != 0U)
 800674e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d028      	beq.n	80067a6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006758:	4a10      	ldr	r2, [pc, #64]	@ (800679c <UART_SetConfig+0x5cc>)
 800675a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800675e:	461a      	mov	r2, r3
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	fbb3 f2f2 	udiv	r2, r3, r2
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	085b      	lsrs	r3, r3, #1
 800676c:	441a      	add	r2, r3
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	d910      	bls.n	80067a0 <UART_SetConfig+0x5d0>
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006784:	d20c      	bcs.n	80067a0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	b29a      	uxth	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60da      	str	r2, [r3, #12]
 8006790:	e009      	b.n	80067a6 <UART_SetConfig+0x5d6>
 8006792:	bf00      	nop
 8006794:	40008000 	.word	0x40008000
 8006798:	00f42400 	.word	0x00f42400
 800679c:	08008a94 	.word	0x08008a94
      }
      else
      {
        ret = HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2200      	movs	r2, #0
 80067ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2200      	movs	r2, #0
 80067c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80067c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3730      	adds	r7, #48	@ 0x30
 80067ca:	46bd      	mov	sp, r7
 80067cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080067d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	f003 0320 	and.w	r3, r3, #32
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01a      	beq.n	80068e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ce:	d10a      	bne.n	80068e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	430a      	orrs	r2, r1
 8006906:	605a      	str	r2, [r3, #4]
  }
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b098      	sub	sp, #96	@ 0x60
 8006918:	af02      	add	r7, sp, #8
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006924:	f7fa ffc2 	bl	80018ac <HAL_GetTick>
 8006928:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b08      	cmp	r3, #8
 8006936:	d12f      	bne.n	8006998 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006940:	2200      	movs	r2, #0
 8006942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f88e 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d022      	beq.n	8006998 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695a:	e853 3f00 	ldrex	r3, [r3]
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006966:	653b      	str	r3, [r7, #80]	@ 0x50
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006970:	647b      	str	r3, [r7, #68]	@ 0x44
 8006972:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006978:	e841 2300 	strex	r3, r2, [r1]
 800697c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800697e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1e6      	bne.n	8006952 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2220      	movs	r2, #32
 8006988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e063      	b.n	8006a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d149      	bne.n	8006a3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069ae:	2200      	movs	r2, #0
 80069b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f857 	bl	8006a68 <UART_WaitOnFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d03c      	beq.n	8006a3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	e853 3f00 	ldrex	r3, [r3]
 80069cc:	623b      	str	r3, [r7, #32]
   return(result);
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	461a      	mov	r2, r3
 80069dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30
 80069e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e6      	bne.n	80069c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3308      	adds	r3, #8
 80069f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f023 0301 	bic.w	r3, r3, #1
 8006a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a12:	61fa      	str	r2, [r7, #28]
 8006a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	69b9      	ldr	r1, [r7, #24]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e5      	bne.n	80069f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e012      	b.n	8006a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3758      	adds	r7, #88	@ 0x58
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	4613      	mov	r3, r2
 8006a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a78:	e04f      	b.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a80:	d04b      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a82:	f7fa ff13 	bl	80018ac <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d302      	bcc.n	8006a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e04e      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d037      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b80      	cmp	r3, #128	@ 0x80
 8006aae:	d034      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b40      	cmp	r3, #64	@ 0x40
 8006ab4:	d031      	beq.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d110      	bne.n	8006ae6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f95b 	bl	8006d88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2208      	movs	r2, #8
 8006ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e029      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006af4:	d111      	bne.n	8006b1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f941 	bl	8006d88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e00f      	b.n	8006b3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	4013      	ands	r3, r2
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	bf0c      	ite	eq
 8006b2a:	2301      	moveq	r3, #1
 8006b2c:	2300      	movne	r3, #0
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d0a0      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
	...

08006b44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b0a3      	sub	sp, #140	@ 0x8c
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	88fa      	ldrh	r2, [r7, #6]
 8006b64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b76:	d10e      	bne.n	8006b96 <UART_Start_Receive_IT+0x52>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d105      	bne.n	8006b8c <UART_Start_Receive_IT+0x48>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006b86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b8a:	e02d      	b.n	8006be8 <UART_Start_Receive_IT+0xa4>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	22ff      	movs	r2, #255	@ 0xff
 8006b90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006b94:	e028      	b.n	8006be8 <UART_Start_Receive_IT+0xa4>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10d      	bne.n	8006bba <UART_Start_Receive_IT+0x76>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <UART_Start_Receive_IT+0x6c>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	22ff      	movs	r2, #255	@ 0xff
 8006baa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bae:	e01b      	b.n	8006be8 <UART_Start_Receive_IT+0xa4>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	227f      	movs	r2, #127	@ 0x7f
 8006bb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bb8:	e016      	b.n	8006be8 <UART_Start_Receive_IT+0xa4>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bc2:	d10d      	bne.n	8006be0 <UART_Start_Receive_IT+0x9c>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d104      	bne.n	8006bd6 <UART_Start_Receive_IT+0x92>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	227f      	movs	r2, #127	@ 0x7f
 8006bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bd4:	e008      	b.n	8006be8 <UART_Start_Receive_IT+0xa4>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	223f      	movs	r2, #63	@ 0x3f
 8006bda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006bde:	e003      	b.n	8006be8 <UART_Start_Receive_IT+0xa4>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2222      	movs	r2, #34	@ 0x22
 8006bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3308      	adds	r3, #8
 8006c18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006c1c:	673a      	str	r2, [r7, #112]	@ 0x70
 8006c1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006c22:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006c2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e3      	bne.n	8006bf8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c38:	d14f      	bne.n	8006cda <UART_Start_Receive_IT+0x196>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d349      	bcc.n	8006cda <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4e:	d107      	bne.n	8006c60 <UART_Start_Receive_IT+0x11c>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a47      	ldr	r2, [pc, #284]	@ (8006d78 <UART_Start_Receive_IT+0x234>)
 8006c5c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006c5e:	e002      	b.n	8006c66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a46      	ldr	r2, [pc, #280]	@ (8006d7c <UART_Start_Receive_IT+0x238>)
 8006c64:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01a      	beq.n	8006ca4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c92:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006c96:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c98:	e841 2300 	strex	r3, r2, [r1]
 8006c9c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e4      	bne.n	8006c6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3308      	adds	r3, #8
 8006caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006cc4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006cc6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_Start_Receive_IT+0x160>
 8006cd8:	e046      	b.n	8006d68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce2:	d107      	bne.n	8006cf4 <UART_Start_Receive_IT+0x1b0>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4a24      	ldr	r2, [pc, #144]	@ (8006d80 <UART_Start_Receive_IT+0x23c>)
 8006cf0:	675a      	str	r2, [r3, #116]	@ 0x74
 8006cf2:	e002      	b.n	8006cfa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a23      	ldr	r2, [pc, #140]	@ (8006d84 <UART_Start_Receive_IT+0x240>)
 8006cf8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d019      	beq.n	8006d36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d12:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006d16:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d22:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006d26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e6      	bne.n	8006d02 <UART_Start_Receive_IT+0x1be>
 8006d34:	e018      	b.n	8006d68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	613b      	str	r3, [r7, #16]
   return(result);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f043 0320 	orr.w	r3, r3, #32
 8006d4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	69f9      	ldr	r1, [r7, #28]
 8006d5a:	6a3a      	ldr	r2, [r7, #32]
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	378c      	adds	r7, #140	@ 0x8c
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	08007525 	.word	0x08007525
 8006d7c:	080071c5 	.word	0x080071c5
 8006d80:	0800700d 	.word	0x0800700d
 8006d84:	08006e55 	.word	0x08006e55

08006d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b095      	sub	sp, #84	@ 0x54
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8006db0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006db4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e6      	bne.n	8006d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3308      	adds	r3, #8
 8006de4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1e3      	bne.n	8006dc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d118      	bne.n	8006e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f023 0310 	bic.w	r3, r3, #16
 8006e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e48:	bf00      	nop
 8006e4a:	3754      	adds	r7, #84	@ 0x54
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b09c      	sub	sp, #112	@ 0x70
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e62:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e6c:	2b22      	cmp	r3, #34	@ 0x22
 8006e6e:	f040 80be 	bne.w	8006fee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e80:	b2d9      	uxtb	r1, r3
 8006e82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8c:	400a      	ands	r2, r1
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f040 80a1 	bne.w	8006ffe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006eda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006edc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ede:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e6      	bne.n	8006ebc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3308      	adds	r3, #8
 8006ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	f023 0301 	bic.w	r3, r3, #1
 8006f04:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006f0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e5      	bne.n	8006eee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2220      	movs	r2, #32
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a33      	ldr	r2, [pc, #204]	@ (8007008 <UART_RxISR_8BIT+0x1b4>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01f      	beq.n	8006f80 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d018      	beq.n	8006f80 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f62:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d12e      	bne.n	8006fe6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fac:	61fb      	str	r3, [r7, #28]
 8006fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	69b9      	ldr	r1, [r7, #24]
 8006fb2:	69fa      	ldr	r2, [r7, #28]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e6      	bne.n	8006f8e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d103      	bne.n	8006fd6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff f8ea 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe4:	e00b      	b.n	8006ffe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7f9 fbe0 	bl	80007ac <HAL_UART_RxCpltCallback>
}
 8006fec:	e007      	b.n	8006ffe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0208 	orr.w	r2, r2, #8
 8006ffc:	619a      	str	r2, [r3, #24]
}
 8006ffe:	bf00      	nop
 8007000:	3770      	adds	r7, #112	@ 0x70
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	40008000 	.word	0x40008000

0800700c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b09c      	sub	sp, #112	@ 0x70
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800701a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007024:	2b22      	cmp	r3, #34	@ 0x22
 8007026:	f040 80be 	bne.w	80071a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007038:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800703a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800703e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007042:	4013      	ands	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007048:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704e:	1c9a      	adds	r2, r3, #2
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800706c:	b29b      	uxth	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	f040 80a1 	bne.w	80071b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007088:	667b      	str	r3, [r7, #100]	@ 0x64
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007092:	657b      	str	r3, [r7, #84]	@ 0x54
 8007094:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80070a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e6      	bne.n	8007074 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	f023 0301 	bic.w	r3, r3, #1
 80070bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	3308      	adds	r3, #8
 80070c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a33      	ldr	r2, [pc, #204]	@ (80071c0 <UART_RxISR_16BIT+0x1b4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d01f      	beq.n	8007138 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d018      	beq.n	8007138 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6a3b      	ldr	r3, [r7, #32]
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	61fb      	str	r3, [r7, #28]
   return(result);
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800711a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007126:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800712a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e6      	bne.n	8007106 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d12e      	bne.n	800719e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	60bb      	str	r3, [r7, #8]
   return(result);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f023 0310 	bic.w	r3, r3, #16
 800715a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6979      	ldr	r1, [r7, #20]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	613b      	str	r3, [r7, #16]
   return(result);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b10      	cmp	r3, #16
 8007184:	d103      	bne.n	800718e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2210      	movs	r2, #16
 800718c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7ff f80e 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800719c:	e00b      	b.n	80071b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7f9 fb04 	bl	80007ac <HAL_UART_RxCpltCallback>
}
 80071a4:	e007      	b.n	80071b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0208 	orr.w	r2, r2, #8
 80071b4:	619a      	str	r2, [r3, #24]
}
 80071b6:	bf00      	nop
 80071b8:	3770      	adds	r7, #112	@ 0x70
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40008000 	.word	0x40008000

080071c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b0ac      	sub	sp, #176	@ 0xb0
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80071fa:	2b22      	cmp	r3, #34	@ 0x22
 80071fc:	f040 8182 	bne.w	8007504 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007206:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800720a:	e125      	b.n	8007458 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007212:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007216:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800721a:	b2d9      	uxtb	r1, r3
 800721c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007220:	b2da      	uxtb	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007226:	400a      	ands	r2, r1
 8007228:	b2d2      	uxtb	r2, r2
 800722a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800723c:	b29b      	uxth	r3, r3
 800723e:	3b01      	subs	r3, #1
 8007240:	b29a      	uxth	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b00      	cmp	r3, #0
 800725c:	d053      	beq.n	8007306 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800725e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d011      	beq.n	800728e <UART_RxISR_8BIT_FIFOEN+0xca>
 800726a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800726e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00b      	beq.n	800728e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2201      	movs	r2, #1
 800727c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800728e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d011      	beq.n	80072be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800729a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2202      	movs	r2, #2
 80072ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b4:	f043 0204 	orr.w	r2, r3, #4
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d011      	beq.n	80072ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80072ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2204      	movs	r2, #4
 80072dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072e4:	f043 0202 	orr.w	r2, r3, #2
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d006      	beq.n	8007306 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f7fe ff53 	bl	80061a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	f040 80a2 	bne.w	8007458 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007336:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007338:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800733c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800733e:	e841 2300 	strex	r3, r2, [r1]
 8007342:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1e4      	bne.n	8007314 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800735a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800735c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007360:	f023 0301 	bic.w	r3, r3, #1
 8007364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3308      	adds	r3, #8
 800736e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007372:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007374:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007378:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800737a:	e841 2300 	strex	r3, r2, [r1]
 800737e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007380:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1e1      	bne.n	800734a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a5f      	ldr	r2, [pc, #380]	@ (800751c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d021      	beq.n	80073e8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01a      	beq.n	80073e8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80073c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80073c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80073d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80073d6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80073da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80073e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d130      	bne.n	8007452 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	f023 0310 	bic.w	r3, r3, #16
 800740a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007418:	643b      	str	r3, [r7, #64]	@ 0x40
 800741a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800741e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007420:	e841 2300 	strex	r3, r2, [r1]
 8007424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e4      	bne.n	80073f6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b10      	cmp	r3, #16
 8007438:	d103      	bne.n	8007442 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2210      	movs	r2, #16
 8007440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fe feb4 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
 8007450:	e002      	b.n	8007458 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7f9 f9aa 	bl	80007ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800745c:	2b00      	cmp	r3, #0
 800745e:	d006      	beq.n	800746e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007460:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	f47f aecf 	bne.w	800720c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007474:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007478:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800747c:	2b00      	cmp	r3, #0
 800747e:	d049      	beq.n	8007514 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007486:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800748a:	429a      	cmp	r2, r3
 800748c:	d242      	bcs.n	8007514 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	61fb      	str	r3, [r7, #28]
   return(result);
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80074b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e3      	bne.n	800748e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a15      	ldr	r2, [pc, #84]	@ (8007520 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80074ca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	613b      	str	r3, [r7, #16]
   return(result);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e4      	bne.n	80074cc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007502:	e007      	b.n	8007514 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f042 0208 	orr.w	r2, r2, #8
 8007512:	619a      	str	r2, [r3, #24]
}
 8007514:	bf00      	nop
 8007516:	37b0      	adds	r7, #176	@ 0xb0
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40008000 	.word	0x40008000
 8007520:	08006e55 	.word	0x08006e55

08007524 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b0ae      	sub	sp, #184	@ 0xb8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007532:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800755a:	2b22      	cmp	r3, #34	@ 0x22
 800755c:	f040 8186 	bne.w	800786c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007566:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800756a:	e129      	b.n	80077c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007572:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800757a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800757e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007582:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007586:	4013      	ands	r3, r2
 8007588:	b29a      	uxth	r2, r3
 800758a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800758e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007594:	1c9a      	adds	r2, r3, #2
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d053      	beq.n	800766a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d011      	beq.n	80075f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80075ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00b      	beq.n	80075f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2201      	movs	r2, #1
 80075e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e8:	f043 0201 	orr.w	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d011      	beq.n	8007622 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80075fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2202      	movs	r2, #2
 8007610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007618:	f043 0204 	orr.w	r2, r3, #4
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007622:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	2b00      	cmp	r3, #0
 800762c:	d011      	beq.n	8007652 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800762e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2204      	movs	r2, #4
 8007640:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007648:	f043 0202 	orr.w	r2, r3, #2
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f7fe fda1 	bl	80061a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 80a4 	bne.w	80077c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007680:	e853 3f00 	ldrex	r3, [r3]
 8007684:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800768c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800769a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800769e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e2      	bne.n	8007678 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3308      	adds	r3, #8
 80076b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c8:	f023 0301 	bic.w	r3, r3, #1
 80076cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3308      	adds	r3, #8
 80076d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80076da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80076dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80076e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80076e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1e1      	bne.n	80076b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a5f      	ldr	r2, [pc, #380]	@ (8007884 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d021      	beq.n	8007750 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01a      	beq.n	8007750 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800772a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800772e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800773c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800773e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007742:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800774a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e4      	bne.n	800771a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d130      	bne.n	80077ba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800776c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800776e:	f023 0310 	bic.w	r3, r3, #16
 8007772:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007780:	647b      	str	r3, [r7, #68]	@ 0x44
 8007782:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800778e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e4      	bne.n	800775e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f003 0310 	and.w	r3, r3, #16
 800779e:	2b10      	cmp	r3, #16
 80077a0:	d103      	bne.n	80077aa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2210      	movs	r2, #16
 80077a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fe fd00 	bl	80061b8 <HAL_UARTEx_RxEventCallback>
 80077b8:	e002      	b.n	80077c0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7f8 fff6 	bl	80007ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077c0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d006      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80077c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f47f aecb 	bne.w	800756c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077dc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d049      	beq.n	800787c <UART_RxISR_16BIT_FIFOEN+0x358>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077ee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d242      	bcs.n	800787c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	623b      	str	r3, [r7, #32]
   return(result);
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800780c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3308      	adds	r3, #8
 8007816:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800781a:	633a      	str	r2, [r7, #48]	@ 0x30
 800781c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e3      	bne.n	80077f6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a15      	ldr	r2, [pc, #84]	@ (8007888 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007832:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	e853 3f00 	ldrex	r3, [r3]
 8007840:	60fb      	str	r3, [r7, #12]
   return(result);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f043 0320 	orr.w	r3, r3, #32
 8007848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007856:	61fb      	str	r3, [r7, #28]
 8007858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	69b9      	ldr	r1, [r7, #24]
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	617b      	str	r3, [r7, #20]
   return(result);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e4      	bne.n	8007834 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800786a:	e007      	b.n	800787c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0208 	orr.w	r2, r2, #8
 800787a:	619a      	str	r2, [r3, #24]
}
 800787c:	bf00      	nop
 800787e:	37b8      	adds	r7, #184	@ 0xb8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40008000 	.word	0x40008000
 8007888:	0800700d 	.word	0x0800700d

0800788c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800789e:	2302      	movs	r3, #2
 80078a0:	e027      	b.n	80078f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2224      	movs	r2, #36	@ 0x24
 80078ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0201 	bic.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007912:	2302      	movs	r3, #2
 8007914:	e02d      	b.n	8007972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2224      	movs	r2, #36	@ 0x24
 8007922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f850 	bl	80079f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b084      	sub	sp, #16
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800798e:	2302      	movs	r3, #2
 8007990:	e02d      	b.n	80079ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2224      	movs	r2, #36	@ 0x24
 800799e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f022 0201 	bic.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f812 	bl	80079f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d108      	bne.n	8007a1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a18:	e031      	b.n	8007a7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a1e:	2308      	movs	r3, #8
 8007a20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	0e5b      	lsrs	r3, r3, #25
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	0f5b      	lsrs	r3, r3, #29
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	7b3a      	ldrb	r2, [r7, #12]
 8007a46:	4911      	ldr	r1, [pc, #68]	@ (8007a8c <UARTEx_SetNbDataToProcess+0x94>)
 8007a48:	5c8a      	ldrb	r2, [r1, r2]
 8007a4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a4e:	7b3a      	ldrb	r2, [r7, #12]
 8007a50:	490f      	ldr	r1, [pc, #60]	@ (8007a90 <UARTEx_SetNbDataToProcess+0x98>)
 8007a52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a54:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	7b7a      	ldrb	r2, [r7, #13]
 8007a64:	4909      	ldr	r1, [pc, #36]	@ (8007a8c <UARTEx_SetNbDataToProcess+0x94>)
 8007a66:	5c8a      	ldrb	r2, [r1, r2]
 8007a68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a6c:	7b7a      	ldrb	r2, [r7, #13]
 8007a6e:	4908      	ldr	r1, [pc, #32]	@ (8007a90 <UARTEx_SetNbDataToProcess+0x98>)
 8007a70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a72:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	08008aac 	.word	0x08008aac
 8007a90:	08008ab4 	.word	0x08008ab4

08007a94 <std>:
 8007a94:	2300      	movs	r3, #0
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	6083      	str	r3, [r0, #8]
 8007a9c:	8181      	strh	r1, [r0, #12]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6643      	str	r3, [r0, #100]	@ 0x64
 8007aa2:	81c2      	strh	r2, [r0, #14]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	6183      	str	r3, [r0, #24]
 8007aa8:	e9c0 3300 	strd	r3, r3, [r0]
 8007aac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ab0:	305c      	adds	r0, #92	@ 0x5c
 8007ab2:	f000 f9f9 	bl	8007ea8 <memset>
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8007aec <std+0x58>)
 8007ab8:	6224      	str	r4, [r4, #32]
 8007aba:	6263      	str	r3, [r4, #36]	@ 0x24
 8007abc:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <std+0x5c>)
 8007abe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8007af4 <std+0x60>)
 8007ac2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <std+0x64>)
 8007ac6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <std+0x68>)
 8007aca:	429c      	cmp	r4, r3
 8007acc:	d006      	beq.n	8007adc <std+0x48>
 8007ace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007ad2:	4294      	cmp	r4, r2
 8007ad4:	d002      	beq.n	8007adc <std+0x48>
 8007ad6:	33d0      	adds	r3, #208	@ 0xd0
 8007ad8:	429c      	cmp	r4, r3
 8007ada:	d105      	bne.n	8007ae8 <std+0x54>
 8007adc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ae4:	f000 ba58 	b.w	8007f98 <__retarget_lock_init_recursive>
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	bf00      	nop
 8007aec:	08007cf9 	.word	0x08007cf9
 8007af0:	08007d1b 	.word	0x08007d1b
 8007af4:	08007d53 	.word	0x08007d53
 8007af8:	08007d77 	.word	0x08007d77
 8007afc:	20000324 	.word	0x20000324

08007b00 <stdio_exit_handler>:
 8007b00:	4a02      	ldr	r2, [pc, #8]	@ (8007b0c <stdio_exit_handler+0xc>)
 8007b02:	4903      	ldr	r1, [pc, #12]	@ (8007b10 <stdio_exit_handler+0x10>)
 8007b04:	4803      	ldr	r0, [pc, #12]	@ (8007b14 <stdio_exit_handler+0x14>)
 8007b06:	f000 b869 	b.w	8007bdc <_fwalk_sglue>
 8007b0a:	bf00      	nop
 8007b0c:	20000010 	.word	0x20000010
 8007b10:	0800883d 	.word	0x0800883d
 8007b14:	20000020 	.word	0x20000020

08007b18 <cleanup_stdio>:
 8007b18:	6841      	ldr	r1, [r0, #4]
 8007b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <cleanup_stdio+0x34>)
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	4604      	mov	r4, r0
 8007b22:	d001      	beq.n	8007b28 <cleanup_stdio+0x10>
 8007b24:	f000 fe8a 	bl	800883c <_fflush_r>
 8007b28:	68a1      	ldr	r1, [r4, #8]
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <cleanup_stdio+0x38>)
 8007b2c:	4299      	cmp	r1, r3
 8007b2e:	d002      	beq.n	8007b36 <cleanup_stdio+0x1e>
 8007b30:	4620      	mov	r0, r4
 8007b32:	f000 fe83 	bl	800883c <_fflush_r>
 8007b36:	68e1      	ldr	r1, [r4, #12]
 8007b38:	4b06      	ldr	r3, [pc, #24]	@ (8007b54 <cleanup_stdio+0x3c>)
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	d004      	beq.n	8007b48 <cleanup_stdio+0x30>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b44:	f000 be7a 	b.w	800883c <_fflush_r>
 8007b48:	bd10      	pop	{r4, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000324 	.word	0x20000324
 8007b50:	2000038c 	.word	0x2000038c
 8007b54:	200003f4 	.word	0x200003f4

08007b58 <global_stdio_init.part.0>:
 8007b58:	b510      	push	{r4, lr}
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <global_stdio_init.part.0+0x30>)
 8007b5c:	2104      	movs	r1, #4
 8007b5e:	4c0b      	ldr	r4, [pc, #44]	@ (8007b8c <global_stdio_init.part.0+0x34>)
 8007b60:	4a0b      	ldr	r2, [pc, #44]	@ (8007b90 <global_stdio_init.part.0+0x38>)
 8007b62:	4620      	mov	r0, r4
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f7ff ff94 	bl	8007a94 <std>
 8007b6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b70:	2201      	movs	r2, #1
 8007b72:	2109      	movs	r1, #9
 8007b74:	f7ff ff8e 	bl	8007a94 <std>
 8007b78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	2112      	movs	r1, #18
 8007b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b84:	f7ff bf86 	b.w	8007a94 <std>
 8007b88:	2000045c 	.word	0x2000045c
 8007b8c:	20000324 	.word	0x20000324
 8007b90:	08007b01 	.word	0x08007b01

08007b94 <__sfp_lock_acquire>:
 8007b94:	4801      	ldr	r0, [pc, #4]	@ (8007b9c <__sfp_lock_acquire+0x8>)
 8007b96:	f000 ba00 	b.w	8007f9a <__retarget_lock_acquire_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	20000465 	.word	0x20000465

08007ba0 <__sfp_lock_release>:
 8007ba0:	4801      	ldr	r0, [pc, #4]	@ (8007ba8 <__sfp_lock_release+0x8>)
 8007ba2:	f000 b9fb 	b.w	8007f9c <__retarget_lock_release_recursive>
 8007ba6:	bf00      	nop
 8007ba8:	20000465 	.word	0x20000465

08007bac <__sinit>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4604      	mov	r4, r0
 8007bb0:	f7ff fff0 	bl	8007b94 <__sfp_lock_acquire>
 8007bb4:	6a23      	ldr	r3, [r4, #32]
 8007bb6:	b11b      	cbz	r3, 8007bc0 <__sinit+0x14>
 8007bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bbc:	f7ff bff0 	b.w	8007ba0 <__sfp_lock_release>
 8007bc0:	4b04      	ldr	r3, [pc, #16]	@ (8007bd4 <__sinit+0x28>)
 8007bc2:	6223      	str	r3, [r4, #32]
 8007bc4:	4b04      	ldr	r3, [pc, #16]	@ (8007bd8 <__sinit+0x2c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f5      	bne.n	8007bb8 <__sinit+0xc>
 8007bcc:	f7ff ffc4 	bl	8007b58 <global_stdio_init.part.0>
 8007bd0:	e7f2      	b.n	8007bb8 <__sinit+0xc>
 8007bd2:	bf00      	nop
 8007bd4:	08007b19 	.word	0x08007b19
 8007bd8:	2000045c 	.word	0x2000045c

08007bdc <_fwalk_sglue>:
 8007bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be0:	4607      	mov	r7, r0
 8007be2:	4688      	mov	r8, r1
 8007be4:	4614      	mov	r4, r2
 8007be6:	2600      	movs	r6, #0
 8007be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bec:	f1b9 0901 	subs.w	r9, r9, #1
 8007bf0:	d505      	bpl.n	8007bfe <_fwalk_sglue+0x22>
 8007bf2:	6824      	ldr	r4, [r4, #0]
 8007bf4:	2c00      	cmp	r4, #0
 8007bf6:	d1f7      	bne.n	8007be8 <_fwalk_sglue+0xc>
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfe:	89ab      	ldrh	r3, [r5, #12]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d907      	bls.n	8007c14 <_fwalk_sglue+0x38>
 8007c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	d003      	beq.n	8007c14 <_fwalk_sglue+0x38>
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4638      	mov	r0, r7
 8007c10:	47c0      	blx	r8
 8007c12:	4306      	orrs	r6, r0
 8007c14:	3568      	adds	r5, #104	@ 0x68
 8007c16:	e7e9      	b.n	8007bec <_fwalk_sglue+0x10>

08007c18 <iprintf>:
 8007c18:	b40f      	push	{r0, r1, r2, r3}
 8007c1a:	b507      	push	{r0, r1, r2, lr}
 8007c1c:	4906      	ldr	r1, [pc, #24]	@ (8007c38 <iprintf+0x20>)
 8007c1e:	ab04      	add	r3, sp, #16
 8007c20:	6808      	ldr	r0, [r1, #0]
 8007c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c26:	6881      	ldr	r1, [r0, #8]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f000 fadb 	bl	80081e4 <_vfiprintf_r>
 8007c2e:	b003      	add	sp, #12
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b004      	add	sp, #16
 8007c36:	4770      	bx	lr
 8007c38:	2000001c 	.word	0x2000001c

08007c3c <_puts_r>:
 8007c3c:	6a03      	ldr	r3, [r0, #32]
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	4605      	mov	r5, r0
 8007c42:	460e      	mov	r6, r1
 8007c44:	6884      	ldr	r4, [r0, #8]
 8007c46:	b90b      	cbnz	r3, 8007c4c <_puts_r+0x10>
 8007c48:	f7ff ffb0 	bl	8007bac <__sinit>
 8007c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c4e:	07db      	lsls	r3, r3, #31
 8007c50:	d405      	bmi.n	8007c5e <_puts_r+0x22>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	0598      	lsls	r0, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_puts_r+0x22>
 8007c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c5a:	f000 f99e 	bl	8007f9a <__retarget_lock_acquire_recursive>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	0719      	lsls	r1, r3, #28
 8007c62:	d502      	bpl.n	8007c6a <_puts_r+0x2e>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d135      	bne.n	8007cd6 <_puts_r+0x9a>
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	f000 f8c5 	bl	8007dfc <__swsetup_r>
 8007c72:	b380      	cbz	r0, 8007cd6 <_puts_r+0x9a>
 8007c74:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007c78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c7a:	07da      	lsls	r2, r3, #31
 8007c7c:	d405      	bmi.n	8007c8a <_puts_r+0x4e>
 8007c7e:	89a3      	ldrh	r3, [r4, #12]
 8007c80:	059b      	lsls	r3, r3, #22
 8007c82:	d402      	bmi.n	8007c8a <_puts_r+0x4e>
 8007c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c86:	f000 f989 	bl	8007f9c <__retarget_lock_release_recursive>
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	bd70      	pop	{r4, r5, r6, pc}
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	da04      	bge.n	8007c9c <_puts_r+0x60>
 8007c92:	69a2      	ldr	r2, [r4, #24]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	dc17      	bgt.n	8007cc8 <_puts_r+0x8c>
 8007c98:	290a      	cmp	r1, #10
 8007c9a:	d015      	beq.n	8007cc8 <_puts_r+0x8c>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	6022      	str	r2, [r4, #0]
 8007ca2:	7019      	strb	r1, [r3, #0]
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007caa:	3b01      	subs	r3, #1
 8007cac:	60a3      	str	r3, [r4, #8]
 8007cae:	2900      	cmp	r1, #0
 8007cb0:	d1ed      	bne.n	8007c8e <_puts_r+0x52>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da11      	bge.n	8007cda <_puts_r+0x9e>
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	210a      	movs	r1, #10
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f000 f85f 	bl	8007d7e <__swbuf_r>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d0d7      	beq.n	8007c74 <_puts_r+0x38>
 8007cc4:	250a      	movs	r5, #10
 8007cc6:	e7d7      	b.n	8007c78 <_puts_r+0x3c>
 8007cc8:	4622      	mov	r2, r4
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 f857 	bl	8007d7e <__swbuf_r>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d1e7      	bne.n	8007ca4 <_puts_r+0x68>
 8007cd4:	e7ce      	b.n	8007c74 <_puts_r+0x38>
 8007cd6:	3e01      	subs	r6, #1
 8007cd8:	e7e4      	b.n	8007ca4 <_puts_r+0x68>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	701a      	strb	r2, [r3, #0]
 8007ce4:	e7ee      	b.n	8007cc4 <_puts_r+0x88>
	...

08007ce8 <puts>:
 8007ce8:	4b02      	ldr	r3, [pc, #8]	@ (8007cf4 <puts+0xc>)
 8007cea:	4601      	mov	r1, r0
 8007cec:	6818      	ldr	r0, [r3, #0]
 8007cee:	f7ff bfa5 	b.w	8007c3c <_puts_r>
 8007cf2:	bf00      	nop
 8007cf4:	2000001c 	.word	0x2000001c

08007cf8 <__sread>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 f8fc 	bl	8007efc <_read_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	bfab      	itete	ge
 8007d08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d0c:	181b      	addge	r3, r3, r0
 8007d0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007d12:	bfac      	ite	ge
 8007d14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007d16:	81a3      	strhlt	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__swrite>:
 8007d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	461f      	mov	r7, r3
 8007d20:	898b      	ldrh	r3, [r1, #12]
 8007d22:	4605      	mov	r5, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	05db      	lsls	r3, r3, #23
 8007d28:	4616      	mov	r6, r2
 8007d2a:	d505      	bpl.n	8007d38 <__swrite+0x1e>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d34:	f000 f8d0 	bl	8007ed8 <_lseek_r>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	4632      	mov	r2, r6
 8007d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d40:	4628      	mov	r0, r5
 8007d42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d46:	81a3      	strh	r3, [r4, #12]
 8007d48:	463b      	mov	r3, r7
 8007d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	f000 b8e7 	b.w	8007f20 <_write_r>

08007d52 <__sseek>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 f8bd 	bl	8007ed8 <_lseek_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	bf15      	itete	ne
 8007d64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d6e:	81a3      	strheq	r3, [r4, #12]
 8007d70:	bf18      	it	ne
 8007d72:	81a3      	strhne	r3, [r4, #12]
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <__sclose>:
 8007d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7a:	f000 b89d 	b.w	8007eb8 <_close_r>

08007d7e <__swbuf_r>:
 8007d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d80:	460e      	mov	r6, r1
 8007d82:	4614      	mov	r4, r2
 8007d84:	4605      	mov	r5, r0
 8007d86:	b118      	cbz	r0, 8007d90 <__swbuf_r+0x12>
 8007d88:	6a03      	ldr	r3, [r0, #32]
 8007d8a:	b90b      	cbnz	r3, 8007d90 <__swbuf_r+0x12>
 8007d8c:	f7ff ff0e 	bl	8007bac <__sinit>
 8007d90:	69a3      	ldr	r3, [r4, #24]
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	89a3      	ldrh	r3, [r4, #12]
 8007d96:	071a      	lsls	r2, r3, #28
 8007d98:	d501      	bpl.n	8007d9e <__swbuf_r+0x20>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	b943      	cbnz	r3, 8007db0 <__swbuf_r+0x32>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f82b 	bl	8007dfc <__swsetup_r>
 8007da6:	b118      	cbz	r0, 8007db0 <__swbuf_r+0x32>
 8007da8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007dac:	4638      	mov	r0, r7
 8007dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	b2f6      	uxtb	r6, r6
 8007db4:	6922      	ldr	r2, [r4, #16]
 8007db6:	4637      	mov	r7, r6
 8007db8:	1a98      	subs	r0, r3, r2
 8007dba:	6963      	ldr	r3, [r4, #20]
 8007dbc:	4283      	cmp	r3, r0
 8007dbe:	dc05      	bgt.n	8007dcc <__swbuf_r+0x4e>
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f000 fd3a 	bl	800883c <_fflush_r>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d1ed      	bne.n	8007da8 <__swbuf_r+0x2a>
 8007dcc:	68a3      	ldr	r3, [r4, #8]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	60a3      	str	r3, [r4, #8]
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	1c5a      	adds	r2, r3, #1
 8007dd6:	6022      	str	r2, [r4, #0]
 8007dd8:	701e      	strb	r6, [r3, #0]
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	6962      	ldr	r2, [r4, #20]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d004      	beq.n	8007dec <__swbuf_r+0x6e>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	07db      	lsls	r3, r3, #31
 8007de6:	d5e1      	bpl.n	8007dac <__swbuf_r+0x2e>
 8007de8:	2e0a      	cmp	r6, #10
 8007dea:	d1df      	bne.n	8007dac <__swbuf_r+0x2e>
 8007dec:	4621      	mov	r1, r4
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 fd24 	bl	800883c <_fflush_r>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d0d9      	beq.n	8007dac <__swbuf_r+0x2e>
 8007df8:	e7d6      	b.n	8007da8 <__swbuf_r+0x2a>
	...

08007dfc <__swsetup_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4b29      	ldr	r3, [pc, #164]	@ (8007ea4 <__swsetup_r+0xa8>)
 8007e00:	4605      	mov	r5, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	b118      	cbz	r0, 8007e10 <__swsetup_r+0x14>
 8007e08:	6a03      	ldr	r3, [r0, #32]
 8007e0a:	b90b      	cbnz	r3, 8007e10 <__swsetup_r+0x14>
 8007e0c:	f7ff fece 	bl	8007bac <__sinit>
 8007e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e14:	0719      	lsls	r1, r3, #28
 8007e16:	d422      	bmi.n	8007e5e <__swsetup_r+0x62>
 8007e18:	06da      	lsls	r2, r3, #27
 8007e1a:	d407      	bmi.n	8007e2c <__swsetup_r+0x30>
 8007e1c:	2209      	movs	r2, #9
 8007e1e:	602a      	str	r2, [r5, #0]
 8007e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e033      	b.n	8007e94 <__swsetup_r+0x98>
 8007e2c:	0758      	lsls	r0, r3, #29
 8007e2e:	d512      	bpl.n	8007e56 <__swsetup_r+0x5a>
 8007e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e32:	b141      	cbz	r1, 8007e46 <__swsetup_r+0x4a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__swsetup_r+0x46>
 8007e3c:	4628      	mov	r0, r5
 8007e3e:	f000 f8af 	bl	8007fa0 <_free_r>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0308 	orr.w	r3, r3, #8
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	b94b      	cbnz	r3, 8007e76 <__swsetup_r+0x7a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6c:	d003      	beq.n	8007e76 <__swsetup_r+0x7a>
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	f000 fd30 	bl	80088d6 <__smakebuf_r>
 8007e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7a:	f013 0201 	ands.w	r2, r3, #1
 8007e7e:	d00a      	beq.n	8007e96 <__swsetup_r+0x9a>
 8007e80:	2200      	movs	r2, #0
 8007e82:	60a2      	str	r2, [r4, #8]
 8007e84:	6962      	ldr	r2, [r4, #20]
 8007e86:	4252      	negs	r2, r2
 8007e88:	61a2      	str	r2, [r4, #24]
 8007e8a:	6922      	ldr	r2, [r4, #16]
 8007e8c:	b942      	cbnz	r2, 8007ea0 <__swsetup_r+0xa4>
 8007e8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e92:	d1c5      	bne.n	8007e20 <__swsetup_r+0x24>
 8007e94:	bd38      	pop	{r3, r4, r5, pc}
 8007e96:	0799      	lsls	r1, r3, #30
 8007e98:	bf58      	it	pl
 8007e9a:	6962      	ldrpl	r2, [r4, #20]
 8007e9c:	60a2      	str	r2, [r4, #8]
 8007e9e:	e7f4      	b.n	8007e8a <__swsetup_r+0x8e>
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e7f7      	b.n	8007e94 <__swsetup_r+0x98>
 8007ea4:	2000001c 	.word	0x2000001c

08007ea8 <memset>:
 8007ea8:	4402      	add	r2, r0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d100      	bne.n	8007eb2 <memset+0xa>
 8007eb0:	4770      	bx	lr
 8007eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb6:	e7f9      	b.n	8007eac <memset+0x4>

08007eb8 <_close_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4d05      	ldr	r5, [pc, #20]	@ (8007ed4 <_close_r+0x1c>)
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f9 fb35 	bl	8001532 <_close>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_close_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_close_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20000460 	.word	0x20000460

08007ed8 <_lseek_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4604      	mov	r4, r0
 8007edc:	4d06      	ldr	r5, [pc, #24]	@ (8007ef8 <_lseek_r+0x20>)
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	602a      	str	r2, [r5, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f7f9 fb4a 	bl	8001580 <_lseek>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_lseek_r+0x1e>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_lseek_r+0x1e>
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	20000460 	.word	0x20000460

08007efc <_read_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4604      	mov	r4, r0
 8007f00:	4d06      	ldr	r5, [pc, #24]	@ (8007f1c <_read_r+0x20>)
 8007f02:	4608      	mov	r0, r1
 8007f04:	4611      	mov	r1, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	602a      	str	r2, [r5, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f7f9 faf4 	bl	80014f8 <_read>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_read_r+0x1e>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_read_r+0x1e>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	20000460 	.word	0x20000460

08007f20 <_write_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4604      	mov	r4, r0
 8007f24:	4d06      	ldr	r5, [pc, #24]	@ (8007f40 <_write_r+0x20>)
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7f8 fc26 	bl	8000780 <_write>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_write_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_write_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000460 	.word	0x20000460

08007f44 <__errno>:
 8007f44:	4b01      	ldr	r3, [pc, #4]	@ (8007f4c <__errno+0x8>)
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	2000001c 	.word	0x2000001c

08007f50 <__libc_init_array>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4d0d      	ldr	r5, [pc, #52]	@ (8007f88 <__libc_init_array+0x38>)
 8007f54:	2600      	movs	r6, #0
 8007f56:	4c0d      	ldr	r4, [pc, #52]	@ (8007f8c <__libc_init_array+0x3c>)
 8007f58:	1b64      	subs	r4, r4, r5
 8007f5a:	10a4      	asrs	r4, r4, #2
 8007f5c:	42a6      	cmp	r6, r4
 8007f5e:	d109      	bne.n	8007f74 <__libc_init_array+0x24>
 8007f60:	4d0b      	ldr	r5, [pc, #44]	@ (8007f90 <__libc_init_array+0x40>)
 8007f62:	2600      	movs	r6, #0
 8007f64:	4c0b      	ldr	r4, [pc, #44]	@ (8007f94 <__libc_init_array+0x44>)
 8007f66:	f000 fd33 	bl	80089d0 <_init>
 8007f6a:	1b64      	subs	r4, r4, r5
 8007f6c:	10a4      	asrs	r4, r4, #2
 8007f6e:	42a6      	cmp	r6, r4
 8007f70:	d105      	bne.n	8007f7e <__libc_init_array+0x2e>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f78:	3601      	adds	r6, #1
 8007f7a:	4798      	blx	r3
 8007f7c:	e7ee      	b.n	8007f5c <__libc_init_array+0xc>
 8007f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f82:	3601      	adds	r6, #1
 8007f84:	4798      	blx	r3
 8007f86:	e7f2      	b.n	8007f6e <__libc_init_array+0x1e>
 8007f88:	08008af8 	.word	0x08008af8
 8007f8c:	08008af8 	.word	0x08008af8
 8007f90:	08008af8 	.word	0x08008af8
 8007f94:	08008afc 	.word	0x08008afc

08007f98 <__retarget_lock_init_recursive>:
 8007f98:	4770      	bx	lr

08007f9a <__retarget_lock_acquire_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <__retarget_lock_release_recursive>:
 8007f9c:	4770      	bx	lr
	...

08007fa0 <_free_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	d041      	beq.n	800802c <_free_r+0x8c>
 8007fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fac:	1f0c      	subs	r4, r1, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfb8      	it	lt
 8007fb2:	18e4      	addlt	r4, r4, r3
 8007fb4:	f000 f8e0 	bl	8008178 <__malloc_lock>
 8007fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008030 <_free_r+0x90>)
 8007fba:	6813      	ldr	r3, [r2, #0]
 8007fbc:	b933      	cbnz	r3, 8007fcc <_free_r+0x2c>
 8007fbe:	6063      	str	r3, [r4, #4]
 8007fc0:	6014      	str	r4, [r2, #0]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc8:	f000 b8dc 	b.w	8008184 <__malloc_unlock>
 8007fcc:	42a3      	cmp	r3, r4
 8007fce:	d908      	bls.n	8007fe2 <_free_r+0x42>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	1821      	adds	r1, r4, r0
 8007fd4:	428b      	cmp	r3, r1
 8007fd6:	bf01      	itttt	eq
 8007fd8:	6819      	ldreq	r1, [r3, #0]
 8007fda:	685b      	ldreq	r3, [r3, #4]
 8007fdc:	1809      	addeq	r1, r1, r0
 8007fde:	6021      	streq	r1, [r4, #0]
 8007fe0:	e7ed      	b.n	8007fbe <_free_r+0x1e>
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	b10b      	cbz	r3, 8007fec <_free_r+0x4c>
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d9fa      	bls.n	8007fe2 <_free_r+0x42>
 8007fec:	6811      	ldr	r1, [r2, #0]
 8007fee:	1850      	adds	r0, r2, r1
 8007ff0:	42a0      	cmp	r0, r4
 8007ff2:	d10b      	bne.n	800800c <_free_r+0x6c>
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	4401      	add	r1, r0
 8007ff8:	1850      	adds	r0, r2, r1
 8007ffa:	6011      	str	r1, [r2, #0]
 8007ffc:	4283      	cmp	r3, r0
 8007ffe:	d1e0      	bne.n	8007fc2 <_free_r+0x22>
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	4408      	add	r0, r1
 8008006:	6053      	str	r3, [r2, #4]
 8008008:	6010      	str	r0, [r2, #0]
 800800a:	e7da      	b.n	8007fc2 <_free_r+0x22>
 800800c:	d902      	bls.n	8008014 <_free_r+0x74>
 800800e:	230c      	movs	r3, #12
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	e7d6      	b.n	8007fc2 <_free_r+0x22>
 8008014:	6820      	ldr	r0, [r4, #0]
 8008016:	1821      	adds	r1, r4, r0
 8008018:	428b      	cmp	r3, r1
 800801a:	bf02      	ittt	eq
 800801c:	6819      	ldreq	r1, [r3, #0]
 800801e:	685b      	ldreq	r3, [r3, #4]
 8008020:	1809      	addeq	r1, r1, r0
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	bf08      	it	eq
 8008026:	6021      	streq	r1, [r4, #0]
 8008028:	6054      	str	r4, [r2, #4]
 800802a:	e7ca      	b.n	8007fc2 <_free_r+0x22>
 800802c:	bd38      	pop	{r3, r4, r5, pc}
 800802e:	bf00      	nop
 8008030:	2000046c 	.word	0x2000046c

08008034 <sbrk_aligned>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	4e0f      	ldr	r6, [pc, #60]	@ (8008074 <sbrk_aligned+0x40>)
 8008038:	460c      	mov	r4, r1
 800803a:	4605      	mov	r5, r0
 800803c:	6831      	ldr	r1, [r6, #0]
 800803e:	b911      	cbnz	r1, 8008046 <sbrk_aligned+0x12>
 8008040:	f000 fca8 	bl	8008994 <_sbrk_r>
 8008044:	6030      	str	r0, [r6, #0]
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	f000 fca3 	bl	8008994 <_sbrk_r>
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	d103      	bne.n	800805a <sbrk_aligned+0x26>
 8008052:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008056:	4620      	mov	r0, r4
 8008058:	bd70      	pop	{r4, r5, r6, pc}
 800805a:	1cc4      	adds	r4, r0, #3
 800805c:	f024 0403 	bic.w	r4, r4, #3
 8008060:	42a0      	cmp	r0, r4
 8008062:	d0f8      	beq.n	8008056 <sbrk_aligned+0x22>
 8008064:	1a21      	subs	r1, r4, r0
 8008066:	4628      	mov	r0, r5
 8008068:	f000 fc94 	bl	8008994 <_sbrk_r>
 800806c:	3001      	adds	r0, #1
 800806e:	d1f2      	bne.n	8008056 <sbrk_aligned+0x22>
 8008070:	e7ef      	b.n	8008052 <sbrk_aligned+0x1e>
 8008072:	bf00      	nop
 8008074:	20000468 	.word	0x20000468

08008078 <_malloc_r>:
 8008078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800807c:	1ccd      	adds	r5, r1, #3
 800807e:	4606      	mov	r6, r0
 8008080:	f025 0503 	bic.w	r5, r5, #3
 8008084:	3508      	adds	r5, #8
 8008086:	2d0c      	cmp	r5, #12
 8008088:	bf38      	it	cc
 800808a:	250c      	movcc	r5, #12
 800808c:	2d00      	cmp	r5, #0
 800808e:	db01      	blt.n	8008094 <_malloc_r+0x1c>
 8008090:	42a9      	cmp	r1, r5
 8008092:	d904      	bls.n	800809e <_malloc_r+0x26>
 8008094:	230c      	movs	r3, #12
 8008096:	6033      	str	r3, [r6, #0]
 8008098:	2000      	movs	r0, #0
 800809a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800809e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008174 <_malloc_r+0xfc>
 80080a2:	f000 f869 	bl	8008178 <__malloc_lock>
 80080a6:	f8d8 3000 	ldr.w	r3, [r8]
 80080aa:	461c      	mov	r4, r3
 80080ac:	bb44      	cbnz	r4, 8008100 <_malloc_r+0x88>
 80080ae:	4629      	mov	r1, r5
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7ff ffbf 	bl	8008034 <sbrk_aligned>
 80080b6:	1c43      	adds	r3, r0, #1
 80080b8:	4604      	mov	r4, r0
 80080ba:	d158      	bne.n	800816e <_malloc_r+0xf6>
 80080bc:	f8d8 4000 	ldr.w	r4, [r8]
 80080c0:	4627      	mov	r7, r4
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	d143      	bne.n	800814e <_malloc_r+0xd6>
 80080c6:	2c00      	cmp	r4, #0
 80080c8:	d04b      	beq.n	8008162 <_malloc_r+0xea>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	4639      	mov	r1, r7
 80080ce:	4630      	mov	r0, r6
 80080d0:	eb04 0903 	add.w	r9, r4, r3
 80080d4:	f000 fc5e 	bl	8008994 <_sbrk_r>
 80080d8:	4581      	cmp	r9, r0
 80080da:	d142      	bne.n	8008162 <_malloc_r+0xea>
 80080dc:	6821      	ldr	r1, [r4, #0]
 80080de:	4630      	mov	r0, r6
 80080e0:	1a6d      	subs	r5, r5, r1
 80080e2:	4629      	mov	r1, r5
 80080e4:	f7ff ffa6 	bl	8008034 <sbrk_aligned>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d03a      	beq.n	8008162 <_malloc_r+0xea>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	442b      	add	r3, r5
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	f8d8 3000 	ldr.w	r3, [r8]
 80080f6:	685a      	ldr	r2, [r3, #4]
 80080f8:	bb62      	cbnz	r2, 8008154 <_malloc_r+0xdc>
 80080fa:	f8c8 7000 	str.w	r7, [r8]
 80080fe:	e00f      	b.n	8008120 <_malloc_r+0xa8>
 8008100:	6822      	ldr	r2, [r4, #0]
 8008102:	1b52      	subs	r2, r2, r5
 8008104:	d420      	bmi.n	8008148 <_malloc_r+0xd0>
 8008106:	2a0b      	cmp	r2, #11
 8008108:	d917      	bls.n	800813a <_malloc_r+0xc2>
 800810a:	1961      	adds	r1, r4, r5
 800810c:	42a3      	cmp	r3, r4
 800810e:	6025      	str	r5, [r4, #0]
 8008110:	bf18      	it	ne
 8008112:	6059      	strne	r1, [r3, #4]
 8008114:	6863      	ldr	r3, [r4, #4]
 8008116:	bf08      	it	eq
 8008118:	f8c8 1000 	streq.w	r1, [r8]
 800811c:	5162      	str	r2, [r4, r5]
 800811e:	604b      	str	r3, [r1, #4]
 8008120:	4630      	mov	r0, r6
 8008122:	f000 f82f 	bl	8008184 <__malloc_unlock>
 8008126:	f104 000b 	add.w	r0, r4, #11
 800812a:	1d23      	adds	r3, r4, #4
 800812c:	f020 0007 	bic.w	r0, r0, #7
 8008130:	1ac2      	subs	r2, r0, r3
 8008132:	bf1c      	itt	ne
 8008134:	1a1b      	subne	r3, r3, r0
 8008136:	50a3      	strne	r3, [r4, r2]
 8008138:	e7af      	b.n	800809a <_malloc_r+0x22>
 800813a:	6862      	ldr	r2, [r4, #4]
 800813c:	42a3      	cmp	r3, r4
 800813e:	bf0c      	ite	eq
 8008140:	f8c8 2000 	streq.w	r2, [r8]
 8008144:	605a      	strne	r2, [r3, #4]
 8008146:	e7eb      	b.n	8008120 <_malloc_r+0xa8>
 8008148:	4623      	mov	r3, r4
 800814a:	6864      	ldr	r4, [r4, #4]
 800814c:	e7ae      	b.n	80080ac <_malloc_r+0x34>
 800814e:	463c      	mov	r4, r7
 8008150:	687f      	ldr	r7, [r7, #4]
 8008152:	e7b6      	b.n	80080c2 <_malloc_r+0x4a>
 8008154:	461a      	mov	r2, r3
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	42a3      	cmp	r3, r4
 800815a:	d1fb      	bne.n	8008154 <_malloc_r+0xdc>
 800815c:	2300      	movs	r3, #0
 800815e:	6053      	str	r3, [r2, #4]
 8008160:	e7de      	b.n	8008120 <_malloc_r+0xa8>
 8008162:	230c      	movs	r3, #12
 8008164:	4630      	mov	r0, r6
 8008166:	6033      	str	r3, [r6, #0]
 8008168:	f000 f80c 	bl	8008184 <__malloc_unlock>
 800816c:	e794      	b.n	8008098 <_malloc_r+0x20>
 800816e:	6005      	str	r5, [r0, #0]
 8008170:	e7d6      	b.n	8008120 <_malloc_r+0xa8>
 8008172:	bf00      	nop
 8008174:	2000046c 	.word	0x2000046c

08008178 <__malloc_lock>:
 8008178:	4801      	ldr	r0, [pc, #4]	@ (8008180 <__malloc_lock+0x8>)
 800817a:	f7ff bf0e 	b.w	8007f9a <__retarget_lock_acquire_recursive>
 800817e:	bf00      	nop
 8008180:	20000464 	.word	0x20000464

08008184 <__malloc_unlock>:
 8008184:	4801      	ldr	r0, [pc, #4]	@ (800818c <__malloc_unlock+0x8>)
 8008186:	f7ff bf09 	b.w	8007f9c <__retarget_lock_release_recursive>
 800818a:	bf00      	nop
 800818c:	20000464 	.word	0x20000464

08008190 <__sfputc_r>:
 8008190:	6893      	ldr	r3, [r2, #8]
 8008192:	3b01      	subs	r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	b410      	push	{r4}
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	da08      	bge.n	80081ae <__sfputc_r+0x1e>
 800819c:	6994      	ldr	r4, [r2, #24]
 800819e:	42a3      	cmp	r3, r4
 80081a0:	db01      	blt.n	80081a6 <__sfputc_r+0x16>
 80081a2:	290a      	cmp	r1, #10
 80081a4:	d103      	bne.n	80081ae <__sfputc_r+0x1e>
 80081a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081aa:	f7ff bde8 	b.w	8007d7e <__swbuf_r>
 80081ae:	6813      	ldr	r3, [r2, #0]
 80081b0:	1c58      	adds	r0, r3, #1
 80081b2:	6010      	str	r0, [r2, #0]
 80081b4:	4608      	mov	r0, r1
 80081b6:	7019      	strb	r1, [r3, #0]
 80081b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081bc:	4770      	bx	lr

080081be <__sfputs_r>:
 80081be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c0:	4606      	mov	r6, r0
 80081c2:	460f      	mov	r7, r1
 80081c4:	4614      	mov	r4, r2
 80081c6:	18d5      	adds	r5, r2, r3
 80081c8:	42ac      	cmp	r4, r5
 80081ca:	d101      	bne.n	80081d0 <__sfputs_r+0x12>
 80081cc:	2000      	movs	r0, #0
 80081ce:	e007      	b.n	80081e0 <__sfputs_r+0x22>
 80081d0:	463a      	mov	r2, r7
 80081d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ffda 	bl	8008190 <__sfputc_r>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d1f3      	bne.n	80081c8 <__sfputs_r+0xa>
 80081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081e4 <_vfiprintf_r>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	460d      	mov	r5, r1
 80081ea:	b09d      	sub	sp, #116	@ 0x74
 80081ec:	4614      	mov	r4, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	4606      	mov	r6, r0
 80081f2:	b118      	cbz	r0, 80081fc <_vfiprintf_r+0x18>
 80081f4:	6a03      	ldr	r3, [r0, #32]
 80081f6:	b90b      	cbnz	r3, 80081fc <_vfiprintf_r+0x18>
 80081f8:	f7ff fcd8 	bl	8007bac <__sinit>
 80081fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fe:	07d9      	lsls	r1, r3, #31
 8008200:	d405      	bmi.n	800820e <_vfiprintf_r+0x2a>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	059a      	lsls	r2, r3, #22
 8008206:	d402      	bmi.n	800820e <_vfiprintf_r+0x2a>
 8008208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800820a:	f7ff fec6 	bl	8007f9a <__retarget_lock_acquire_recursive>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	071b      	lsls	r3, r3, #28
 8008212:	d501      	bpl.n	8008218 <_vfiprintf_r+0x34>
 8008214:	692b      	ldr	r3, [r5, #16]
 8008216:	b99b      	cbnz	r3, 8008240 <_vfiprintf_r+0x5c>
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff fdee 	bl	8007dfc <__swsetup_r>
 8008220:	b170      	cbz	r0, 8008240 <_vfiprintf_r+0x5c>
 8008222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008224:	07dc      	lsls	r4, r3, #31
 8008226:	d504      	bpl.n	8008232 <_vfiprintf_r+0x4e>
 8008228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800822c:	b01d      	add	sp, #116	@ 0x74
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	0598      	lsls	r0, r3, #22
 8008236:	d4f7      	bmi.n	8008228 <_vfiprintf_r+0x44>
 8008238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800823a:	f7ff feaf 	bl	8007f9c <__retarget_lock_release_recursive>
 800823e:	e7f3      	b.n	8008228 <_vfiprintf_r+0x44>
 8008240:	2300      	movs	r3, #0
 8008242:	f8cd 800c 	str.w	r8, [sp, #12]
 8008246:	f04f 0901 	mov.w	r9, #1
 800824a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8008400 <_vfiprintf_r+0x21c>
 800824e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008250:	2320      	movs	r3, #32
 8008252:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008256:	2330      	movs	r3, #48	@ 0x30
 8008258:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800825c:	4623      	mov	r3, r4
 800825e:	469a      	mov	sl, r3
 8008260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008264:	b10a      	cbz	r2, 800826a <_vfiprintf_r+0x86>
 8008266:	2a25      	cmp	r2, #37	@ 0x25
 8008268:	d1f9      	bne.n	800825e <_vfiprintf_r+0x7a>
 800826a:	ebba 0b04 	subs.w	fp, sl, r4
 800826e:	d00b      	beq.n	8008288 <_vfiprintf_r+0xa4>
 8008270:	465b      	mov	r3, fp
 8008272:	4622      	mov	r2, r4
 8008274:	4629      	mov	r1, r5
 8008276:	4630      	mov	r0, r6
 8008278:	f7ff ffa1 	bl	80081be <__sfputs_r>
 800827c:	3001      	adds	r0, #1
 800827e:	f000 80a7 	beq.w	80083d0 <_vfiprintf_r+0x1ec>
 8008282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008284:	445a      	add	r2, fp
 8008286:	9209      	str	r2, [sp, #36]	@ 0x24
 8008288:	f89a 3000 	ldrb.w	r3, [sl]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 809f 	beq.w	80083d0 <_vfiprintf_r+0x1ec>
 8008292:	2300      	movs	r3, #0
 8008294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008298:	f10a 0a01 	add.w	sl, sl, #1
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80082a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082aa:	4654      	mov	r4, sl
 80082ac:	2205      	movs	r2, #5
 80082ae:	4854      	ldr	r0, [pc, #336]	@ (8008400 <_vfiprintf_r+0x21c>)
 80082b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082b4:	f000 fb7e 	bl	80089b4 <memchr>
 80082b8:	9a04      	ldr	r2, [sp, #16]
 80082ba:	b9d8      	cbnz	r0, 80082f4 <_vfiprintf_r+0x110>
 80082bc:	06d1      	lsls	r1, r2, #27
 80082be:	bf44      	itt	mi
 80082c0:	2320      	movmi	r3, #32
 80082c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082c6:	0713      	lsls	r3, r2, #28
 80082c8:	bf44      	itt	mi
 80082ca:	232b      	movmi	r3, #43	@ 0x2b
 80082cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082d0:	f89a 3000 	ldrb.w	r3, [sl]
 80082d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d6:	d015      	beq.n	8008304 <_vfiprintf_r+0x120>
 80082d8:	9a07      	ldr	r2, [sp, #28]
 80082da:	4654      	mov	r4, sl
 80082dc:	2000      	movs	r0, #0
 80082de:	f04f 0c0a 	mov.w	ip, #10
 80082e2:	4621      	mov	r1, r4
 80082e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082e8:	3b30      	subs	r3, #48	@ 0x30
 80082ea:	2b09      	cmp	r3, #9
 80082ec:	d94b      	bls.n	8008386 <_vfiprintf_r+0x1a2>
 80082ee:	b1b0      	cbz	r0, 800831e <_vfiprintf_r+0x13a>
 80082f0:	9207      	str	r2, [sp, #28]
 80082f2:	e014      	b.n	800831e <_vfiprintf_r+0x13a>
 80082f4:	eba0 0308 	sub.w	r3, r0, r8
 80082f8:	46a2      	mov	sl, r4
 80082fa:	fa09 f303 	lsl.w	r3, r9, r3
 80082fe:	4313      	orrs	r3, r2
 8008300:	9304      	str	r3, [sp, #16]
 8008302:	e7d2      	b.n	80082aa <_vfiprintf_r+0xc6>
 8008304:	9b03      	ldr	r3, [sp, #12]
 8008306:	1d19      	adds	r1, r3, #4
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	9103      	str	r1, [sp, #12]
 800830e:	bfbb      	ittet	lt
 8008310:	425b      	neglt	r3, r3
 8008312:	f042 0202 	orrlt.w	r2, r2, #2
 8008316:	9307      	strge	r3, [sp, #28]
 8008318:	9307      	strlt	r3, [sp, #28]
 800831a:	bfb8      	it	lt
 800831c:	9204      	strlt	r2, [sp, #16]
 800831e:	7823      	ldrb	r3, [r4, #0]
 8008320:	2b2e      	cmp	r3, #46	@ 0x2e
 8008322:	d10a      	bne.n	800833a <_vfiprintf_r+0x156>
 8008324:	7863      	ldrb	r3, [r4, #1]
 8008326:	2b2a      	cmp	r3, #42	@ 0x2a
 8008328:	d132      	bne.n	8008390 <_vfiprintf_r+0x1ac>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3402      	adds	r4, #2
 800832e:	1d1a      	adds	r2, r3, #4
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008336:	9203      	str	r2, [sp, #12]
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008410 <_vfiprintf_r+0x22c>
 800833e:	2203      	movs	r2, #3
 8008340:	7821      	ldrb	r1, [r4, #0]
 8008342:	4650      	mov	r0, sl
 8008344:	f000 fb36 	bl	80089b4 <memchr>
 8008348:	b138      	cbz	r0, 800835a <_vfiprintf_r+0x176>
 800834a:	eba0 000a 	sub.w	r0, r0, sl
 800834e:	2240      	movs	r2, #64	@ 0x40
 8008350:	9b04      	ldr	r3, [sp, #16]
 8008352:	3401      	adds	r4, #1
 8008354:	4082      	lsls	r2, r0
 8008356:	4313      	orrs	r3, r2
 8008358:	9304      	str	r3, [sp, #16]
 800835a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800835e:	2206      	movs	r2, #6
 8008360:	4828      	ldr	r0, [pc, #160]	@ (8008404 <_vfiprintf_r+0x220>)
 8008362:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008366:	f000 fb25 	bl	80089b4 <memchr>
 800836a:	2800      	cmp	r0, #0
 800836c:	d03f      	beq.n	80083ee <_vfiprintf_r+0x20a>
 800836e:	4b26      	ldr	r3, [pc, #152]	@ (8008408 <_vfiprintf_r+0x224>)
 8008370:	bb1b      	cbnz	r3, 80083ba <_vfiprintf_r+0x1d6>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	3307      	adds	r3, #7
 8008376:	f023 0307 	bic.w	r3, r3, #7
 800837a:	3308      	adds	r3, #8
 800837c:	9303      	str	r3, [sp, #12]
 800837e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008380:	443b      	add	r3, r7
 8008382:	9309      	str	r3, [sp, #36]	@ 0x24
 8008384:	e76a      	b.n	800825c <_vfiprintf_r+0x78>
 8008386:	fb0c 3202 	mla	r2, ip, r2, r3
 800838a:	460c      	mov	r4, r1
 800838c:	2001      	movs	r0, #1
 800838e:	e7a8      	b.n	80082e2 <_vfiprintf_r+0xfe>
 8008390:	2300      	movs	r3, #0
 8008392:	3401      	adds	r4, #1
 8008394:	f04f 0c0a 	mov.w	ip, #10
 8008398:	4619      	mov	r1, r3
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	4620      	mov	r0, r4
 800839e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083a2:	3a30      	subs	r2, #48	@ 0x30
 80083a4:	2a09      	cmp	r2, #9
 80083a6:	d903      	bls.n	80083b0 <_vfiprintf_r+0x1cc>
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0c6      	beq.n	800833a <_vfiprintf_r+0x156>
 80083ac:	9105      	str	r1, [sp, #20]
 80083ae:	e7c4      	b.n	800833a <_vfiprintf_r+0x156>
 80083b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083b4:	4604      	mov	r4, r0
 80083b6:	2301      	movs	r3, #1
 80083b8:	e7f0      	b.n	800839c <_vfiprintf_r+0x1b8>
 80083ba:	ab03      	add	r3, sp, #12
 80083bc:	462a      	mov	r2, r5
 80083be:	a904      	add	r1, sp, #16
 80083c0:	4630      	mov	r0, r6
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4b11      	ldr	r3, [pc, #68]	@ (800840c <_vfiprintf_r+0x228>)
 80083c6:	f3af 8000 	nop.w
 80083ca:	4607      	mov	r7, r0
 80083cc:	1c78      	adds	r0, r7, #1
 80083ce:	d1d6      	bne.n	800837e <_vfiprintf_r+0x19a>
 80083d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083d2:	07d9      	lsls	r1, r3, #31
 80083d4:	d405      	bmi.n	80083e2 <_vfiprintf_r+0x1fe>
 80083d6:	89ab      	ldrh	r3, [r5, #12]
 80083d8:	059a      	lsls	r2, r3, #22
 80083da:	d402      	bmi.n	80083e2 <_vfiprintf_r+0x1fe>
 80083dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083de:	f7ff fddd 	bl	8007f9c <__retarget_lock_release_recursive>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	065b      	lsls	r3, r3, #25
 80083e6:	f53f af1f 	bmi.w	8008228 <_vfiprintf_r+0x44>
 80083ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083ec:	e71e      	b.n	800822c <_vfiprintf_r+0x48>
 80083ee:	ab03      	add	r3, sp, #12
 80083f0:	462a      	mov	r2, r5
 80083f2:	a904      	add	r1, sp, #16
 80083f4:	4630      	mov	r0, r6
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	4b04      	ldr	r3, [pc, #16]	@ (800840c <_vfiprintf_r+0x228>)
 80083fa:	f000 f87d 	bl	80084f8 <_printf_i>
 80083fe:	e7e4      	b.n	80083ca <_vfiprintf_r+0x1e6>
 8008400:	08008abc 	.word	0x08008abc
 8008404:	08008ac6 	.word	0x08008ac6
 8008408:	00000000 	.word	0x00000000
 800840c:	080081bf 	.word	0x080081bf
 8008410:	08008ac2 	.word	0x08008ac2

08008414 <_printf_common>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	4616      	mov	r6, r2
 800841a:	4698      	mov	r8, r3
 800841c:	688a      	ldr	r2, [r1, #8]
 800841e:	4607      	mov	r7, r0
 8008420:	690b      	ldr	r3, [r1, #16]
 8008422:	460c      	mov	r4, r1
 8008424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008428:	4293      	cmp	r3, r2
 800842a:	bfb8      	it	lt
 800842c:	4613      	movlt	r3, r2
 800842e:	6033      	str	r3, [r6, #0]
 8008430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008434:	b10a      	cbz	r2, 800843a <_printf_common+0x26>
 8008436:	3301      	adds	r3, #1
 8008438:	6033      	str	r3, [r6, #0]
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	0699      	lsls	r1, r3, #26
 800843e:	bf42      	ittt	mi
 8008440:	6833      	ldrmi	r3, [r6, #0]
 8008442:	3302      	addmi	r3, #2
 8008444:	6033      	strmi	r3, [r6, #0]
 8008446:	6825      	ldr	r5, [r4, #0]
 8008448:	f015 0506 	ands.w	r5, r5, #6
 800844c:	d106      	bne.n	800845c <_printf_common+0x48>
 800844e:	f104 0a19 	add.w	sl, r4, #25
 8008452:	68e3      	ldr	r3, [r4, #12]
 8008454:	6832      	ldr	r2, [r6, #0]
 8008456:	1a9b      	subs	r3, r3, r2
 8008458:	42ab      	cmp	r3, r5
 800845a:	dc2b      	bgt.n	80084b4 <_printf_common+0xa0>
 800845c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	3b00      	subs	r3, #0
 8008464:	bf18      	it	ne
 8008466:	2301      	movne	r3, #1
 8008468:	0692      	lsls	r2, r2, #26
 800846a:	d430      	bmi.n	80084ce <_printf_common+0xba>
 800846c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008470:	4641      	mov	r1, r8
 8008472:	4638      	mov	r0, r7
 8008474:	47c8      	blx	r9
 8008476:	3001      	adds	r0, #1
 8008478:	d023      	beq.n	80084c2 <_printf_common+0xae>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	341a      	adds	r4, #26
 800847e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008482:	f003 0306 	and.w	r3, r3, #6
 8008486:	2b04      	cmp	r3, #4
 8008488:	bf0a      	itet	eq
 800848a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800848e:	2500      	movne	r5, #0
 8008490:	6833      	ldreq	r3, [r6, #0]
 8008492:	f04f 0600 	mov.w	r6, #0
 8008496:	bf08      	it	eq
 8008498:	1aed      	subeq	r5, r5, r3
 800849a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800849e:	bf08      	it	eq
 80084a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a4:	4293      	cmp	r3, r2
 80084a6:	bfc4      	itt	gt
 80084a8:	1a9b      	subgt	r3, r3, r2
 80084aa:	18ed      	addgt	r5, r5, r3
 80084ac:	42b5      	cmp	r5, r6
 80084ae:	d11a      	bne.n	80084e6 <_printf_common+0xd2>
 80084b0:	2000      	movs	r0, #0
 80084b2:	e008      	b.n	80084c6 <_printf_common+0xb2>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4652      	mov	r2, sl
 80084b8:	4641      	mov	r1, r8
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c8      	blx	r9
 80084be:	3001      	adds	r0, #1
 80084c0:	d103      	bne.n	80084ca <_printf_common+0xb6>
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	3501      	adds	r5, #1
 80084cc:	e7c1      	b.n	8008452 <_printf_common+0x3e>
 80084ce:	18e1      	adds	r1, r4, r3
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	2030      	movs	r0, #48	@ 0x30
 80084d4:	3302      	adds	r3, #2
 80084d6:	4422      	add	r2, r4
 80084d8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084e4:	e7c2      	b.n	800846c <_printf_common+0x58>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4622      	mov	r2, r4
 80084ea:	4641      	mov	r1, r8
 80084ec:	4638      	mov	r0, r7
 80084ee:	47c8      	blx	r9
 80084f0:	3001      	adds	r0, #1
 80084f2:	d0e6      	beq.n	80084c2 <_printf_common+0xae>
 80084f4:	3601      	adds	r6, #1
 80084f6:	e7d9      	b.n	80084ac <_printf_common+0x98>

080084f8 <_printf_i>:
 80084f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084fc:	7e0f      	ldrb	r7, [r1, #24]
 80084fe:	4691      	mov	r9, r2
 8008500:	4680      	mov	r8, r0
 8008502:	460c      	mov	r4, r1
 8008504:	2f78      	cmp	r7, #120	@ 0x78
 8008506:	469a      	mov	sl, r3
 8008508:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800850a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800850e:	d807      	bhi.n	8008520 <_printf_i+0x28>
 8008510:	2f62      	cmp	r7, #98	@ 0x62
 8008512:	d80a      	bhi.n	800852a <_printf_i+0x32>
 8008514:	2f00      	cmp	r7, #0
 8008516:	f000 80d1 	beq.w	80086bc <_printf_i+0x1c4>
 800851a:	2f58      	cmp	r7, #88	@ 0x58
 800851c:	f000 80b8 	beq.w	8008690 <_printf_i+0x198>
 8008520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008528:	e03a      	b.n	80085a0 <_printf_i+0xa8>
 800852a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800852e:	2b15      	cmp	r3, #21
 8008530:	d8f6      	bhi.n	8008520 <_printf_i+0x28>
 8008532:	a101      	add	r1, pc, #4	@ (adr r1, 8008538 <_printf_i+0x40>)
 8008534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008538:	08008591 	.word	0x08008591
 800853c:	080085a5 	.word	0x080085a5
 8008540:	08008521 	.word	0x08008521
 8008544:	08008521 	.word	0x08008521
 8008548:	08008521 	.word	0x08008521
 800854c:	08008521 	.word	0x08008521
 8008550:	080085a5 	.word	0x080085a5
 8008554:	08008521 	.word	0x08008521
 8008558:	08008521 	.word	0x08008521
 800855c:	08008521 	.word	0x08008521
 8008560:	08008521 	.word	0x08008521
 8008564:	080086a3 	.word	0x080086a3
 8008568:	080085cf 	.word	0x080085cf
 800856c:	0800865d 	.word	0x0800865d
 8008570:	08008521 	.word	0x08008521
 8008574:	08008521 	.word	0x08008521
 8008578:	080086c5 	.word	0x080086c5
 800857c:	08008521 	.word	0x08008521
 8008580:	080085cf 	.word	0x080085cf
 8008584:	08008521 	.word	0x08008521
 8008588:	08008521 	.word	0x08008521
 800858c:	08008665 	.word	0x08008665
 8008590:	6833      	ldr	r3, [r6, #0]
 8008592:	1d1a      	adds	r2, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6032      	str	r2, [r6, #0]
 8008598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800859c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085a0:	2301      	movs	r3, #1
 80085a2:	e09c      	b.n	80086de <_printf_i+0x1e6>
 80085a4:	6833      	ldr	r3, [r6, #0]
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	1d19      	adds	r1, r3, #4
 80085aa:	6031      	str	r1, [r6, #0]
 80085ac:	0606      	lsls	r6, r0, #24
 80085ae:	d501      	bpl.n	80085b4 <_printf_i+0xbc>
 80085b0:	681d      	ldr	r5, [r3, #0]
 80085b2:	e003      	b.n	80085bc <_printf_i+0xc4>
 80085b4:	0645      	lsls	r5, r0, #25
 80085b6:	d5fb      	bpl.n	80085b0 <_printf_i+0xb8>
 80085b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085bc:	2d00      	cmp	r5, #0
 80085be:	da03      	bge.n	80085c8 <_printf_i+0xd0>
 80085c0:	232d      	movs	r3, #45	@ 0x2d
 80085c2:	426d      	negs	r5, r5
 80085c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c8:	4858      	ldr	r0, [pc, #352]	@ (800872c <_printf_i+0x234>)
 80085ca:	230a      	movs	r3, #10
 80085cc:	e011      	b.n	80085f2 <_printf_i+0xfa>
 80085ce:	6821      	ldr	r1, [r4, #0]
 80085d0:	6833      	ldr	r3, [r6, #0]
 80085d2:	0608      	lsls	r0, r1, #24
 80085d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085d8:	d402      	bmi.n	80085e0 <_printf_i+0xe8>
 80085da:	0649      	lsls	r1, r1, #25
 80085dc:	bf48      	it	mi
 80085de:	b2ad      	uxthmi	r5, r5
 80085e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085e2:	6033      	str	r3, [r6, #0]
 80085e4:	4851      	ldr	r0, [pc, #324]	@ (800872c <_printf_i+0x234>)
 80085e6:	bf14      	ite	ne
 80085e8:	230a      	movne	r3, #10
 80085ea:	2308      	moveq	r3, #8
 80085ec:	2100      	movs	r1, #0
 80085ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085f2:	6866      	ldr	r6, [r4, #4]
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	60a6      	str	r6, [r4, #8]
 80085f8:	db05      	blt.n	8008606 <_printf_i+0x10e>
 80085fa:	6821      	ldr	r1, [r4, #0]
 80085fc:	432e      	orrs	r6, r5
 80085fe:	f021 0104 	bic.w	r1, r1, #4
 8008602:	6021      	str	r1, [r4, #0]
 8008604:	d04b      	beq.n	800869e <_printf_i+0x1a6>
 8008606:	4616      	mov	r6, r2
 8008608:	fbb5 f1f3 	udiv	r1, r5, r3
 800860c:	fb03 5711 	mls	r7, r3, r1, r5
 8008610:	5dc7      	ldrb	r7, [r0, r7]
 8008612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008616:	462f      	mov	r7, r5
 8008618:	460d      	mov	r5, r1
 800861a:	42bb      	cmp	r3, r7
 800861c:	d9f4      	bls.n	8008608 <_printf_i+0x110>
 800861e:	2b08      	cmp	r3, #8
 8008620:	d10b      	bne.n	800863a <_printf_i+0x142>
 8008622:	6823      	ldr	r3, [r4, #0]
 8008624:	07df      	lsls	r7, r3, #31
 8008626:	d508      	bpl.n	800863a <_printf_i+0x142>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	6861      	ldr	r1, [r4, #4]
 800862c:	4299      	cmp	r1, r3
 800862e:	bfde      	ittt	le
 8008630:	2330      	movle	r3, #48	@ 0x30
 8008632:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008636:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800863a:	1b92      	subs	r2, r2, r6
 800863c:	6122      	str	r2, [r4, #16]
 800863e:	464b      	mov	r3, r9
 8008640:	aa03      	add	r2, sp, #12
 8008642:	4621      	mov	r1, r4
 8008644:	4640      	mov	r0, r8
 8008646:	f8cd a000 	str.w	sl, [sp]
 800864a:	f7ff fee3 	bl	8008414 <_printf_common>
 800864e:	3001      	adds	r0, #1
 8008650:	d14a      	bne.n	80086e8 <_printf_i+0x1f0>
 8008652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008656:	b004      	add	sp, #16
 8008658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	f043 0320 	orr.w	r3, r3, #32
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	2778      	movs	r7, #120	@ 0x78
 8008666:	4832      	ldr	r0, [pc, #200]	@ (8008730 <_printf_i+0x238>)
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800866e:	061f      	lsls	r7, r3, #24
 8008670:	6831      	ldr	r1, [r6, #0]
 8008672:	f851 5b04 	ldr.w	r5, [r1], #4
 8008676:	d402      	bmi.n	800867e <_printf_i+0x186>
 8008678:	065f      	lsls	r7, r3, #25
 800867a:	bf48      	it	mi
 800867c:	b2ad      	uxthmi	r5, r5
 800867e:	6031      	str	r1, [r6, #0]
 8008680:	07d9      	lsls	r1, r3, #31
 8008682:	bf44      	itt	mi
 8008684:	f043 0320 	orrmi.w	r3, r3, #32
 8008688:	6023      	strmi	r3, [r4, #0]
 800868a:	b11d      	cbz	r5, 8008694 <_printf_i+0x19c>
 800868c:	2310      	movs	r3, #16
 800868e:	e7ad      	b.n	80085ec <_printf_i+0xf4>
 8008690:	4826      	ldr	r0, [pc, #152]	@ (800872c <_printf_i+0x234>)
 8008692:	e7e9      	b.n	8008668 <_printf_i+0x170>
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	f023 0320 	bic.w	r3, r3, #32
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	e7f6      	b.n	800868c <_printf_i+0x194>
 800869e:	4616      	mov	r6, r2
 80086a0:	e7bd      	b.n	800861e <_printf_i+0x126>
 80086a2:	6833      	ldr	r3, [r6, #0]
 80086a4:	6825      	ldr	r5, [r4, #0]
 80086a6:	1d18      	adds	r0, r3, #4
 80086a8:	6961      	ldr	r1, [r4, #20]
 80086aa:	6030      	str	r0, [r6, #0]
 80086ac:	062e      	lsls	r6, r5, #24
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	d501      	bpl.n	80086b6 <_printf_i+0x1be>
 80086b2:	6019      	str	r1, [r3, #0]
 80086b4:	e002      	b.n	80086bc <_printf_i+0x1c4>
 80086b6:	0668      	lsls	r0, r5, #25
 80086b8:	d5fb      	bpl.n	80086b2 <_printf_i+0x1ba>
 80086ba:	8019      	strh	r1, [r3, #0]
 80086bc:	2300      	movs	r3, #0
 80086be:	4616      	mov	r6, r2
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	e7bc      	b.n	800863e <_printf_i+0x146>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	2100      	movs	r1, #0
 80086c8:	1d1a      	adds	r2, r3, #4
 80086ca:	6032      	str	r2, [r6, #0]
 80086cc:	681e      	ldr	r6, [r3, #0]
 80086ce:	6862      	ldr	r2, [r4, #4]
 80086d0:	4630      	mov	r0, r6
 80086d2:	f000 f96f 	bl	80089b4 <memchr>
 80086d6:	b108      	cbz	r0, 80086dc <_printf_i+0x1e4>
 80086d8:	1b80      	subs	r0, r0, r6
 80086da:	6060      	str	r0, [r4, #4]
 80086dc:	6863      	ldr	r3, [r4, #4]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	2300      	movs	r3, #0
 80086e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e6:	e7aa      	b.n	800863e <_printf_i+0x146>
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	4632      	mov	r2, r6
 80086ec:	4649      	mov	r1, r9
 80086ee:	4640      	mov	r0, r8
 80086f0:	47d0      	blx	sl
 80086f2:	3001      	adds	r0, #1
 80086f4:	d0ad      	beq.n	8008652 <_printf_i+0x15a>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	079b      	lsls	r3, r3, #30
 80086fa:	d413      	bmi.n	8008724 <_printf_i+0x22c>
 80086fc:	68e0      	ldr	r0, [r4, #12]
 80086fe:	9b03      	ldr	r3, [sp, #12]
 8008700:	4298      	cmp	r0, r3
 8008702:	bfb8      	it	lt
 8008704:	4618      	movlt	r0, r3
 8008706:	e7a6      	b.n	8008656 <_printf_i+0x15e>
 8008708:	2301      	movs	r3, #1
 800870a:	4632      	mov	r2, r6
 800870c:	4649      	mov	r1, r9
 800870e:	4640      	mov	r0, r8
 8008710:	47d0      	blx	sl
 8008712:	3001      	adds	r0, #1
 8008714:	d09d      	beq.n	8008652 <_printf_i+0x15a>
 8008716:	3501      	adds	r5, #1
 8008718:	68e3      	ldr	r3, [r4, #12]
 800871a:	9903      	ldr	r1, [sp, #12]
 800871c:	1a5b      	subs	r3, r3, r1
 800871e:	42ab      	cmp	r3, r5
 8008720:	dcf2      	bgt.n	8008708 <_printf_i+0x210>
 8008722:	e7eb      	b.n	80086fc <_printf_i+0x204>
 8008724:	2500      	movs	r5, #0
 8008726:	f104 0619 	add.w	r6, r4, #25
 800872a:	e7f5      	b.n	8008718 <_printf_i+0x220>
 800872c:	08008acd 	.word	0x08008acd
 8008730:	08008ade 	.word	0x08008ade

08008734 <__sflush_r>:
 8008734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	0716      	lsls	r6, r2, #28
 800873e:	4605      	mov	r5, r0
 8008740:	460c      	mov	r4, r1
 8008742:	d454      	bmi.n	80087ee <__sflush_r+0xba>
 8008744:	684b      	ldr	r3, [r1, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	dc02      	bgt.n	8008750 <__sflush_r+0x1c>
 800874a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	dd48      	ble.n	80087e2 <__sflush_r+0xae>
 8008750:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008752:	2e00      	cmp	r6, #0
 8008754:	d045      	beq.n	80087e2 <__sflush_r+0xae>
 8008756:	2300      	movs	r3, #0
 8008758:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800875c:	682f      	ldr	r7, [r5, #0]
 800875e:	6a21      	ldr	r1, [r4, #32]
 8008760:	602b      	str	r3, [r5, #0]
 8008762:	d030      	beq.n	80087c6 <__sflush_r+0x92>
 8008764:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	0759      	lsls	r1, r3, #29
 800876a:	d505      	bpl.n	8008778 <__sflush_r+0x44>
 800876c:	6863      	ldr	r3, [r4, #4]
 800876e:	1ad2      	subs	r2, r2, r3
 8008770:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008772:	b10b      	cbz	r3, 8008778 <__sflush_r+0x44>
 8008774:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008776:	1ad2      	subs	r2, r2, r3
 8008778:	2300      	movs	r3, #0
 800877a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800877c:	6a21      	ldr	r1, [r4, #32]
 800877e:	4628      	mov	r0, r5
 8008780:	47b0      	blx	r6
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	d106      	bne.n	8008796 <__sflush_r+0x62>
 8008788:	6829      	ldr	r1, [r5, #0]
 800878a:	291d      	cmp	r1, #29
 800878c:	d82b      	bhi.n	80087e6 <__sflush_r+0xb2>
 800878e:	4a2a      	ldr	r2, [pc, #168]	@ (8008838 <__sflush_r+0x104>)
 8008790:	40ca      	lsrs	r2, r1
 8008792:	07d6      	lsls	r6, r2, #31
 8008794:	d527      	bpl.n	80087e6 <__sflush_r+0xb2>
 8008796:	2200      	movs	r2, #0
 8008798:	04d9      	lsls	r1, r3, #19
 800879a:	6062      	str	r2, [r4, #4]
 800879c:	6922      	ldr	r2, [r4, #16]
 800879e:	6022      	str	r2, [r4, #0]
 80087a0:	d504      	bpl.n	80087ac <__sflush_r+0x78>
 80087a2:	1c42      	adds	r2, r0, #1
 80087a4:	d101      	bne.n	80087aa <__sflush_r+0x76>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	b903      	cbnz	r3, 80087ac <__sflush_r+0x78>
 80087aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80087ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ae:	602f      	str	r7, [r5, #0]
 80087b0:	b1b9      	cbz	r1, 80087e2 <__sflush_r+0xae>
 80087b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087b6:	4299      	cmp	r1, r3
 80087b8:	d002      	beq.n	80087c0 <__sflush_r+0x8c>
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7ff fbf0 	bl	8007fa0 <_free_r>
 80087c0:	2300      	movs	r3, #0
 80087c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80087c4:	e00d      	b.n	80087e2 <__sflush_r+0xae>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4628      	mov	r0, r5
 80087ca:	47b0      	blx	r6
 80087cc:	4602      	mov	r2, r0
 80087ce:	1c50      	adds	r0, r2, #1
 80087d0:	d1c9      	bne.n	8008766 <__sflush_r+0x32>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0c6      	beq.n	8008766 <__sflush_r+0x32>
 80087d8:	2b1d      	cmp	r3, #29
 80087da:	d001      	beq.n	80087e0 <__sflush_r+0xac>
 80087dc:	2b16      	cmp	r3, #22
 80087de:	d11d      	bne.n	800881c <__sflush_r+0xe8>
 80087e0:	602f      	str	r7, [r5, #0]
 80087e2:	2000      	movs	r0, #0
 80087e4:	e021      	b.n	800882a <__sflush_r+0xf6>
 80087e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ea:	b21b      	sxth	r3, r3
 80087ec:	e01a      	b.n	8008824 <__sflush_r+0xf0>
 80087ee:	690f      	ldr	r7, [r1, #16]
 80087f0:	2f00      	cmp	r7, #0
 80087f2:	d0f6      	beq.n	80087e2 <__sflush_r+0xae>
 80087f4:	0793      	lsls	r3, r2, #30
 80087f6:	680e      	ldr	r6, [r1, #0]
 80087f8:	600f      	str	r7, [r1, #0]
 80087fa:	bf0c      	ite	eq
 80087fc:	694b      	ldreq	r3, [r1, #20]
 80087fe:	2300      	movne	r3, #0
 8008800:	eba6 0807 	sub.w	r8, r6, r7
 8008804:	608b      	str	r3, [r1, #8]
 8008806:	f1b8 0f00 	cmp.w	r8, #0
 800880a:	ddea      	ble.n	80087e2 <__sflush_r+0xae>
 800880c:	4643      	mov	r3, r8
 800880e:	463a      	mov	r2, r7
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	4628      	mov	r0, r5
 8008814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008816:	47b0      	blx	r6
 8008818:	2800      	cmp	r0, #0
 800881a:	dc08      	bgt.n	800882e <__sflush_r+0xfa>
 800881c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800882e:	4407      	add	r7, r0
 8008830:	eba8 0800 	sub.w	r8, r8, r0
 8008834:	e7e7      	b.n	8008806 <__sflush_r+0xd2>
 8008836:	bf00      	nop
 8008838:	20400001 	.word	0x20400001

0800883c <_fflush_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	690b      	ldr	r3, [r1, #16]
 8008840:	4605      	mov	r5, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b913      	cbnz	r3, 800884c <_fflush_r+0x10>
 8008846:	2500      	movs	r5, #0
 8008848:	4628      	mov	r0, r5
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	b118      	cbz	r0, 8008856 <_fflush_r+0x1a>
 800884e:	6a03      	ldr	r3, [r0, #32]
 8008850:	b90b      	cbnz	r3, 8008856 <_fflush_r+0x1a>
 8008852:	f7ff f9ab 	bl	8007bac <__sinit>
 8008856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0f3      	beq.n	8008846 <_fflush_r+0xa>
 800885e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008860:	07d0      	lsls	r0, r2, #31
 8008862:	d404      	bmi.n	800886e <_fflush_r+0x32>
 8008864:	0599      	lsls	r1, r3, #22
 8008866:	d402      	bmi.n	800886e <_fflush_r+0x32>
 8008868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800886a:	f7ff fb96 	bl	8007f9a <__retarget_lock_acquire_recursive>
 800886e:	4628      	mov	r0, r5
 8008870:	4621      	mov	r1, r4
 8008872:	f7ff ff5f 	bl	8008734 <__sflush_r>
 8008876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008878:	4605      	mov	r5, r0
 800887a:	07da      	lsls	r2, r3, #31
 800887c:	d4e4      	bmi.n	8008848 <_fflush_r+0xc>
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	059b      	lsls	r3, r3, #22
 8008882:	d4e1      	bmi.n	8008848 <_fflush_r+0xc>
 8008884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008886:	f7ff fb89 	bl	8007f9c <__retarget_lock_release_recursive>
 800888a:	e7dd      	b.n	8008848 <_fflush_r+0xc>

0800888c <__swhatbuf_r>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	460c      	mov	r4, r1
 8008890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008894:	b096      	sub	sp, #88	@ 0x58
 8008896:	4615      	mov	r5, r2
 8008898:	2900      	cmp	r1, #0
 800889a:	461e      	mov	r6, r3
 800889c:	da0c      	bge.n	80088b8 <__swhatbuf_r+0x2c>
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	2100      	movs	r1, #0
 80088a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088a6:	bf14      	ite	ne
 80088a8:	2340      	movne	r3, #64	@ 0x40
 80088aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088ae:	2000      	movs	r0, #0
 80088b0:	6031      	str	r1, [r6, #0]
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	b016      	add	sp, #88	@ 0x58
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	466a      	mov	r2, sp
 80088ba:	f000 f849 	bl	8008950 <_fstat_r>
 80088be:	2800      	cmp	r0, #0
 80088c0:	dbed      	blt.n	800889e <__swhatbuf_r+0x12>
 80088c2:	9901      	ldr	r1, [sp, #4]
 80088c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088cc:	4259      	negs	r1, r3
 80088ce:	4159      	adcs	r1, r3
 80088d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088d4:	e7eb      	b.n	80088ae <__swhatbuf_r+0x22>

080088d6 <__smakebuf_r>:
 80088d6:	898b      	ldrh	r3, [r1, #12]
 80088d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088da:	079d      	lsls	r5, r3, #30
 80088dc:	4606      	mov	r6, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	d507      	bpl.n	80088f2 <__smakebuf_r+0x1c>
 80088e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	2301      	movs	r3, #1
 80088ec:	6163      	str	r3, [r4, #20]
 80088ee:	b003      	add	sp, #12
 80088f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f2:	ab01      	add	r3, sp, #4
 80088f4:	466a      	mov	r2, sp
 80088f6:	f7ff ffc9 	bl	800888c <__swhatbuf_r>
 80088fa:	9f00      	ldr	r7, [sp, #0]
 80088fc:	4605      	mov	r5, r0
 80088fe:	4630      	mov	r0, r6
 8008900:	4639      	mov	r1, r7
 8008902:	f7ff fbb9 	bl	8008078 <_malloc_r>
 8008906:	b948      	cbnz	r0, 800891c <__smakebuf_r+0x46>
 8008908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890c:	059a      	lsls	r2, r3, #22
 800890e:	d4ee      	bmi.n	80088ee <__smakebuf_r+0x18>
 8008910:	f023 0303 	bic.w	r3, r3, #3
 8008914:	f043 0302 	orr.w	r3, r3, #2
 8008918:	81a3      	strh	r3, [r4, #12]
 800891a:	e7e2      	b.n	80088e2 <__smakebuf_r+0xc>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	6020      	str	r0, [r4, #0]
 8008920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008924:	81a3      	strh	r3, [r4, #12]
 8008926:	9b01      	ldr	r3, [sp, #4]
 8008928:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800892c:	b15b      	cbz	r3, 8008946 <__smakebuf_r+0x70>
 800892e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008932:	4630      	mov	r0, r6
 8008934:	f000 f81e 	bl	8008974 <_isatty_r>
 8008938:	b128      	cbz	r0, 8008946 <__smakebuf_r+0x70>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f023 0303 	bic.w	r3, r3, #3
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	81a3      	strh	r3, [r4, #12]
 8008946:	89a3      	ldrh	r3, [r4, #12]
 8008948:	431d      	orrs	r5, r3
 800894a:	81a5      	strh	r5, [r4, #12]
 800894c:	e7cf      	b.n	80088ee <__smakebuf_r+0x18>
	...

08008950 <_fstat_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	2300      	movs	r3, #0
 8008954:	4d06      	ldr	r5, [pc, #24]	@ (8008970 <_fstat_r+0x20>)
 8008956:	4604      	mov	r4, r0
 8008958:	4608      	mov	r0, r1
 800895a:	4611      	mov	r1, r2
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	f7f8 fdf4 	bl	800154a <_fstat>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d102      	bne.n	800896c <_fstat_r+0x1c>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	b103      	cbz	r3, 800896c <_fstat_r+0x1c>
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	bf00      	nop
 8008970:	20000460 	.word	0x20000460

08008974 <_isatty_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	2300      	movs	r3, #0
 8008978:	4d05      	ldr	r5, [pc, #20]	@ (8008990 <_isatty_r+0x1c>)
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	f7f8 fdf3 	bl	800156a <_isatty>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_isatty_r+0x1a>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_isatty_r+0x1a>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	20000460 	.word	0x20000460

08008994 <_sbrk_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	2300      	movs	r3, #0
 8008998:	4d05      	ldr	r5, [pc, #20]	@ (80089b0 <_sbrk_r+0x1c>)
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	602b      	str	r3, [r5, #0]
 80089a0:	f7f8 fdfc 	bl	800159c <_sbrk>
 80089a4:	1c43      	adds	r3, r0, #1
 80089a6:	d102      	bne.n	80089ae <_sbrk_r+0x1a>
 80089a8:	682b      	ldr	r3, [r5, #0]
 80089aa:	b103      	cbz	r3, 80089ae <_sbrk_r+0x1a>
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	bd38      	pop	{r3, r4, r5, pc}
 80089b0:	20000460 	.word	0x20000460

080089b4 <memchr>:
 80089b4:	b2c9      	uxtb	r1, r1
 80089b6:	4603      	mov	r3, r0
 80089b8:	4402      	add	r2, r0
 80089ba:	b510      	push	{r4, lr}
 80089bc:	4293      	cmp	r3, r2
 80089be:	4618      	mov	r0, r3
 80089c0:	d101      	bne.n	80089c6 <memchr+0x12>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e003      	b.n	80089ce <memchr+0x1a>
 80089c6:	7804      	ldrb	r4, [r0, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	428c      	cmp	r4, r1
 80089cc:	d1f6      	bne.n	80089bc <memchr+0x8>
 80089ce:	bd10      	pop	{r4, pc}

080089d0 <_init>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	bf00      	nop
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr

080089dc <_fini>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	bf00      	nop
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr
