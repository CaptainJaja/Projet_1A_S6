
Test_HC05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004bbc  08004bbc  00005bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c58  08004c58  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00005c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00005c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004c60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  08004cc8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004cc8  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c813  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  000128ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  00014850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000803  00000000  00000000  000152d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a22  00000000  00000000  00015adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d014  00000000  00000000  0003c4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e988c  00000000  00000000  00049511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003160  00000000  00000000  00132de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00135f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ba4 	.word	0x08004ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004ba4 	.word	0x08004ba4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_write>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char *ptr, int len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	b29a      	uxth	r2, r3
 8000570:	f04f 33ff 	mov.w	r3, #4294967295
 8000574:	68b9      	ldr	r1, [r7, #8]
 8000576:	4804      	ldr	r0, [pc, #16]	@ (8000588 <_write+0x28>)
 8000578:	f002 fa4e 	bl	8002a18 <HAL_UART_Transmit>
    return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	2000010c 	.word	0x2000010c

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fb05 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f81b 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f8cb 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059e:	f000 f899 	bl	80006d4 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80005a2:	f000 f867 	bl	8000674 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Recevoir des données du HC05 via UART4
	          if (HAL_UART_Receive(&huart4, (uint8_t*)&received_data, 1, 1000) == HAL_OK)
 80005a6:	1df9      	adds	r1, r7, #7
 80005a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ac:	2201      	movs	r2, #1
 80005ae:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <main+0x3c>)
 80005b0:	f002 fabb 	bl	8002b2a <HAL_UART_Receive>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1f5      	bne.n	80005a6 <main+0x1a>
	          {
	              // Afficher le caractère reçu avec printf (via UART2)
	              printf("Caractère reçu : %c\n\r", received_data);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4619      	mov	r1, r3
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <main+0x40>)
 80005c0:	f003 fc82 	bl	8003ec8 <iprintf>
	          if (HAL_UART_Receive(&huart4, (uint8_t*)&received_data, 1, 1000) == HAL_OK)
 80005c4:	e7ef      	b.n	80005a6 <main+0x1a>
 80005c6:	bf00      	nop
 80005c8:	20000084 	.word	0x20000084
 80005cc:	08004bbc 	.word	0x08004bbc

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	@ 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fcc7 	bl	8003f72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f6:	f000 feaf 	bl	8001358 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f8fe 	bl	8000800 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800061e:	230a      	movs	r3, #10
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fee6 	bl	8001404 <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 f8df 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f001 faae 	bl	8001bbc <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000666:	f000 f8cb 	bl	8000800 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3758      	adds	r7, #88	@ 0x58
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <MX_UART4_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <MX_UART4_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800067e:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <MX_UART4_Init+0x58>)
 8000680:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000684:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_UART4_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_UART4_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_UART4_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_UART4_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <MX_UART4_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_UART4_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <MX_UART4_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_UART4_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <MX_UART4_Init+0x58>)
 80006b8:	f002 f960 	bl	800297c <HAL_UART_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f89d 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	20000084 	.word	0x20000084
 80006d0:	40004c00 	.word	0x40004c00

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070a:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000718:	f002 f930 	bl	800297c <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f86d 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000010c 	.word	0x2000010c
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000766:	4a24      	ldr	r2, [pc, #144]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800076c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076e:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a1e      	ldr	r2, [pc, #120]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b1c      	ldr	r3, [pc, #112]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b19      	ldr	r3, [pc, #100]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b2:	f000 fdab 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480b      	ldr	r0, [pc, #44]	@ (80007fc <MX_GPIO_Init+0xc8>)
 80007ce:	f000 fbf3 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d2:	2320      	movs	r3, #32
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ec:	f000 fbe4 	bl	8000fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f0:	bf00      	nop
 80007f2:	3728      	adds	r7, #40	@ 0x28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	4a0e      	ldr	r2, [pc, #56]	@ (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	@ 0x60
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	4a08      	ldr	r2, [pc, #32]	@ (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	@ 0x58
 8000836:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0ae      	sub	sp, #184	@ 0xb8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2288      	movs	r2, #136	@ 0x88
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fb7c 	bl	8003f72 <memset>
  if(huart->Instance==UART4)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a46      	ldr	r2, [pc, #280]	@ (8000998 <HAL_UART_MspInit+0x144>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d13c      	bne.n	80008fe <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000884:	2308      	movs	r3, #8
 8000886:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000888:	2300      	movs	r3, #0
 800088a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fbb7 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800089c:	f7ff ffb0 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008a0:	4b3e      	ldr	r3, [pc, #248]	@ (800099c <HAL_UART_MspInit+0x148>)
 80008a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a4:	4a3d      	ldr	r2, [pc, #244]	@ (800099c <HAL_UART_MspInit+0x148>)
 80008a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ac:	4b3b      	ldr	r3, [pc, #236]	@ (800099c <HAL_UART_MspInit+0x148>)
 80008ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b8:	4b38      	ldr	r3, [pc, #224]	@ (800099c <HAL_UART_MspInit+0x148>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a37      	ldr	r2, [pc, #220]	@ (800099c <HAL_UART_MspInit+0x148>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c4:	4b35      	ldr	r3, [pc, #212]	@ (800099c <HAL_UART_MspInit+0x148>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008d0:	2303      	movs	r3, #3
 80008d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80008e8:	2308      	movs	r3, #8
 80008ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f8:	f000 fb5e 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fc:	e048      	b.n	8000990 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a27      	ldr	r2, [pc, #156]	@ (80009a0 <HAL_UART_MspInit+0x14c>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d143      	bne.n	8000990 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000908:	2302      	movs	r3, #2
 800090a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800090c:	2300      	movs	r3, #0
 800090e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fb75 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8000920:	f7ff ff6e 	bl	8000800 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000924:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <HAL_UART_MspInit+0x148>)
 8000926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000928:	4a1c      	ldr	r2, [pc, #112]	@ (800099c <HAL_UART_MspInit+0x148>)
 800092a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800092e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <HAL_UART_MspInit+0x148>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <HAL_UART_MspInit+0x148>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000940:	4a16      	ldr	r2, [pc, #88]	@ (800099c <HAL_UART_MspInit+0x148>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_UART_MspInit+0x148>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000954:	230c      	movs	r3, #12
 8000956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096c:	2307      	movs	r3, #7
 800096e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f000 fb1c 	bl	8000fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2026      	movs	r0, #38	@ 0x26
 8000986:	f000 fa62 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800098a:	2026      	movs	r0, #38	@ 0x26
 800098c:	f000 fa7b 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8000990:	bf00      	nop
 8000992:	37b8      	adds	r7, #184	@ 0xb8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40004c00 	.word	0x40004c00
 800099c:	40021000 	.word	0x40021000
 80009a0:	40004400 	.word	0x40004400

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 f92d 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <USART2_IRQHandler+0x10>)
 8000a0a:	f002 f957 	bl	8002cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000010c 	.word	0x2000010c

08000a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2a:	f3af 8000 	nop.w
 8000a2e:	4601      	mov	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
  }

  return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_isatty>:

int _isatty(int file)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d207      	bcs.n	8000afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aec:	f003 fa90 	bl	8004010 <__errno>
 8000af0:	4603      	mov	r3, r0
 8000af2:	220c      	movs	r2, #12
 8000af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af6:	f04f 33ff 	mov.w	r3, #4294967295
 8000afa:	e009      	b.n	8000b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b02:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a05      	ldr	r2, [pc, #20]	@ (8000b20 <_sbrk+0x64>)
 8000b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20018000 	.word	0x20018000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	20000194 	.word	0x20000194
 8000b24:	200002e8 	.word	0x200002e8

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f003 fa4f 	bl	800401c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7e:	f7ff fd05 	bl	800058c <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b90:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 8000b94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b98:	200002e8 	.word	0x200002e8

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_Init+0x3c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_Init+0x3c>)
 8000bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f93e 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f80f 	bl	8000be0 <HAL_InitTick>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	71fb      	strb	r3, [r7, #7]
 8000bcc:	e001      	b.n	8000bd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bce:	f7ff fe1d 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bec:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <HAL_InitTick+0x6c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d023      	beq.n	8000c3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <HAL_InitTick+0x70>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <HAL_InitTick+0x6c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f949 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10f      	bne.n	8000c36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d809      	bhi.n	8000c30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f913 	bl	8000e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c28:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <HAL_InitTick+0x74>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e007      	b.n	8000c40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e004      	b.n	8000c40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e001      	b.n	8000c40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000198 	.word	0x20000198

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000198 	.word	0x20000198

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	@ (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	@ (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	@ (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	@ 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff8e 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff29 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff3e 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff8e 	bl	8000d8c <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5d 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff31 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d008      	beq.n	8000ee4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e022      	b.n	8000f2a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020e 	bic.w	r2, r2, #14
 8000ef2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	f003 021c 	and.w	r2, r3, #28
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	2101      	movs	r1, #1
 8000f12:	fa01 f202 	lsl.w	r2, r1, r2
 8000f16:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d005      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2204      	movs	r2, #4
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e029      	b.n	8000fae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 020e 	bic.w	r2, r2, #14
 8000f68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0201 	bic.w	r2, r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	f003 021c 	and.w	r2, r3, #28
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	4798      	blx	r3
    }
  }
  return status;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e17f      	b.n	80012c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8171 	beq.w	80012c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d005      	beq.n	8000ff8 <HAL_GPIO_Init+0x40>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d130      	bne.n	800105a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102e:	2201      	movs	r2, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	f003 0201 	and.w	r2, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b03      	cmp	r3, #3
 8001064:	d118      	bne.n	8001098 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ac 	beq.w	80012c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b5f      	ldr	r3, [pc, #380]	@ (80012e8 <HAL_GPIO_Init+0x330>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	4a5e      	ldr	r2, [pc, #376]	@ (80012e8 <HAL_GPIO_Init+0x330>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6613      	str	r3, [r2, #96]	@ 0x60
 8001176:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <HAL_GPIO_Init+0x330>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001182:	4a5a      	ldr	r2, [pc, #360]	@ (80012ec <HAL_GPIO_Init+0x334>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ac:	d025      	beq.n	80011fa <HAL_GPIO_Init+0x242>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	@ (80012f0 <HAL_GPIO_Init+0x338>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01f      	beq.n	80011f6 <HAL_GPIO_Init+0x23e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_GPIO_Init+0x33c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x23a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	@ (80012f8 <HAL_GPIO_Init+0x340>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x236>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_GPIO_Init+0x344>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x232>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001300 <HAL_GPIO_Init+0x348>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x22e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001304 <HAL_GPIO_Init+0x34c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x22a>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00c      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00a      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011fa:	2300      	movs	r3, #0
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120c:	4937      	ldr	r1, [pc, #220]	@ (80012ec <HAL_GPIO_Init+0x334>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_GPIO_Init+0x350>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123e:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001244:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001268:	4a27      	ldr	r2, [pc, #156]	@ (8001308 <HAL_GPIO_Init+0x350>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001292:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_GPIO_Init+0x350>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_GPIO_Init+0x350>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae78 	bne.w	8000fc8 <HAL_GPIO_Init+0x10>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000c00 	.word	0x48000c00
 80012fc:	48001000 	.word	0x48001000
 8001300:	48001400 	.word	0x48001400
 8001304:	48001800 	.word	0x48001800
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_PWREx_GetVoltageRange+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001366:	d130      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001368:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001374:	d038      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2232      	movs	r2, #50	@ 0x32
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139c:	e002      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b0:	d102      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c4:	d110      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e00f      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d6:	d007      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d8:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013e0:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e3ca      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b97      	ldr	r3, [pc, #604]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	4b94      	ldr	r3, [pc, #592]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80e4 	beq.w	8001600 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_RCC_OscConfig+0x4a>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	f040 808b 	bne.w	800155c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b01      	cmp	r3, #1
 800144a:	f040 8087 	bne.w	800155c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144e:	4b89      	ldr	r3, [pc, #548]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <HAL_RCC_OscConfig+0x62>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e3a2      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1a      	ldr	r2, [r3, #32]
 800146a:	4b82      	ldr	r3, [pc, #520]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_RCC_OscConfig+0x7c>
 8001476:	4b7f      	ldr	r3, [pc, #508]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800147e:	e005      	b.n	800148c <HAL_RCC_OscConfig+0x88>
 8001480:	4b7c      	ldr	r3, [pc, #496]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800148c:	4293      	cmp	r3, r2
 800148e:	d223      	bcs.n	80014d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fd55 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e383      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a4:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a72      	ldr	r2, [pc, #456]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	496d      	ldr	r1, [pc, #436]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	4968      	ldr	r1, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
 80014d6:	e025      	b.n	8001524 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b63      	ldr	r3, [pc, #396]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4960      	ldr	r1, [pc, #384]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	495b      	ldr	r1, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fd15 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e343      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001524:	f000 fc4a 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b52      	ldr	r3, [pc, #328]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	4950      	ldr	r1, [pc, #320]	@ (8001678 <HAL_RCC_OscConfig+0x274>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	4a4e      	ldr	r2, [pc, #312]	@ (800167c <HAL_RCC_OscConfig+0x278>)
 8001542:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001544:	4b4e      	ldr	r3, [pc, #312]	@ (8001680 <HAL_RCC_OscConfig+0x27c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fb49 	bl	8000be0 <HAL_InitTick>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d052      	beq.n	80015fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	e327      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d032      	beq.n	80015ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001564:	4b43      	ldr	r3, [pc, #268]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a42      	ldr	r2, [pc, #264]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001570:	f7ff fb86 	bl	8000c80 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001578:	f7ff fb82 	bl	8000c80 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e310      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158a:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001596:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a36      	ldr	r2, [pc, #216]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4931      	ldr	r1, [pc, #196]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	492c      	ldr	r1, [pc, #176]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
 80015c8:	e01a      	b.n	8001600 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a29      	ldr	r2, [pc, #164]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb53 	bl	8000c80 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015de:	f7ff fb4f 	bl	8000c80 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e2dd      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f0:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x1da>
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d074      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x21a>
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d10e      	bne.n	8001636 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d10b      	bne.n	8001636 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d064      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d160      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e2ba      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x24a>
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e026      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001656:	d115      	bne.n	8001684 <HAL_RCC_OscConfig+0x280>
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a02      	ldr	r2, [pc, #8]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	08004bd4 	.word	0x08004bd4
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
 8001684:	4ba0      	ldr	r3, [pc, #640]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a9f      	ldr	r2, [pc, #636]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b9d      	ldr	r3, [pc, #628]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a9c      	ldr	r2, [pc, #624]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff faec 	bl	8000c80 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fae8 	bl	8000c80 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e276      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4b92      	ldr	r3, [pc, #584]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x2a8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fad8 	bl	8000c80 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fad4 	bl	8000c80 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e262      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2d0>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x310>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d119      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d116      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b7c      	ldr	r3, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x328>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e23f      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b76      	ldr	r3, [pc, #472]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4973      	ldr	r1, [pc, #460]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	e040      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fa93 	bl	8000c80 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fa8f 	bl	8000c80 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e21d      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b62      	ldr	r3, [pc, #392]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	495f      	ldr	r1, [pc, #380]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e018      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5c      	ldr	r2, [pc, #368]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa6f 	bl	8000c80 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fa6b 	bl	8000c80 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1f9      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03c      	beq.n	800184a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01c      	beq.n	8001812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017de:	4a4a      	ldr	r2, [pc, #296]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa4a 	bl	8000c80 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fa46 	bl	8000c80 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1d4      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3ec>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001818:	4a3b      	ldr	r2, [pc, #236]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa2d 	bl	8000c80 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff fa29 	bl	8000c80 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1b7      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800185c:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	4a26      	ldr	r2, [pc, #152]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	@ 0x58
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001890:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff f9f0 	bl	8000c80 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a4:	f7ff f9ec 	bl	8000c80 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e17a      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x4d8>
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018da:	e029      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d115      	bne.n	8001910 <HAL_RCC_OscConfig+0x50c>
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fa:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	40007000 	.word	0x40007000
 8001910:	4b9c      	ldr	r3, [pc, #624]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001916:	4a9b      	ldr	r2, [pc, #620]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001920:	4b98      	ldr	r3, [pc, #608]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001926:	4a97      	ldr	r2, [pc, #604]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d016      	beq.n	8001966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff f9a2 	bl	8000c80 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff f99e 	bl	8000c80 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e12a      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	4b8b      	ldr	r3, [pc, #556]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ed      	beq.n	8001940 <HAL_RCC_OscConfig+0x53c>
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff f98b 	bl	8000c80 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff f987 	bl	8000c80 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e113      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	4b7f      	ldr	r3, [pc, #508]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ed      	bne.n	800196e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b7a      	ldr	r3, [pc, #488]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a79      	ldr	r2, [pc, #484]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80fe 	beq.w	8001baa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	f040 80d0 	bne.w	8001b58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019b8:	4b72      	ldr	r3, [pc, #456]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d130      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	3b01      	subs	r3, #1
 80019d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d127      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11f      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019f8:	2a07      	cmp	r2, #7
 80019fa:	bf14      	ite	ne
 80019fc:	2201      	movne	r2, #1
 80019fe:	2200      	moveq	r2, #0
 8001a00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d113      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d06e      	beq.n	8001b0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d069      	beq.n	8001b08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a34:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a40:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0ad      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a50:	4b4c      	ldr	r3, [pc, #304]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a5c:	f7ff f910 	bl	8000c80 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f90c 	bl	8000c80 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e09a      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a76:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a82:	4b40      	ldr	r3, [pc, #256]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a92:	3a01      	subs	r2, #1
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a9c:	0212      	lsls	r2, r2, #8
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001aa4:	0852      	lsrs	r2, r2, #1
 8001aa6:	3a01      	subs	r2, #1
 8001aa8:	0552      	lsls	r2, r2, #21
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ab0:	0852      	lsrs	r2, r2, #1
 8001ab2:	3a01      	subs	r2, #1
 8001ab4:	0652      	lsls	r2, r2, #25
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001abc:	0912      	lsrs	r2, r2, #4
 8001abe:	0452      	lsls	r2, r2, #17
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4930      	ldr	r1, [pc, #192]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2d      	ldr	r2, [pc, #180]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae0:	f7ff f8ce 	bl	8000c80 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f8ca 	bl	8000c80 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e058      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b06:	e050      	b.n	8001baa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04f      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d148      	bne.n	8001baa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b30:	f7ff f8a6 	bl	8000c80 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f8a2 	bl	8000c80 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e030      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x734>
 8001b56:	e028      	b.n	8001baa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d023      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f889 	bl	8000c80 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	e00c      	b.n	8001b8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f885 	bl	8000c80 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d905      	bls.n	8001b8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e013      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x7b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ec      	bne.n	8001b72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_RCC_OscConfig+0x7b0>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4905      	ldr	r1, [pc, #20]	@ (8001bb4 <HAL_RCC_OscConfig+0x7b0>)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_OscConfig+0x7b4>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
 8001ba4:	e001      	b.n	8001baa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	feeefffc 	.word	0xfeeefffc

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0e7      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b75      	ldr	r3, [pc, #468]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b72      	ldr	r3, [pc, #456]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4970      	ldr	r1, [pc, #448]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b6e      	ldr	r3, [pc, #440]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cf      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4960      	ldr	r1, [pc, #384]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04c      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0a6      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e09a      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c72:	4b4e      	ldr	r3, [pc, #312]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e08e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e086      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b46      	ldr	r3, [pc, #280]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4943      	ldr	r1, [pc, #268]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7fe ffec 	bl	8000c80 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7fe ffe8 	bl	8000c80 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e06e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d208      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	492b      	ldr	r1, [pc, #172]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d02:	4b29      	ldr	r3, [pc, #164]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d210      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 0207 	bic.w	r2, r3, #7
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e036      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4918      	ldr	r1, [pc, #96]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4910      	ldr	r1, [pc, #64]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f000 f824 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	490b      	ldr	r1, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff23 	bl	8000be0 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004bd4 	.word	0x08004bd4
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x34>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d11e      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001df0:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e18:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e004      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d134      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xac>
 8001e60:	e005      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e64:	617b      	str	r3, [r7, #20]
      break;
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6a:	617b      	str	r3, [r7, #20]
      break;
 8001e6c:	e002      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0e5b      	lsrs	r3, r3, #25
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08004bec 	.word	0x08004bec
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004be4 	.word	0x08004be4

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f1c:	f7ff ffda 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0adb      	lsrs	r3, r3, #11
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08004be4 	.word	0x08004be4

08001f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f50:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f5c:	f7ff f9ee 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001f60:	6178      	str	r0, [r7, #20]
 8001f62:	e014      	b.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a24      	ldr	r2, [pc, #144]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f9de 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f94:	d10b      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d919      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fa0:	d902      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e013      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e010      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d902      	bls.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e00a      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	@ 0x80
 8001fbe:	d102      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e004      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b70      	cmp	r3, #112	@ 0x70
 8001fca:	d101      	bne.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4909      	ldr	r1, [pc, #36]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800200c:	2300      	movs	r3, #0
 800200e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d041      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002024:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002028:	d02a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800202a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800202e:	d824      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002030:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002034:	d008      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800203a:	d81e      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002044:	d010      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002046:	e018      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002048:	4b86      	ldr	r3, [pc, #536]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a85      	ldr	r2, [pc, #532]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002052:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002054:	e015      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fabb 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002062:	4603      	mov	r3, r0
 8002064:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002066:	e00c      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3320      	adds	r3, #32
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fba6 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e003      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	74fb      	strb	r3, [r7, #19]
      break;
 800207e:	e000      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002096:	4973      	ldr	r1, [pc, #460]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800209e:	e001      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d041      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020b8:	d02a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020be:	d824      	bhi.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020c4:	d008      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ca:	d81e      	bhi.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d4:	d010      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020d6:	e018      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020d8:	4b62      	ldr	r3, [pc, #392]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a61      	ldr	r2, [pc, #388]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e4:	e015      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fa73 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 80020f2:	4603      	mov	r3, r0
 80020f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f6:	e00c      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3320      	adds	r3, #32
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fb5e 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002108:	e003      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	74fb      	strb	r3, [r7, #19]
      break;
 800210e:	e000      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002118:	4b52      	ldr	r3, [pc, #328]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002126:	494f      	ldr	r1, [pc, #316]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800212e:	e001      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a0 	beq.w	8002282 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002160:	4a40      	ldr	r2, [pc, #256]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	@ 0x58
 8002168:	4b3e      	ldr	r3, [pc, #248]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002174:	2301      	movs	r3, #1
 8002176:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3a      	ldr	r2, [pc, #232]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002184:	f7fe fd7c 	bl	8000c80 <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800218a:	e009      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe fd78 	bl	8000c80 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d902      	bls.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	74fb      	strb	r3, [r7, #19]
        break;
 800219e:	e005      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a0:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ef      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d15c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01f      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d019      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fd37 	bl	8000c80 <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002214:	e00b      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fd33 	bl	8000c80 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d902      	bls.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	74fb      	strb	r3, [r7, #19]
            break;
 800222c:	e006      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ec      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002252:	4904      	ldr	r1, [pc, #16]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800225a:	e009      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	74bb      	strb	r3, [r7, #18]
 8002260:	e006      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002270:	7c7b      	ldrb	r3, [r7, #17]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b9e      	ldr	r3, [pc, #632]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	4a9d      	ldr	r2, [pc, #628]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228e:	4b98      	ldr	r3, [pc, #608]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f023 0203 	bic.w	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	4994      	ldr	r1, [pc, #592]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b0:	4b8f      	ldr	r3, [pc, #572]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 020c 	bic.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	498c      	ldr	r1, [pc, #560]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022d2:	4b87      	ldr	r3, [pc, #540]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	4983      	ldr	r1, [pc, #524]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022f4:	4b7e      	ldr	r3, [pc, #504]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	497b      	ldr	r1, [pc, #492]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	4972      	ldr	r1, [pc, #456]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002338:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	496a      	ldr	r1, [pc, #424]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800235a:	4b65      	ldr	r3, [pc, #404]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	4961      	ldr	r1, [pc, #388]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800237c:	4b5c      	ldr	r3, [pc, #368]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	4959      	ldr	r1, [pc, #356]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239e:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ac:	4950      	ldr	r1, [pc, #320]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c0:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	4948      	ldr	r1, [pc, #288]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e2:	4b43      	ldr	r3, [pc, #268]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	493f      	ldr	r1, [pc, #252]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d028      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002404:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002412:	4937      	ldr	r1, [pc, #220]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002422:	d106      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
 8002430:	e011      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002436:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800243a:	d10c      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	2101      	movs	r1, #1
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f8c8 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d028      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002462:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002468:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	491f      	ldr	r1, [pc, #124]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002480:	d106      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248c:	60d3      	str	r3, [r2, #12]
 800248e:	e011      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f899 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02b      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024de:	d109      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a02      	ldr	r2, [pc, #8]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	e014      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2101      	movs	r1, #1
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f867 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d02f      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002524:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002532:	4928      	ldr	r1, [pc, #160]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002542:	d10d      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	2102      	movs	r1, #2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f844 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d014      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	74bb      	strb	r3, [r7, #18]
 800255e:	e011      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002568:	d10c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3320      	adds	r3, #32
 800256e:	2102      	movs	r1, #2
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f925 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002590:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259e:	490d      	ldr	r1, [pc, #52]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025c2:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000

080025d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025e6:	4b75      	ldr	r3, [pc, #468]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025f2:	4b72      	ldr	r3, [pc, #456]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0203 	and.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
       ||
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800260a:	4b6c      	ldr	r3, [pc, #432]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
       ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d047      	beq.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e044      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d018      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x86>
 800262c:	2b03      	cmp	r3, #3
 800262e:	d825      	bhi.n	800267c <RCCEx_PLLSAI1_Config+0xa4>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x62>
 8002634:	2b02      	cmp	r3, #2
 8002636:	d009      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x74>
 8002638:	e020      	b.n	800267c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800263a:	4b60      	ldr	r3, [pc, #384]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11d      	bne.n	8002682 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264a:	e01a      	b.n	8002682 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800264c:	4b5b      	ldr	r3, [pc, #364]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d116      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e013      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800265e:	4b57      	ldr	r3, [pc, #348]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800266a:	4b54      	ldr	r3, [pc, #336]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800267a:	e006      	b.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e004      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002682:	bf00      	nop
 8002684:	e002      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002686:	bf00      	nop
 8002688:	e000      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800268a:	bf00      	nop
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	430b      	orrs	r3, r1
 80026a8:	4944      	ldr	r1, [pc, #272]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d17d      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a40      	ldr	r2, [pc, #256]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fade 	bl	8000c80 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c6:	e009      	b.n	80026dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c8:	f7fe fada 	bl	8000c80 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	73fb      	strb	r3, [r7, #15]
        break;
 80026da:	e005      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ef      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d160      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	0211      	lsls	r1, r2, #8
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68d2      	ldr	r2, [r2, #12]
 800270a:	0912      	lsrs	r2, r2, #4
 800270c:	0452      	lsls	r2, r2, #17
 800270e:	430a      	orrs	r2, r1
 8002710:	492a      	ldr	r1, [pc, #168]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	610b      	str	r3, [r1, #16]
 8002716:	e027      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d112      	bne.n	8002744 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271e:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002726:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	0211      	lsls	r1, r2, #8
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6912      	ldr	r2, [r2, #16]
 8002734:	0852      	lsrs	r2, r2, #1
 8002736:	3a01      	subs	r2, #1
 8002738:	0552      	lsls	r2, r2, #21
 800273a:	430a      	orrs	r2, r1
 800273c:	491f      	ldr	r1, [pc, #124]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	610b      	str	r3, [r1, #16]
 8002742:	e011      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800274c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6892      	ldr	r2, [r2, #8]
 8002754:	0211      	lsls	r1, r2, #8
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6952      	ldr	r2, [r2, #20]
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0652      	lsls	r2, r2, #25
 8002760:	430a      	orrs	r2, r1
 8002762:	4916      	ldr	r1, [pc, #88]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002764:	4313      	orrs	r3, r2
 8002766:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fa84 	bl	8000c80 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800277a:	e009      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800277c:	f7fe fa80 	bl	8000c80 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	73fb      	strb	r3, [r7, #15]
          break;
 800278e:	e005      	b.n	800279c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4904      	ldr	r1, [pc, #16]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000

080027c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d10d      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
       ||
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027f2:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
       ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d047      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e044      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d018      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x86>
 8002814:	2b03      	cmp	r3, #3
 8002816:	d825      	bhi.n	8002864 <RCCEx_PLLSAI2_Config+0xa4>
 8002818:	2b01      	cmp	r3, #1
 800281a:	d002      	beq.n	8002822 <RCCEx_PLLSAI2_Config+0x62>
 800281c:	2b02      	cmp	r3, #2
 800281e:	d009      	beq.n	8002834 <RCCEx_PLLSAI2_Config+0x74>
 8002820:	e020      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002822:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002832:	e01a      	b.n	800286a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002834:	4b50      	ldr	r3, [pc, #320]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d116      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002844:	e013      	b.n	800286e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002846:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002862:	e006      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      break;
 8002868:	e004      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002872:	bf00      	nop
    }

    if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800287a:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	430b      	orrs	r3, r1
 8002890:	4939      	ldr	r1, [pc, #228]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d167      	bne.n	800296c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800289c:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a35      	ldr	r2, [pc, #212]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a8:	f7fe f9ea 	bl	8000c80 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ae:	e009      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028b0:	f7fe f9e6 	bl	8000c80 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	73fb      	strb	r3, [r7, #15]
        break;
 80028c2:	e005      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ef      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d14a      	bne.n	800296c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d111      	bne.n	8002900 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028dc:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6892      	ldr	r2, [r2, #8]
 80028ec:	0211      	lsls	r1, r2, #8
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	0912      	lsrs	r2, r2, #4
 80028f4:	0452      	lsls	r2, r2, #17
 80028f6:	430a      	orrs	r2, r1
 80028f8:	491f      	ldr	r1, [pc, #124]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	614b      	str	r3, [r1, #20]
 80028fe:	e011      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002908:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	0211      	lsls	r1, r2, #8
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6912      	ldr	r2, [r2, #16]
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0652      	lsls	r2, r2, #25
 800291c:	430a      	orrs	r2, r1
 800291e:	4916      	ldr	r1, [pc, #88]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe f9a6 	bl	8000c80 <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002936:	e009      	b.n	800294c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002938:	f7fe f9a2 	bl	8000c80 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d902      	bls.n	800294c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	73fb      	strb	r3, [r7, #15]
          break;
 800294a:	e005      	b.n	8002958 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ef      	beq.n	8002938 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4904      	ldr	r1, [pc, #16]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	4313      	orrs	r3, r2
 800296a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e040      	b.n	8002a10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fd ff58 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2224      	movs	r2, #36	@ 0x24
 80029a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 ff58 	bl	8003878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fc9d 	bl	8003308 <UART_SetConfig>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e01b      	b.n	8002a10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 ffd7 	bl	80039bc <UART_CheckIdleState>
 8002a0e:	4603      	mov	r3, r0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	@ 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d177      	bne.n	8002b20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <HAL_UART_Transmit+0x24>
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e070      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2221      	movs	r2, #33	@ 0x21
 8002a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe f917 	bl	8000c80 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	88fa      	ldrh	r2, [r7, #6]
 8002a58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	88fa      	ldrh	r2, [r7, #6]
 8002a60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d108      	bne.n	8002a80 <HAL_UART_Transmit+0x68>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	e003      	b.n	8002a88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a88:	e02f      	b.n	8002aea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	2180      	movs	r1, #128	@ 0x80
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f001 f839 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e03b      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002abc:	b292      	uxth	r2, r2
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	e007      	b.n	8002ad8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1c9      	bne.n	8002a8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2140      	movs	r1, #64	@ 0x40
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f001 f803 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e005      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b08a      	sub	sp, #40	@ 0x28
 8002b2e:	af02      	add	r7, sp, #8
 8002b30:	60f8      	str	r0, [r7, #12]
 8002b32:	60b9      	str	r1, [r7, #8]
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	4613      	mov	r3, r2
 8002b38:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	f040 80b6 	bne.w	8002cb2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_UART_Receive+0x28>
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0ae      	b.n	8002cb4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2222      	movs	r2, #34	@ 0x22
 8002b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f888 	bl	8000c80 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b8a:	d10e      	bne.n	8002baa <HAL_UART_Receive+0x80>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_UART_Receive+0x76>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002b9e:	e02d      	b.n	8002bfc <HAL_UART_Receive+0xd2>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002ba8:	e028      	b.n	8002bfc <HAL_UART_Receive+0xd2>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_UART_Receive+0xa4>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_UART_Receive+0x9a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	22ff      	movs	r2, #255	@ 0xff
 8002bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002bc2:	e01b      	b.n	8002bfc <HAL_UART_Receive+0xd2>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	227f      	movs	r2, #127	@ 0x7f
 8002bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002bcc:	e016      	b.n	8002bfc <HAL_UART_Receive+0xd2>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bd6:	d10d      	bne.n	8002bf4 <HAL_UART_Receive+0xca>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_UART_Receive+0xc0>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	227f      	movs	r2, #127	@ 0x7f
 8002be4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002be8:	e008      	b.n	8002bfc <HAL_UART_Receive+0xd2>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	223f      	movs	r2, #63	@ 0x3f
 8002bee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002bf2:	e003      	b.n	8002bfc <HAL_UART_Receive+0xd2>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002c02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c0c:	d108      	bne.n	8002c20 <HAL_UART_Receive+0xf6>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d104      	bne.n	8002c20 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	e003      	b.n	8002c28 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c28:	e037      	b.n	8002c9a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2120      	movs	r1, #32
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 ff69 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e033      	b.n	8002cb4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	8a7b      	ldrh	r3, [r7, #18]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	3302      	adds	r3, #2
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e00d      	b.n	8002c88 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	8a7b      	ldrh	r3, [r7, #18]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1c1      	bne.n	8002c2a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ce2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ce6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002cea:	4013      	ands	r3, r2
 8002cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d115      	bne.n	8002d24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00f      	beq.n	8002d24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 82ca 	beq.w	80032ae <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4798      	blx	r3
      }
      return;
 8002d22:	e2c4      	b.n	80032ae <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8117 	beq.w	8002f5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d106      	bne.n	8002d48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002d3e:	4b85      	ldr	r3, [pc, #532]	@ (8002f54 <HAL_UART_IRQHandler+0x298>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 810a 	beq.w	8002f5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d011      	beq.n	8002d78 <HAL_UART_IRQHandler+0xbc>
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00b      	beq.n	8002d78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d011      	beq.n	8002da8 <HAL_UART_IRQHandler+0xec>
 8002d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00b      	beq.n	8002da8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2202      	movs	r2, #2
 8002d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d9e:	f043 0204 	orr.w	r2, r3, #4
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d011      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
 8002db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d017      	beq.n	8002e14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002df4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0a:	f043 0208 	orr.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d012      	beq.n	8002e46 <HAL_UART_IRQHandler+0x18a>
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00c      	beq.n	8002e46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8230 	beq.w	80032b2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00d      	beq.n	8002e7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d007      	beq.n	8002e7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e8e:	2b40      	cmp	r3, #64	@ 0x40
 8002e90:	d005      	beq.n	8002e9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04f      	beq.n	8002f3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fea1 	bl	8003be6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eae:	2b40      	cmp	r3, #64	@ 0x40
 8002eb0:	d141      	bne.n	8002f36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ecc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3308      	adds	r3, #8
 8002eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ede:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1d9      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f0a:	4a13      	ldr	r2, [pc, #76]	@ (8002f58 <HAL_UART_IRQHandler+0x29c>)
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe f80f 	bl	8000f36 <HAL_DMA_Abort_IT>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d017      	beq.n	8002f4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2c:	e00f      	b.n	8002f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f9d4 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	e00b      	b.n	8002f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9d0 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e007      	b.n	8002f4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9cc 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002f4c:	e1b1      	b.n	80032b2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f4e:	bf00      	nop
    return;
 8002f50:	e1af      	b.n	80032b2 <HAL_UART_IRQHandler+0x5f6>
 8002f52:	bf00      	nop
 8002f54:	04000120 	.word	0x04000120
 8002f58:	08003caf 	.word	0x08003caf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	f040 816a 	bne.w	800323a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8163 	beq.w	800323a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 815c 	beq.w	800323a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2210      	movs	r2, #16
 8002f88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	f040 80d4 	bne.w	8003142 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 80ad 	beq.w	800310a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	f080 80a5 	bcs.w	800310a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002fc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 8086 	bne.w	80030e8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fe8:	e853 3f00 	ldrex	r3, [r3]
 8002fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003006:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800300a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800301e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1da      	bne.n	8002fdc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3308      	adds	r3, #8
 800302c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3308      	adds	r3, #8
 8003046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800304a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800304e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003050:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003052:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800305c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e1      	bne.n	8003026 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3308      	adds	r3, #8
 8003068:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3308      	adds	r3, #8
 8003082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800308c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e3      	bne.n	8003062 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2220      	movs	r2, #32
 800309e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b0:	e853 3f00 	ldrex	r3, [r3]
 80030b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030b8:	f023 0310 	bic.w	r3, r3, #16
 80030bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80030d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80030d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e4      	bne.n	80030a8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fd fee9 	bl	8000eba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	b29b      	uxth	r3, r3
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f8f4 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003108:	e0d5      	b.n	80032b6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 80ce 	bne.w	80032b6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b20      	cmp	r3, #32
 8003128:	f040 80c5 	bne.w	80032b6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003138:	4619      	mov	r1, r3
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8d8 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
      return;
 8003140:	e0b9      	b.n	80032b6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800314e:	b29b      	uxth	r3, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 80ab 	beq.w	80032ba <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a6 	beq.w	80032ba <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	e853 3f00 	ldrex	r3, [r3]
 800317a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800317c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003182:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003190:	647b      	str	r3, [r7, #68]	@ 0x44
 8003192:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003196:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800319e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e4      	bne.n	800316e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3308      	adds	r3, #8
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	623b      	str	r3, [r7, #32]
   return(result);
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3308      	adds	r3, #8
 80031c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80031ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d0:	e841 2300 	strex	r3, r2, [r1]
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e3      	bne.n	80031a4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	e853 3f00 	ldrex	r3, [r3]
 80031fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	69b9      	ldr	r1, [r7, #24]
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	e841 2300 	strex	r3, r2, [r1]
 800321e:	617b      	str	r3, [r7, #20]
   return(result);
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e4      	bne.n	80031f0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800322c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f85c 	bl	80032f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003238:	e03f      	b.n	80032ba <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <HAL_UART_IRQHandler+0x5a8>
 8003246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800324a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800325a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fd66 	bl	8003d2e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003262:	e02d      	b.n	80032c0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003274:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01c      	beq.n	80032be <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
    }
    return;
 800328c:	e017      	b.n	80032be <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d012      	beq.n	80032c0 <HAL_UART_IRQHandler+0x604>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fd17 	bl	8003cda <UART_EndTransmit_IT>
    return;
 80032ac:	e008      	b.n	80032c0 <HAL_UART_IRQHandler+0x604>
      return;
 80032ae:	bf00      	nop
 80032b0:	e006      	b.n	80032c0 <HAL_UART_IRQHandler+0x604>
    return;
 80032b2:	bf00      	nop
 80032b4:	e004      	b.n	80032c0 <HAL_UART_IRQHandler+0x604>
      return;
 80032b6:	bf00      	nop
 80032b8:	e002      	b.n	80032c0 <HAL_UART_IRQHandler+0x604>
      return;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <HAL_UART_IRQHandler+0x604>
    return;
 80032be:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80032c0:	37e8      	adds	r7, #232	@ 0xe8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop

080032c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800330c:	b08a      	sub	sp, #40	@ 0x28
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	4313      	orrs	r3, r2
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4ba4      	ldr	r3, [pc, #656]	@ (80035c8 <UART_SetConfig+0x2c0>)
 8003338:	4013      	ands	r3, r2
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003340:	430b      	orrs	r3, r1
 8003342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a99      	ldr	r2, [pc, #612]	@ (80035cc <UART_SetConfig+0x2c4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d004      	beq.n	8003374 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003370:	4313      	orrs	r3, r2
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a90      	ldr	r2, [pc, #576]	@ (80035d0 <UART_SetConfig+0x2c8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d126      	bne.n	80033e0 <UART_SetConfig+0xd8>
 8003392:	4b90      	ldr	r3, [pc, #576]	@ (80035d4 <UART_SetConfig+0x2cc>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b03      	cmp	r3, #3
 800339e:	d81b      	bhi.n	80033d8 <UART_SetConfig+0xd0>
 80033a0:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <UART_SetConfig+0xa0>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033c9 	.word	0x080033c9
 80033b0:	080033c1 	.word	0x080033c1
 80033b4:	080033d1 	.word	0x080033d1
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e116      	b.n	80035ee <UART_SetConfig+0x2e6>
 80033c0:	2302      	movs	r3, #2
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e112      	b.n	80035ee <UART_SetConfig+0x2e6>
 80033c8:	2304      	movs	r3, #4
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e10e      	b.n	80035ee <UART_SetConfig+0x2e6>
 80033d0:	2308      	movs	r3, #8
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e10a      	b.n	80035ee <UART_SetConfig+0x2e6>
 80033d8:	2310      	movs	r3, #16
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033de:	e106      	b.n	80035ee <UART_SetConfig+0x2e6>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a7c      	ldr	r2, [pc, #496]	@ (80035d8 <UART_SetConfig+0x2d0>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d138      	bne.n	800345c <UART_SetConfig+0x154>
 80033ea:	4b7a      	ldr	r3, [pc, #488]	@ (80035d4 <UART_SetConfig+0x2cc>)
 80033ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b0c      	cmp	r3, #12
 80033f6:	d82d      	bhi.n	8003454 <UART_SetConfig+0x14c>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <UART_SetConfig+0xf8>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003435 	.word	0x08003435
 8003404:	08003455 	.word	0x08003455
 8003408:	08003455 	.word	0x08003455
 800340c:	08003455 	.word	0x08003455
 8003410:	08003445 	.word	0x08003445
 8003414:	08003455 	.word	0x08003455
 8003418:	08003455 	.word	0x08003455
 800341c:	08003455 	.word	0x08003455
 8003420:	0800343d 	.word	0x0800343d
 8003424:	08003455 	.word	0x08003455
 8003428:	08003455 	.word	0x08003455
 800342c:	08003455 	.word	0x08003455
 8003430:	0800344d 	.word	0x0800344d
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800343a:	e0d8      	b.n	80035ee <UART_SetConfig+0x2e6>
 800343c:	2302      	movs	r3, #2
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003442:	e0d4      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003444:	2304      	movs	r3, #4
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344a:	e0d0      	b.n	80035ee <UART_SetConfig+0x2e6>
 800344c:	2308      	movs	r3, #8
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003452:	e0cc      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003454:	2310      	movs	r3, #16
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345a:	e0c8      	b.n	80035ee <UART_SetConfig+0x2e6>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a5e      	ldr	r2, [pc, #376]	@ (80035dc <UART_SetConfig+0x2d4>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d125      	bne.n	80034b2 <UART_SetConfig+0x1aa>
 8003466:	4b5b      	ldr	r3, [pc, #364]	@ (80035d4 <UART_SetConfig+0x2cc>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003470:	2b30      	cmp	r3, #48	@ 0x30
 8003472:	d016      	beq.n	80034a2 <UART_SetConfig+0x19a>
 8003474:	2b30      	cmp	r3, #48	@ 0x30
 8003476:	d818      	bhi.n	80034aa <UART_SetConfig+0x1a2>
 8003478:	2b20      	cmp	r3, #32
 800347a:	d00a      	beq.n	8003492 <UART_SetConfig+0x18a>
 800347c:	2b20      	cmp	r3, #32
 800347e:	d814      	bhi.n	80034aa <UART_SetConfig+0x1a2>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <UART_SetConfig+0x182>
 8003484:	2b10      	cmp	r3, #16
 8003486:	d008      	beq.n	800349a <UART_SetConfig+0x192>
 8003488:	e00f      	b.n	80034aa <UART_SetConfig+0x1a2>
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003490:	e0ad      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003492:	2302      	movs	r3, #2
 8003494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003498:	e0a9      	b.n	80035ee <UART_SetConfig+0x2e6>
 800349a:	2304      	movs	r3, #4
 800349c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a0:	e0a5      	b.n	80035ee <UART_SetConfig+0x2e6>
 80034a2:	2308      	movs	r3, #8
 80034a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a8:	e0a1      	b.n	80035ee <UART_SetConfig+0x2e6>
 80034aa:	2310      	movs	r3, #16
 80034ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b0:	e09d      	b.n	80035ee <UART_SetConfig+0x2e6>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a4a      	ldr	r2, [pc, #296]	@ (80035e0 <UART_SetConfig+0x2d8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d125      	bne.n	8003508 <UART_SetConfig+0x200>
 80034bc:	4b45      	ldr	r3, [pc, #276]	@ (80035d4 <UART_SetConfig+0x2cc>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c8:	d016      	beq.n	80034f8 <UART_SetConfig+0x1f0>
 80034ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80034cc:	d818      	bhi.n	8003500 <UART_SetConfig+0x1f8>
 80034ce:	2b80      	cmp	r3, #128	@ 0x80
 80034d0:	d00a      	beq.n	80034e8 <UART_SetConfig+0x1e0>
 80034d2:	2b80      	cmp	r3, #128	@ 0x80
 80034d4:	d814      	bhi.n	8003500 <UART_SetConfig+0x1f8>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <UART_SetConfig+0x1d8>
 80034da:	2b40      	cmp	r3, #64	@ 0x40
 80034dc:	d008      	beq.n	80034f0 <UART_SetConfig+0x1e8>
 80034de:	e00f      	b.n	8003500 <UART_SetConfig+0x1f8>
 80034e0:	2300      	movs	r3, #0
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e6:	e082      	b.n	80035ee <UART_SetConfig+0x2e6>
 80034e8:	2302      	movs	r3, #2
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ee:	e07e      	b.n	80035ee <UART_SetConfig+0x2e6>
 80034f0:	2304      	movs	r3, #4
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034f6:	e07a      	b.n	80035ee <UART_SetConfig+0x2e6>
 80034f8:	2308      	movs	r3, #8
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034fe:	e076      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003500:	2310      	movs	r3, #16
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003506:	e072      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a35      	ldr	r2, [pc, #212]	@ (80035e4 <UART_SetConfig+0x2dc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d12a      	bne.n	8003568 <UART_SetConfig+0x260>
 8003512:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <UART_SetConfig+0x2cc>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003518:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003520:	d01a      	beq.n	8003558 <UART_SetConfig+0x250>
 8003522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003526:	d81b      	bhi.n	8003560 <UART_SetConfig+0x258>
 8003528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352c:	d00c      	beq.n	8003548 <UART_SetConfig+0x240>
 800352e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003532:	d815      	bhi.n	8003560 <UART_SetConfig+0x258>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <UART_SetConfig+0x238>
 8003538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353c:	d008      	beq.n	8003550 <UART_SetConfig+0x248>
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x258>
 8003540:	2300      	movs	r3, #0
 8003542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003546:	e052      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003548:	2302      	movs	r3, #2
 800354a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800354e:	e04e      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003550:	2304      	movs	r3, #4
 8003552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003556:	e04a      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003558:	2308      	movs	r3, #8
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800355e:	e046      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003560:	2310      	movs	r3, #16
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003566:	e042      	b.n	80035ee <UART_SetConfig+0x2e6>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a17      	ldr	r2, [pc, #92]	@ (80035cc <UART_SetConfig+0x2c4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d13a      	bne.n	80035e8 <UART_SetConfig+0x2e0>
 8003572:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <UART_SetConfig+0x2cc>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003578:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800357c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003580:	d01a      	beq.n	80035b8 <UART_SetConfig+0x2b0>
 8003582:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003586:	d81b      	bhi.n	80035c0 <UART_SetConfig+0x2b8>
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358c:	d00c      	beq.n	80035a8 <UART_SetConfig+0x2a0>
 800358e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003592:	d815      	bhi.n	80035c0 <UART_SetConfig+0x2b8>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <UART_SetConfig+0x298>
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359c:	d008      	beq.n	80035b0 <UART_SetConfig+0x2a8>
 800359e:	e00f      	b.n	80035c0 <UART_SetConfig+0x2b8>
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035a6:	e022      	b.n	80035ee <UART_SetConfig+0x2e6>
 80035a8:	2302      	movs	r3, #2
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035ae:	e01e      	b.n	80035ee <UART_SetConfig+0x2e6>
 80035b0:	2304      	movs	r3, #4
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035b6:	e01a      	b.n	80035ee <UART_SetConfig+0x2e6>
 80035b8:	2308      	movs	r3, #8
 80035ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035be:	e016      	b.n	80035ee <UART_SetConfig+0x2e6>
 80035c0:	2310      	movs	r3, #16
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80035c6:	e012      	b.n	80035ee <UART_SetConfig+0x2e6>
 80035c8:	efff69f3 	.word	0xefff69f3
 80035cc:	40008000 	.word	0x40008000
 80035d0:	40013800 	.word	0x40013800
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40004400 	.word	0x40004400
 80035dc:	40004800 	.word	0x40004800
 80035e0:	40004c00 	.word	0x40004c00
 80035e4:	40005000 	.word	0x40005000
 80035e8:	2310      	movs	r3, #16
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a9f      	ldr	r2, [pc, #636]	@ (8003870 <UART_SetConfig+0x568>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d17a      	bne.n	80036ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d824      	bhi.n	800364a <UART_SetConfig+0x342>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <UART_SetConfig+0x300>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800362d 	.word	0x0800362d
 800360c:	0800364b 	.word	0x0800364b
 8003610:	08003635 	.word	0x08003635
 8003614:	0800364b 	.word	0x0800364b
 8003618:	0800363b 	.word	0x0800363b
 800361c:	0800364b 	.word	0x0800364b
 8003620:	0800364b 	.word	0x0800364b
 8003624:	0800364b 	.word	0x0800364b
 8003628:	08003643 	.word	0x08003643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7fe fc5e 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003630:	61f8      	str	r0, [r7, #28]
        break;
 8003632:	e010      	b.n	8003656 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003634:	4b8f      	ldr	r3, [pc, #572]	@ (8003874 <UART_SetConfig+0x56c>)
 8003636:	61fb      	str	r3, [r7, #28]
        break;
 8003638:	e00d      	b.n	8003656 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363a:	f7fe fbbf 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 800363e:	61f8      	str	r0, [r7, #28]
        break;
 8003640:	e009      	b.n	8003656 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	61fb      	str	r3, [r7, #28]
        break;
 8003648:	e005      	b.n	8003656 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80fb 	beq.w	8003854 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	429a      	cmp	r2, r3
 800366c:	d305      	bcc.n	800367a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	429a      	cmp	r2, r3
 8003678:	d903      	bls.n	8003682 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003680:	e0e8      	b.n	8003854 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	2200      	movs	r2, #0
 8003686:	461c      	mov	r4, r3
 8003688:	4615      	mov	r5, r2
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	022b      	lsls	r3, r5, #8
 8003694:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003698:	0222      	lsls	r2, r4, #8
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	6849      	ldr	r1, [r1, #4]
 800369e:	0849      	lsrs	r1, r1, #1
 80036a0:	2000      	movs	r0, #0
 80036a2:	4688      	mov	r8, r1
 80036a4:	4681      	mov	r9, r0
 80036a6:	eb12 0a08 	adds.w	sl, r2, r8
 80036aa:	eb43 0b09 	adc.w	fp, r3, r9
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	603b      	str	r3, [r7, #0]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036bc:	4650      	mov	r0, sl
 80036be:	4659      	mov	r1, fp
 80036c0:	f7fc fdd6 	bl	8000270 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4613      	mov	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036d2:	d308      	bcc.n	80036e6 <UART_SetConfig+0x3de>
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036da:	d204      	bcs.n	80036e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	60da      	str	r2, [r3, #12]
 80036e4:	e0b6      	b.n	8003854 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036ec:	e0b2      	b.n	8003854 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f6:	d15e      	bne.n	80037b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d828      	bhi.n	8003752 <UART_SetConfig+0x44a>
 8003700:	a201      	add	r2, pc, #4	@ (adr r2, 8003708 <UART_SetConfig+0x400>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe fbde 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003730:	61f8      	str	r0, [r7, #28]
        break;
 8003732:	e014      	b.n	800375e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7fe fbf0 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8003738:	61f8      	str	r0, [r7, #28]
        break;
 800373a:	e010      	b.n	800375e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b4d      	ldr	r3, [pc, #308]	@ (8003874 <UART_SetConfig+0x56c>)
 800373e:	61fb      	str	r3, [r7, #28]
        break;
 8003740:	e00d      	b.n	800375e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7fe fb3b 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8003746:	61f8      	str	r0, [r7, #28]
        break;
 8003748:	e009      	b.n	800375e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800374e:	61fb      	str	r3, [r7, #28]
        break;
 8003750:	e005      	b.n	800375e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800375c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d077      	beq.n	8003854 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005a      	lsls	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	441a      	add	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b0f      	cmp	r3, #15
 800377e:	d916      	bls.n	80037ae <UART_SetConfig+0x4a6>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003786:	d212      	bcs.n	80037ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f023 030f 	bic.w	r3, r3, #15
 8003790:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	b29a      	uxth	r2, r3
 800379e:	8afb      	ldrh	r3, [r7, #22]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	8afa      	ldrh	r2, [r7, #22]
 80037aa:	60da      	str	r2, [r3, #12]
 80037ac:	e052      	b.n	8003854 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037b4:	e04e      	b.n	8003854 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d827      	bhi.n	800380e <UART_SetConfig+0x506>
 80037be:	a201      	add	r2, pc, #4	@ (adr r2, 80037c4 <UART_SetConfig+0x4bc>)
 80037c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c4:	080037e9 	.word	0x080037e9
 80037c8:	080037f1 	.word	0x080037f1
 80037cc:	080037f9 	.word	0x080037f9
 80037d0:	0800380f 	.word	0x0800380f
 80037d4:	080037ff 	.word	0x080037ff
 80037d8:	0800380f 	.word	0x0800380f
 80037dc:	0800380f 	.word	0x0800380f
 80037e0:	0800380f 	.word	0x0800380f
 80037e4:	08003807 	.word	0x08003807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7fe fb80 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80037ec:	61f8      	str	r0, [r7, #28]
        break;
 80037ee:	e014      	b.n	800381a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7fe fb92 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 80037f4:	61f8      	str	r0, [r7, #28]
        break;
 80037f6:	e010      	b.n	800381a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003874 <UART_SetConfig+0x56c>)
 80037fa:	61fb      	str	r3, [r7, #28]
        break;
 80037fc:	e00d      	b.n	800381a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037fe:	f7fe fadd 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8003802:	61f8      	str	r0, [r7, #28]
        break;
 8003804:	e009      	b.n	800381a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800380a:	61fb      	str	r3, [r7, #28]
        break;
 800380c:	e005      	b.n	800381a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003818:	bf00      	nop
    }

    if (pclk != 0U)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d019      	beq.n	8003854 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	085a      	lsrs	r2, r3, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	441a      	add	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	d909      	bls.n	800384e <UART_SetConfig+0x546>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003840:	d205      	bcs.n	800384e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	e002      	b.n	8003854 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003860:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003864:	4618      	mov	r0, r3
 8003866:	3728      	adds	r7, #40	@ 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800386e:	bf00      	nop
 8003870:	40008000 	.word	0x40008000
 8003874:	00f42400 	.word	0x00f42400

08003878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003976:	d10a      	bne.n	800398e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]
  }
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b098      	sub	sp, #96	@ 0x60
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039cc:	f7fd f958 	bl	8000c80 <HAL_GetTick>
 80039d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d12e      	bne.n	8003a3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e8:	2200      	movs	r2, #0
 80039ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f88c 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d021      	beq.n	8003a3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	e853 3f00 	ldrex	r3, [r3]
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a20:	e841 2300 	strex	r3, r2, [r1]
 8003a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e6      	bne.n	80039fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e062      	b.n	8003b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d149      	bne.n	8003ae0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f856 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03c      	beq.n	8003ae0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	623b      	str	r3, [r7, #32]
   return(result);
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e6      	bne.n	8003a66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0301 	bic.w	r3, r3, #1
 8003aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab8:	61fa      	str	r2, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e011      	b.n	8003b04 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3758      	adds	r7, #88	@ 0x58
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e04f      	b.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d04b      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7fd f8ab 	bl	8000c80 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e04e      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d037      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b80      	cmp	r3, #128	@ 0x80
 8003b52:	d034      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b40      	cmp	r3, #64	@ 0x40
 8003b58:	d031      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d110      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f838 	bl	8003be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e029      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b98:	d111      	bne.n	8003bbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f81e 	bl	8003be6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e00f      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	bf0c      	ite	eq
 8003bce:	2301      	moveq	r3, #1
 8003bd0:	2300      	movne	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d0a0      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b095      	sub	sp, #84	@ 0x54
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3308      	adds	r3, #8
 8003c26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d118      	bne.n	8003c8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
 8003c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	613b      	str	r3, [r7, #16]
   return(result);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ca2:	bf00      	nop
 8003ca4:	3754      	adds	r7, #84	@ 0x54
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff fb05 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b088      	sub	sp, #32
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	6979      	ldr	r1, [r7, #20]
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e6      	bne.n	8003ce2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fad1 	bl	80032c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d26:	bf00      	nop
 8003d28:	3720      	adds	r7, #32
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <std>:
 8003d44:	2300      	movs	r3, #0
 8003d46:	b510      	push	{r4, lr}
 8003d48:	4604      	mov	r4, r0
 8003d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d52:	6083      	str	r3, [r0, #8]
 8003d54:	8181      	strh	r1, [r0, #12]
 8003d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d58:	81c2      	strh	r2, [r0, #14]
 8003d5a:	6183      	str	r3, [r0, #24]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	2208      	movs	r2, #8
 8003d60:	305c      	adds	r0, #92	@ 0x5c
 8003d62:	f000 f906 	bl	8003f72 <memset>
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <std+0x58>)
 8003d68:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <std+0x5c>)
 8003d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <std+0x60>)
 8003d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d72:	4b0d      	ldr	r3, [pc, #52]	@ (8003da8 <std+0x64>)
 8003d74:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <std+0x68>)
 8003d78:	6224      	str	r4, [r4, #32]
 8003d7a:	429c      	cmp	r4, r3
 8003d7c:	d006      	beq.n	8003d8c <std+0x48>
 8003d7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d82:	4294      	cmp	r4, r2
 8003d84:	d002      	beq.n	8003d8c <std+0x48>
 8003d86:	33d0      	adds	r3, #208	@ 0xd0
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d105      	bne.n	8003d98 <std+0x54>
 8003d8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d94:	f000 b966 	b.w	8004064 <__retarget_lock_init_recursive>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	bf00      	nop
 8003d9c:	08003eed 	.word	0x08003eed
 8003da0:	08003f0f 	.word	0x08003f0f
 8003da4:	08003f47 	.word	0x08003f47
 8003da8:	08003f6b 	.word	0x08003f6b
 8003dac:	2000019c 	.word	0x2000019c

08003db0 <stdio_exit_handler>:
 8003db0:	4a02      	ldr	r2, [pc, #8]	@ (8003dbc <stdio_exit_handler+0xc>)
 8003db2:	4903      	ldr	r1, [pc, #12]	@ (8003dc0 <stdio_exit_handler+0x10>)
 8003db4:	4803      	ldr	r0, [pc, #12]	@ (8003dc4 <stdio_exit_handler+0x14>)
 8003db6:	f000 b869 	b.w	8003e8c <_fwalk_sglue>
 8003dba:	bf00      	nop
 8003dbc:	2000000c 	.word	0x2000000c
 8003dc0:	08004905 	.word	0x08004905
 8003dc4:	2000001c 	.word	0x2000001c

08003dc8 <cleanup_stdio>:
 8003dc8:	6841      	ldr	r1, [r0, #4]
 8003dca:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <cleanup_stdio+0x34>)
 8003dcc:	4299      	cmp	r1, r3
 8003dce:	b510      	push	{r4, lr}
 8003dd0:	4604      	mov	r4, r0
 8003dd2:	d001      	beq.n	8003dd8 <cleanup_stdio+0x10>
 8003dd4:	f000 fd96 	bl	8004904 <_fflush_r>
 8003dd8:	68a1      	ldr	r1, [r4, #8]
 8003dda:	4b09      	ldr	r3, [pc, #36]	@ (8003e00 <cleanup_stdio+0x38>)
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	d002      	beq.n	8003de6 <cleanup_stdio+0x1e>
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 fd8f 	bl	8004904 <_fflush_r>
 8003de6:	68e1      	ldr	r1, [r4, #12]
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <cleanup_stdio+0x3c>)
 8003dea:	4299      	cmp	r1, r3
 8003dec:	d004      	beq.n	8003df8 <cleanup_stdio+0x30>
 8003dee:	4620      	mov	r0, r4
 8003df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003df4:	f000 bd86 	b.w	8004904 <_fflush_r>
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	bf00      	nop
 8003dfc:	2000019c 	.word	0x2000019c
 8003e00:	20000204 	.word	0x20000204
 8003e04:	2000026c 	.word	0x2000026c

08003e08 <global_stdio_init.part.0>:
 8003e08:	b510      	push	{r4, lr}
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <global_stdio_init.part.0+0x30>)
 8003e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8003e3c <global_stdio_init.part.0+0x34>)
 8003e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e40 <global_stdio_init.part.0+0x38>)
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	4620      	mov	r0, r4
 8003e14:	2200      	movs	r2, #0
 8003e16:	2104      	movs	r1, #4
 8003e18:	f7ff ff94 	bl	8003d44 <std>
 8003e1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e20:	2201      	movs	r2, #1
 8003e22:	2109      	movs	r1, #9
 8003e24:	f7ff ff8e 	bl	8003d44 <std>
 8003e28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e32:	2112      	movs	r1, #18
 8003e34:	f7ff bf86 	b.w	8003d44 <std>
 8003e38:	200002d4 	.word	0x200002d4
 8003e3c:	2000019c 	.word	0x2000019c
 8003e40:	08003db1 	.word	0x08003db1

08003e44 <__sfp_lock_acquire>:
 8003e44:	4801      	ldr	r0, [pc, #4]	@ (8003e4c <__sfp_lock_acquire+0x8>)
 8003e46:	f000 b90e 	b.w	8004066 <__retarget_lock_acquire_recursive>
 8003e4a:	bf00      	nop
 8003e4c:	200002dd 	.word	0x200002dd

08003e50 <__sfp_lock_release>:
 8003e50:	4801      	ldr	r0, [pc, #4]	@ (8003e58 <__sfp_lock_release+0x8>)
 8003e52:	f000 b909 	b.w	8004068 <__retarget_lock_release_recursive>
 8003e56:	bf00      	nop
 8003e58:	200002dd 	.word	0x200002dd

08003e5c <__sinit>:
 8003e5c:	b510      	push	{r4, lr}
 8003e5e:	4604      	mov	r4, r0
 8003e60:	f7ff fff0 	bl	8003e44 <__sfp_lock_acquire>
 8003e64:	6a23      	ldr	r3, [r4, #32]
 8003e66:	b11b      	cbz	r3, 8003e70 <__sinit+0x14>
 8003e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e6c:	f7ff bff0 	b.w	8003e50 <__sfp_lock_release>
 8003e70:	4b04      	ldr	r3, [pc, #16]	@ (8003e84 <__sinit+0x28>)
 8003e72:	6223      	str	r3, [r4, #32]
 8003e74:	4b04      	ldr	r3, [pc, #16]	@ (8003e88 <__sinit+0x2c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f5      	bne.n	8003e68 <__sinit+0xc>
 8003e7c:	f7ff ffc4 	bl	8003e08 <global_stdio_init.part.0>
 8003e80:	e7f2      	b.n	8003e68 <__sinit+0xc>
 8003e82:	bf00      	nop
 8003e84:	08003dc9 	.word	0x08003dc9
 8003e88:	200002d4 	.word	0x200002d4

08003e8c <_fwalk_sglue>:
 8003e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e90:	4607      	mov	r7, r0
 8003e92:	4688      	mov	r8, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	2600      	movs	r6, #0
 8003e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8003ea0:	d505      	bpl.n	8003eae <_fwalk_sglue+0x22>
 8003ea2:	6824      	ldr	r4, [r4, #0]
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	d1f7      	bne.n	8003e98 <_fwalk_sglue+0xc>
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eae:	89ab      	ldrh	r3, [r5, #12]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d907      	bls.n	8003ec4 <_fwalk_sglue+0x38>
 8003eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	d003      	beq.n	8003ec4 <_fwalk_sglue+0x38>
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c0      	blx	r8
 8003ec2:	4306      	orrs	r6, r0
 8003ec4:	3568      	adds	r5, #104	@ 0x68
 8003ec6:	e7e9      	b.n	8003e9c <_fwalk_sglue+0x10>

08003ec8 <iprintf>:
 8003ec8:	b40f      	push	{r0, r1, r2, r3}
 8003eca:	b507      	push	{r0, r1, r2, lr}
 8003ecc:	4906      	ldr	r1, [pc, #24]	@ (8003ee8 <iprintf+0x20>)
 8003ece:	ab04      	add	r3, sp, #16
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ed6:	6881      	ldr	r1, [r0, #8]
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	f000 f9e9 	bl	80042b0 <_vfiprintf_r>
 8003ede:	b003      	add	sp, #12
 8003ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ee4:	b004      	add	sp, #16
 8003ee6:	4770      	bx	lr
 8003ee8:	20000018 	.word	0x20000018

08003eec <__sread>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	460c      	mov	r4, r1
 8003ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef4:	f000 f868 	bl	8003fc8 <_read_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	bfab      	itete	ge
 8003efc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003efe:	89a3      	ldrhlt	r3, [r4, #12]
 8003f00:	181b      	addge	r3, r3, r0
 8003f02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f06:	bfac      	ite	ge
 8003f08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f0a:	81a3      	strhlt	r3, [r4, #12]
 8003f0c:	bd10      	pop	{r4, pc}

08003f0e <__swrite>:
 8003f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f12:	461f      	mov	r7, r3
 8003f14:	898b      	ldrh	r3, [r1, #12]
 8003f16:	05db      	lsls	r3, r3, #23
 8003f18:	4605      	mov	r5, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	d505      	bpl.n	8003f2c <__swrite+0x1e>
 8003f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f24:	2302      	movs	r3, #2
 8003f26:	2200      	movs	r2, #0
 8003f28:	f000 f83c 	bl	8003fa4 <_lseek_r>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f36:	81a3      	strh	r3, [r4, #12]
 8003f38:	4632      	mov	r2, r6
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f42:	f000 b853 	b.w	8003fec <_write_r>

08003f46 <__sseek>:
 8003f46:	b510      	push	{r4, lr}
 8003f48:	460c      	mov	r4, r1
 8003f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4e:	f000 f829 	bl	8003fa4 <_lseek_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	bf15      	itete	ne
 8003f58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003f5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003f5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003f62:	81a3      	strheq	r3, [r4, #12]
 8003f64:	bf18      	it	ne
 8003f66:	81a3      	strhne	r3, [r4, #12]
 8003f68:	bd10      	pop	{r4, pc}

08003f6a <__sclose>:
 8003f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6e:	f000 b809 	b.w	8003f84 <_close_r>

08003f72 <memset>:
 8003f72:	4402      	add	r2, r0
 8003f74:	4603      	mov	r3, r0
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d100      	bne.n	8003f7c <memset+0xa>
 8003f7a:	4770      	bx	lr
 8003f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f80:	e7f9      	b.n	8003f76 <memset+0x4>
	...

08003f84 <_close_r>:
 8003f84:	b538      	push	{r3, r4, r5, lr}
 8003f86:	4d06      	ldr	r5, [pc, #24]	@ (8003fa0 <_close_r+0x1c>)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	4608      	mov	r0, r1
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	f7fc fd5f 	bl	8000a52 <_close>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_close_r+0x1a>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_close_r+0x1a>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	200002d8 	.word	0x200002d8

08003fa4 <_lseek_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	@ (8003fc4 <_lseek_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fc fd74 	bl	8000aa0 <_lseek>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_lseek_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_lseek_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	200002d8 	.word	0x200002d8

08003fc8 <_read_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	4d07      	ldr	r5, [pc, #28]	@ (8003fe8 <_read_r+0x20>)
 8003fcc:	4604      	mov	r4, r0
 8003fce:	4608      	mov	r0, r1
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	602a      	str	r2, [r5, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f7fc fd1e 	bl	8000a18 <_read>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d102      	bne.n	8003fe6 <_read_r+0x1e>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	b103      	cbz	r3, 8003fe6 <_read_r+0x1e>
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	bd38      	pop	{r3, r4, r5, pc}
 8003fe8:	200002d8 	.word	0x200002d8

08003fec <_write_r>:
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	4d07      	ldr	r5, [pc, #28]	@ (800400c <_write_r+0x20>)
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	602a      	str	r2, [r5, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f7fc fab0 	bl	8000560 <_write>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_write_r+0x1e>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	b103      	cbz	r3, 800400a <_write_r+0x1e>
 8004008:	6023      	str	r3, [r4, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	200002d8 	.word	0x200002d8

08004010 <__errno>:
 8004010:	4b01      	ldr	r3, [pc, #4]	@ (8004018 <__errno+0x8>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000018 	.word	0x20000018

0800401c <__libc_init_array>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	4d0d      	ldr	r5, [pc, #52]	@ (8004054 <__libc_init_array+0x38>)
 8004020:	4c0d      	ldr	r4, [pc, #52]	@ (8004058 <__libc_init_array+0x3c>)
 8004022:	1b64      	subs	r4, r4, r5
 8004024:	10a4      	asrs	r4, r4, #2
 8004026:	2600      	movs	r6, #0
 8004028:	42a6      	cmp	r6, r4
 800402a:	d109      	bne.n	8004040 <__libc_init_array+0x24>
 800402c:	4d0b      	ldr	r5, [pc, #44]	@ (800405c <__libc_init_array+0x40>)
 800402e:	4c0c      	ldr	r4, [pc, #48]	@ (8004060 <__libc_init_array+0x44>)
 8004030:	f000 fdb8 	bl	8004ba4 <_init>
 8004034:	1b64      	subs	r4, r4, r5
 8004036:	10a4      	asrs	r4, r4, #2
 8004038:	2600      	movs	r6, #0
 800403a:	42a6      	cmp	r6, r4
 800403c:	d105      	bne.n	800404a <__libc_init_array+0x2e>
 800403e:	bd70      	pop	{r4, r5, r6, pc}
 8004040:	f855 3b04 	ldr.w	r3, [r5], #4
 8004044:	4798      	blx	r3
 8004046:	3601      	adds	r6, #1
 8004048:	e7ee      	b.n	8004028 <__libc_init_array+0xc>
 800404a:	f855 3b04 	ldr.w	r3, [r5], #4
 800404e:	4798      	blx	r3
 8004050:	3601      	adds	r6, #1
 8004052:	e7f2      	b.n	800403a <__libc_init_array+0x1e>
 8004054:	08004c58 	.word	0x08004c58
 8004058:	08004c58 	.word	0x08004c58
 800405c:	08004c58 	.word	0x08004c58
 8004060:	08004c5c 	.word	0x08004c5c

08004064 <__retarget_lock_init_recursive>:
 8004064:	4770      	bx	lr

08004066 <__retarget_lock_acquire_recursive>:
 8004066:	4770      	bx	lr

08004068 <__retarget_lock_release_recursive>:
 8004068:	4770      	bx	lr
	...

0800406c <_free_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4605      	mov	r5, r0
 8004070:	2900      	cmp	r1, #0
 8004072:	d041      	beq.n	80040f8 <_free_r+0x8c>
 8004074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004078:	1f0c      	subs	r4, r1, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	bfb8      	it	lt
 800407e:	18e4      	addlt	r4, r4, r3
 8004080:	f000 f8e0 	bl	8004244 <__malloc_lock>
 8004084:	4a1d      	ldr	r2, [pc, #116]	@ (80040fc <_free_r+0x90>)
 8004086:	6813      	ldr	r3, [r2, #0]
 8004088:	b933      	cbnz	r3, 8004098 <_free_r+0x2c>
 800408a:	6063      	str	r3, [r4, #4]
 800408c:	6014      	str	r4, [r2, #0]
 800408e:	4628      	mov	r0, r5
 8004090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004094:	f000 b8dc 	b.w	8004250 <__malloc_unlock>
 8004098:	42a3      	cmp	r3, r4
 800409a:	d908      	bls.n	80040ae <_free_r+0x42>
 800409c:	6820      	ldr	r0, [r4, #0]
 800409e:	1821      	adds	r1, r4, r0
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf01      	itttt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	1809      	addeq	r1, r1, r0
 80040aa:	6021      	streq	r1, [r4, #0]
 80040ac:	e7ed      	b.n	800408a <_free_r+0x1e>
 80040ae:	461a      	mov	r2, r3
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	b10b      	cbz	r3, 80040b8 <_free_r+0x4c>
 80040b4:	42a3      	cmp	r3, r4
 80040b6:	d9fa      	bls.n	80040ae <_free_r+0x42>
 80040b8:	6811      	ldr	r1, [r2, #0]
 80040ba:	1850      	adds	r0, r2, r1
 80040bc:	42a0      	cmp	r0, r4
 80040be:	d10b      	bne.n	80040d8 <_free_r+0x6c>
 80040c0:	6820      	ldr	r0, [r4, #0]
 80040c2:	4401      	add	r1, r0
 80040c4:	1850      	adds	r0, r2, r1
 80040c6:	4283      	cmp	r3, r0
 80040c8:	6011      	str	r1, [r2, #0]
 80040ca:	d1e0      	bne.n	800408e <_free_r+0x22>
 80040cc:	6818      	ldr	r0, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	6053      	str	r3, [r2, #4]
 80040d2:	4408      	add	r0, r1
 80040d4:	6010      	str	r0, [r2, #0]
 80040d6:	e7da      	b.n	800408e <_free_r+0x22>
 80040d8:	d902      	bls.n	80040e0 <_free_r+0x74>
 80040da:	230c      	movs	r3, #12
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	e7d6      	b.n	800408e <_free_r+0x22>
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	1821      	adds	r1, r4, r0
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf04      	itt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	6063      	str	r3, [r4, #4]
 80040ee:	bf04      	itt	eq
 80040f0:	1809      	addeq	r1, r1, r0
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	6054      	str	r4, [r2, #4]
 80040f6:	e7ca      	b.n	800408e <_free_r+0x22>
 80040f8:	bd38      	pop	{r3, r4, r5, pc}
 80040fa:	bf00      	nop
 80040fc:	200002e4 	.word	0x200002e4

08004100 <sbrk_aligned>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4e0f      	ldr	r6, [pc, #60]	@ (8004140 <sbrk_aligned+0x40>)
 8004104:	460c      	mov	r4, r1
 8004106:	6831      	ldr	r1, [r6, #0]
 8004108:	4605      	mov	r5, r0
 800410a:	b911      	cbnz	r1, 8004112 <sbrk_aligned+0x12>
 800410c:	f000 fcb6 	bl	8004a7c <_sbrk_r>
 8004110:	6030      	str	r0, [r6, #0]
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 fcb1 	bl	8004a7c <_sbrk_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d103      	bne.n	8004126 <sbrk_aligned+0x26>
 800411e:	f04f 34ff 	mov.w	r4, #4294967295
 8004122:	4620      	mov	r0, r4
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	1cc4      	adds	r4, r0, #3
 8004128:	f024 0403 	bic.w	r4, r4, #3
 800412c:	42a0      	cmp	r0, r4
 800412e:	d0f8      	beq.n	8004122 <sbrk_aligned+0x22>
 8004130:	1a21      	subs	r1, r4, r0
 8004132:	4628      	mov	r0, r5
 8004134:	f000 fca2 	bl	8004a7c <_sbrk_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d1f2      	bne.n	8004122 <sbrk_aligned+0x22>
 800413c:	e7ef      	b.n	800411e <sbrk_aligned+0x1e>
 800413e:	bf00      	nop
 8004140:	200002e0 	.word	0x200002e0

08004144 <_malloc_r>:
 8004144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004148:	1ccd      	adds	r5, r1, #3
 800414a:	f025 0503 	bic.w	r5, r5, #3
 800414e:	3508      	adds	r5, #8
 8004150:	2d0c      	cmp	r5, #12
 8004152:	bf38      	it	cc
 8004154:	250c      	movcc	r5, #12
 8004156:	2d00      	cmp	r5, #0
 8004158:	4606      	mov	r6, r0
 800415a:	db01      	blt.n	8004160 <_malloc_r+0x1c>
 800415c:	42a9      	cmp	r1, r5
 800415e:	d904      	bls.n	800416a <_malloc_r+0x26>
 8004160:	230c      	movs	r3, #12
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	2000      	movs	r0, #0
 8004166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004240 <_malloc_r+0xfc>
 800416e:	f000 f869 	bl	8004244 <__malloc_lock>
 8004172:	f8d8 3000 	ldr.w	r3, [r8]
 8004176:	461c      	mov	r4, r3
 8004178:	bb44      	cbnz	r4, 80041cc <_malloc_r+0x88>
 800417a:	4629      	mov	r1, r5
 800417c:	4630      	mov	r0, r6
 800417e:	f7ff ffbf 	bl	8004100 <sbrk_aligned>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	4604      	mov	r4, r0
 8004186:	d158      	bne.n	800423a <_malloc_r+0xf6>
 8004188:	f8d8 4000 	ldr.w	r4, [r8]
 800418c:	4627      	mov	r7, r4
 800418e:	2f00      	cmp	r7, #0
 8004190:	d143      	bne.n	800421a <_malloc_r+0xd6>
 8004192:	2c00      	cmp	r4, #0
 8004194:	d04b      	beq.n	800422e <_malloc_r+0xea>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	4639      	mov	r1, r7
 800419a:	4630      	mov	r0, r6
 800419c:	eb04 0903 	add.w	r9, r4, r3
 80041a0:	f000 fc6c 	bl	8004a7c <_sbrk_r>
 80041a4:	4581      	cmp	r9, r0
 80041a6:	d142      	bne.n	800422e <_malloc_r+0xea>
 80041a8:	6821      	ldr	r1, [r4, #0]
 80041aa:	1a6d      	subs	r5, r5, r1
 80041ac:	4629      	mov	r1, r5
 80041ae:	4630      	mov	r0, r6
 80041b0:	f7ff ffa6 	bl	8004100 <sbrk_aligned>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d03a      	beq.n	800422e <_malloc_r+0xea>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	442b      	add	r3, r5
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	f8d8 3000 	ldr.w	r3, [r8]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	bb62      	cbnz	r2, 8004220 <_malloc_r+0xdc>
 80041c6:	f8c8 7000 	str.w	r7, [r8]
 80041ca:	e00f      	b.n	80041ec <_malloc_r+0xa8>
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	1b52      	subs	r2, r2, r5
 80041d0:	d420      	bmi.n	8004214 <_malloc_r+0xd0>
 80041d2:	2a0b      	cmp	r2, #11
 80041d4:	d917      	bls.n	8004206 <_malloc_r+0xc2>
 80041d6:	1961      	adds	r1, r4, r5
 80041d8:	42a3      	cmp	r3, r4
 80041da:	6025      	str	r5, [r4, #0]
 80041dc:	bf18      	it	ne
 80041de:	6059      	strne	r1, [r3, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	bf08      	it	eq
 80041e4:	f8c8 1000 	streq.w	r1, [r8]
 80041e8:	5162      	str	r2, [r4, r5]
 80041ea:	604b      	str	r3, [r1, #4]
 80041ec:	4630      	mov	r0, r6
 80041ee:	f000 f82f 	bl	8004250 <__malloc_unlock>
 80041f2:	f104 000b 	add.w	r0, r4, #11
 80041f6:	1d23      	adds	r3, r4, #4
 80041f8:	f020 0007 	bic.w	r0, r0, #7
 80041fc:	1ac2      	subs	r2, r0, r3
 80041fe:	bf1c      	itt	ne
 8004200:	1a1b      	subne	r3, r3, r0
 8004202:	50a3      	strne	r3, [r4, r2]
 8004204:	e7af      	b.n	8004166 <_malloc_r+0x22>
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	42a3      	cmp	r3, r4
 800420a:	bf0c      	ite	eq
 800420c:	f8c8 2000 	streq.w	r2, [r8]
 8004210:	605a      	strne	r2, [r3, #4]
 8004212:	e7eb      	b.n	80041ec <_malloc_r+0xa8>
 8004214:	4623      	mov	r3, r4
 8004216:	6864      	ldr	r4, [r4, #4]
 8004218:	e7ae      	b.n	8004178 <_malloc_r+0x34>
 800421a:	463c      	mov	r4, r7
 800421c:	687f      	ldr	r7, [r7, #4]
 800421e:	e7b6      	b.n	800418e <_malloc_r+0x4a>
 8004220:	461a      	mov	r2, r3
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	42a3      	cmp	r3, r4
 8004226:	d1fb      	bne.n	8004220 <_malloc_r+0xdc>
 8004228:	2300      	movs	r3, #0
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e7de      	b.n	80041ec <_malloc_r+0xa8>
 800422e:	230c      	movs	r3, #12
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	4630      	mov	r0, r6
 8004234:	f000 f80c 	bl	8004250 <__malloc_unlock>
 8004238:	e794      	b.n	8004164 <_malloc_r+0x20>
 800423a:	6005      	str	r5, [r0, #0]
 800423c:	e7d6      	b.n	80041ec <_malloc_r+0xa8>
 800423e:	bf00      	nop
 8004240:	200002e4 	.word	0x200002e4

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__malloc_lock+0x8>)
 8004246:	f7ff bf0e 	b.w	8004066 <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	200002dc 	.word	0x200002dc

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	@ (8004258 <__malloc_unlock+0x8>)
 8004252:	f7ff bf09 	b.w	8004068 <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	200002dc 	.word	0x200002dc

0800425c <__sfputc_r>:
 800425c:	6893      	ldr	r3, [r2, #8]
 800425e:	3b01      	subs	r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	b410      	push	{r4}
 8004264:	6093      	str	r3, [r2, #8]
 8004266:	da08      	bge.n	800427a <__sfputc_r+0x1e>
 8004268:	6994      	ldr	r4, [r2, #24]
 800426a:	42a3      	cmp	r3, r4
 800426c:	db01      	blt.n	8004272 <__sfputc_r+0x16>
 800426e:	290a      	cmp	r1, #10
 8004270:	d103      	bne.n	800427a <__sfputc_r+0x1e>
 8004272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004276:	f000 bb6d 	b.w	8004954 <__swbuf_r>
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	1c58      	adds	r0, r3, #1
 800427e:	6010      	str	r0, [r2, #0]
 8004280:	7019      	strb	r1, [r3, #0]
 8004282:	4608      	mov	r0, r1
 8004284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004288:	4770      	bx	lr

0800428a <__sfputs_r>:
 800428a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428c:	4606      	mov	r6, r0
 800428e:	460f      	mov	r7, r1
 8004290:	4614      	mov	r4, r2
 8004292:	18d5      	adds	r5, r2, r3
 8004294:	42ac      	cmp	r4, r5
 8004296:	d101      	bne.n	800429c <__sfputs_r+0x12>
 8004298:	2000      	movs	r0, #0
 800429a:	e007      	b.n	80042ac <__sfputs_r+0x22>
 800429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a0:	463a      	mov	r2, r7
 80042a2:	4630      	mov	r0, r6
 80042a4:	f7ff ffda 	bl	800425c <__sfputc_r>
 80042a8:	1c43      	adds	r3, r0, #1
 80042aa:	d1f3      	bne.n	8004294 <__sfputs_r+0xa>
 80042ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042b0 <_vfiprintf_r>:
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	460d      	mov	r5, r1
 80042b6:	b09d      	sub	sp, #116	@ 0x74
 80042b8:	4614      	mov	r4, r2
 80042ba:	4698      	mov	r8, r3
 80042bc:	4606      	mov	r6, r0
 80042be:	b118      	cbz	r0, 80042c8 <_vfiprintf_r+0x18>
 80042c0:	6a03      	ldr	r3, [r0, #32]
 80042c2:	b90b      	cbnz	r3, 80042c8 <_vfiprintf_r+0x18>
 80042c4:	f7ff fdca 	bl	8003e5c <__sinit>
 80042c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042ca:	07d9      	lsls	r1, r3, #31
 80042cc:	d405      	bmi.n	80042da <_vfiprintf_r+0x2a>
 80042ce:	89ab      	ldrh	r3, [r5, #12]
 80042d0:	059a      	lsls	r2, r3, #22
 80042d2:	d402      	bmi.n	80042da <_vfiprintf_r+0x2a>
 80042d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042d6:	f7ff fec6 	bl	8004066 <__retarget_lock_acquire_recursive>
 80042da:	89ab      	ldrh	r3, [r5, #12]
 80042dc:	071b      	lsls	r3, r3, #28
 80042de:	d501      	bpl.n	80042e4 <_vfiprintf_r+0x34>
 80042e0:	692b      	ldr	r3, [r5, #16]
 80042e2:	b99b      	cbnz	r3, 800430c <_vfiprintf_r+0x5c>
 80042e4:	4629      	mov	r1, r5
 80042e6:	4630      	mov	r0, r6
 80042e8:	f000 fb72 	bl	80049d0 <__swsetup_r>
 80042ec:	b170      	cbz	r0, 800430c <_vfiprintf_r+0x5c>
 80042ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042f0:	07dc      	lsls	r4, r3, #31
 80042f2:	d504      	bpl.n	80042fe <_vfiprintf_r+0x4e>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	b01d      	add	sp, #116	@ 0x74
 80042fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fe:	89ab      	ldrh	r3, [r5, #12]
 8004300:	0598      	lsls	r0, r3, #22
 8004302:	d4f7      	bmi.n	80042f4 <_vfiprintf_r+0x44>
 8004304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004306:	f7ff feaf 	bl	8004068 <__retarget_lock_release_recursive>
 800430a:	e7f3      	b.n	80042f4 <_vfiprintf_r+0x44>
 800430c:	2300      	movs	r3, #0
 800430e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004310:	2320      	movs	r3, #32
 8004312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004316:	f8cd 800c 	str.w	r8, [sp, #12]
 800431a:	2330      	movs	r3, #48	@ 0x30
 800431c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80044cc <_vfiprintf_r+0x21c>
 8004320:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004324:	f04f 0901 	mov.w	r9, #1
 8004328:	4623      	mov	r3, r4
 800432a:	469a      	mov	sl, r3
 800432c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004330:	b10a      	cbz	r2, 8004336 <_vfiprintf_r+0x86>
 8004332:	2a25      	cmp	r2, #37	@ 0x25
 8004334:	d1f9      	bne.n	800432a <_vfiprintf_r+0x7a>
 8004336:	ebba 0b04 	subs.w	fp, sl, r4
 800433a:	d00b      	beq.n	8004354 <_vfiprintf_r+0xa4>
 800433c:	465b      	mov	r3, fp
 800433e:	4622      	mov	r2, r4
 8004340:	4629      	mov	r1, r5
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff ffa1 	bl	800428a <__sfputs_r>
 8004348:	3001      	adds	r0, #1
 800434a:	f000 80a7 	beq.w	800449c <_vfiprintf_r+0x1ec>
 800434e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004350:	445a      	add	r2, fp
 8004352:	9209      	str	r2, [sp, #36]	@ 0x24
 8004354:	f89a 3000 	ldrb.w	r3, [sl]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 809f 	beq.w	800449c <_vfiprintf_r+0x1ec>
 800435e:	2300      	movs	r3, #0
 8004360:	f04f 32ff 	mov.w	r2, #4294967295
 8004364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004368:	f10a 0a01 	add.w	sl, sl, #1
 800436c:	9304      	str	r3, [sp, #16]
 800436e:	9307      	str	r3, [sp, #28]
 8004370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004374:	931a      	str	r3, [sp, #104]	@ 0x68
 8004376:	4654      	mov	r4, sl
 8004378:	2205      	movs	r2, #5
 800437a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437e:	4853      	ldr	r0, [pc, #332]	@ (80044cc <_vfiprintf_r+0x21c>)
 8004380:	f7fb ff26 	bl	80001d0 <memchr>
 8004384:	9a04      	ldr	r2, [sp, #16]
 8004386:	b9d8      	cbnz	r0, 80043c0 <_vfiprintf_r+0x110>
 8004388:	06d1      	lsls	r1, r2, #27
 800438a:	bf44      	itt	mi
 800438c:	2320      	movmi	r3, #32
 800438e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004392:	0713      	lsls	r3, r2, #28
 8004394:	bf44      	itt	mi
 8004396:	232b      	movmi	r3, #43	@ 0x2b
 8004398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800439c:	f89a 3000 	ldrb.w	r3, [sl]
 80043a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80043a2:	d015      	beq.n	80043d0 <_vfiprintf_r+0x120>
 80043a4:	9a07      	ldr	r2, [sp, #28]
 80043a6:	4654      	mov	r4, sl
 80043a8:	2000      	movs	r0, #0
 80043aa:	f04f 0c0a 	mov.w	ip, #10
 80043ae:	4621      	mov	r1, r4
 80043b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043b4:	3b30      	subs	r3, #48	@ 0x30
 80043b6:	2b09      	cmp	r3, #9
 80043b8:	d94b      	bls.n	8004452 <_vfiprintf_r+0x1a2>
 80043ba:	b1b0      	cbz	r0, 80043ea <_vfiprintf_r+0x13a>
 80043bc:	9207      	str	r2, [sp, #28]
 80043be:	e014      	b.n	80043ea <_vfiprintf_r+0x13a>
 80043c0:	eba0 0308 	sub.w	r3, r0, r8
 80043c4:	fa09 f303 	lsl.w	r3, r9, r3
 80043c8:	4313      	orrs	r3, r2
 80043ca:	9304      	str	r3, [sp, #16]
 80043cc:	46a2      	mov	sl, r4
 80043ce:	e7d2      	b.n	8004376 <_vfiprintf_r+0xc6>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	1d19      	adds	r1, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	9103      	str	r1, [sp, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bfbb      	ittet	lt
 80043dc:	425b      	neglt	r3, r3
 80043de:	f042 0202 	orrlt.w	r2, r2, #2
 80043e2:	9307      	strge	r3, [sp, #28]
 80043e4:	9307      	strlt	r3, [sp, #28]
 80043e6:	bfb8      	it	lt
 80043e8:	9204      	strlt	r2, [sp, #16]
 80043ea:	7823      	ldrb	r3, [r4, #0]
 80043ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ee:	d10a      	bne.n	8004406 <_vfiprintf_r+0x156>
 80043f0:	7863      	ldrb	r3, [r4, #1]
 80043f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043f4:	d132      	bne.n	800445c <_vfiprintf_r+0x1ac>
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	1d1a      	adds	r2, r3, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	9203      	str	r2, [sp, #12]
 80043fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004402:	3402      	adds	r4, #2
 8004404:	9305      	str	r3, [sp, #20]
 8004406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80044dc <_vfiprintf_r+0x22c>
 800440a:	7821      	ldrb	r1, [r4, #0]
 800440c:	2203      	movs	r2, #3
 800440e:	4650      	mov	r0, sl
 8004410:	f7fb fede 	bl	80001d0 <memchr>
 8004414:	b138      	cbz	r0, 8004426 <_vfiprintf_r+0x176>
 8004416:	9b04      	ldr	r3, [sp, #16]
 8004418:	eba0 000a 	sub.w	r0, r0, sl
 800441c:	2240      	movs	r2, #64	@ 0x40
 800441e:	4082      	lsls	r2, r0
 8004420:	4313      	orrs	r3, r2
 8004422:	3401      	adds	r4, #1
 8004424:	9304      	str	r3, [sp, #16]
 8004426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442a:	4829      	ldr	r0, [pc, #164]	@ (80044d0 <_vfiprintf_r+0x220>)
 800442c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004430:	2206      	movs	r2, #6
 8004432:	f7fb fecd 	bl	80001d0 <memchr>
 8004436:	2800      	cmp	r0, #0
 8004438:	d03f      	beq.n	80044ba <_vfiprintf_r+0x20a>
 800443a:	4b26      	ldr	r3, [pc, #152]	@ (80044d4 <_vfiprintf_r+0x224>)
 800443c:	bb1b      	cbnz	r3, 8004486 <_vfiprintf_r+0x1d6>
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	3307      	adds	r3, #7
 8004442:	f023 0307 	bic.w	r3, r3, #7
 8004446:	3308      	adds	r3, #8
 8004448:	9303      	str	r3, [sp, #12]
 800444a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800444c:	443b      	add	r3, r7
 800444e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004450:	e76a      	b.n	8004328 <_vfiprintf_r+0x78>
 8004452:	fb0c 3202 	mla	r2, ip, r2, r3
 8004456:	460c      	mov	r4, r1
 8004458:	2001      	movs	r0, #1
 800445a:	e7a8      	b.n	80043ae <_vfiprintf_r+0xfe>
 800445c:	2300      	movs	r3, #0
 800445e:	3401      	adds	r4, #1
 8004460:	9305      	str	r3, [sp, #20]
 8004462:	4619      	mov	r1, r3
 8004464:	f04f 0c0a 	mov.w	ip, #10
 8004468:	4620      	mov	r0, r4
 800446a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800446e:	3a30      	subs	r2, #48	@ 0x30
 8004470:	2a09      	cmp	r2, #9
 8004472:	d903      	bls.n	800447c <_vfiprintf_r+0x1cc>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0c6      	beq.n	8004406 <_vfiprintf_r+0x156>
 8004478:	9105      	str	r1, [sp, #20]
 800447a:	e7c4      	b.n	8004406 <_vfiprintf_r+0x156>
 800447c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004480:	4604      	mov	r4, r0
 8004482:	2301      	movs	r3, #1
 8004484:	e7f0      	b.n	8004468 <_vfiprintf_r+0x1b8>
 8004486:	ab03      	add	r3, sp, #12
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	462a      	mov	r2, r5
 800448c:	4b12      	ldr	r3, [pc, #72]	@ (80044d8 <_vfiprintf_r+0x228>)
 800448e:	a904      	add	r1, sp, #16
 8004490:	4630      	mov	r0, r6
 8004492:	f3af 8000 	nop.w
 8004496:	4607      	mov	r7, r0
 8004498:	1c78      	adds	r0, r7, #1
 800449a:	d1d6      	bne.n	800444a <_vfiprintf_r+0x19a>
 800449c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800449e:	07d9      	lsls	r1, r3, #31
 80044a0:	d405      	bmi.n	80044ae <_vfiprintf_r+0x1fe>
 80044a2:	89ab      	ldrh	r3, [r5, #12]
 80044a4:	059a      	lsls	r2, r3, #22
 80044a6:	d402      	bmi.n	80044ae <_vfiprintf_r+0x1fe>
 80044a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80044aa:	f7ff fddd 	bl	8004068 <__retarget_lock_release_recursive>
 80044ae:	89ab      	ldrh	r3, [r5, #12]
 80044b0:	065b      	lsls	r3, r3, #25
 80044b2:	f53f af1f 	bmi.w	80042f4 <_vfiprintf_r+0x44>
 80044b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044b8:	e71e      	b.n	80042f8 <_vfiprintf_r+0x48>
 80044ba:	ab03      	add	r3, sp, #12
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	462a      	mov	r2, r5
 80044c0:	4b05      	ldr	r3, [pc, #20]	@ (80044d8 <_vfiprintf_r+0x228>)
 80044c2:	a904      	add	r1, sp, #16
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 f879 	bl	80045bc <_printf_i>
 80044ca:	e7e4      	b.n	8004496 <_vfiprintf_r+0x1e6>
 80044cc:	08004c1c 	.word	0x08004c1c
 80044d0:	08004c26 	.word	0x08004c26
 80044d4:	00000000 	.word	0x00000000
 80044d8:	0800428b 	.word	0x0800428b
 80044dc:	08004c22 	.word	0x08004c22

080044e0 <_printf_common>:
 80044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	4616      	mov	r6, r2
 80044e6:	4698      	mov	r8, r3
 80044e8:	688a      	ldr	r2, [r1, #8]
 80044ea:	690b      	ldr	r3, [r1, #16]
 80044ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044f0:	4293      	cmp	r3, r2
 80044f2:	bfb8      	it	lt
 80044f4:	4613      	movlt	r3, r2
 80044f6:	6033      	str	r3, [r6, #0]
 80044f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044fc:	4607      	mov	r7, r0
 80044fe:	460c      	mov	r4, r1
 8004500:	b10a      	cbz	r2, 8004506 <_printf_common+0x26>
 8004502:	3301      	adds	r3, #1
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	0699      	lsls	r1, r3, #26
 800450a:	bf42      	ittt	mi
 800450c:	6833      	ldrmi	r3, [r6, #0]
 800450e:	3302      	addmi	r3, #2
 8004510:	6033      	strmi	r3, [r6, #0]
 8004512:	6825      	ldr	r5, [r4, #0]
 8004514:	f015 0506 	ands.w	r5, r5, #6
 8004518:	d106      	bne.n	8004528 <_printf_common+0x48>
 800451a:	f104 0a19 	add.w	sl, r4, #25
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	6832      	ldr	r2, [r6, #0]
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	42ab      	cmp	r3, r5
 8004526:	dc26      	bgt.n	8004576 <_printf_common+0x96>
 8004528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	3b00      	subs	r3, #0
 8004530:	bf18      	it	ne
 8004532:	2301      	movne	r3, #1
 8004534:	0692      	lsls	r2, r2, #26
 8004536:	d42b      	bmi.n	8004590 <_printf_common+0xb0>
 8004538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800453c:	4641      	mov	r1, r8
 800453e:	4638      	mov	r0, r7
 8004540:	47c8      	blx	r9
 8004542:	3001      	adds	r0, #1
 8004544:	d01e      	beq.n	8004584 <_printf_common+0xa4>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	6922      	ldr	r2, [r4, #16]
 800454a:	f003 0306 	and.w	r3, r3, #6
 800454e:	2b04      	cmp	r3, #4
 8004550:	bf02      	ittt	eq
 8004552:	68e5      	ldreq	r5, [r4, #12]
 8004554:	6833      	ldreq	r3, [r6, #0]
 8004556:	1aed      	subeq	r5, r5, r3
 8004558:	68a3      	ldr	r3, [r4, #8]
 800455a:	bf0c      	ite	eq
 800455c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004560:	2500      	movne	r5, #0
 8004562:	4293      	cmp	r3, r2
 8004564:	bfc4      	itt	gt
 8004566:	1a9b      	subgt	r3, r3, r2
 8004568:	18ed      	addgt	r5, r5, r3
 800456a:	2600      	movs	r6, #0
 800456c:	341a      	adds	r4, #26
 800456e:	42b5      	cmp	r5, r6
 8004570:	d11a      	bne.n	80045a8 <_printf_common+0xc8>
 8004572:	2000      	movs	r0, #0
 8004574:	e008      	b.n	8004588 <_printf_common+0xa8>
 8004576:	2301      	movs	r3, #1
 8004578:	4652      	mov	r2, sl
 800457a:	4641      	mov	r1, r8
 800457c:	4638      	mov	r0, r7
 800457e:	47c8      	blx	r9
 8004580:	3001      	adds	r0, #1
 8004582:	d103      	bne.n	800458c <_printf_common+0xac>
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458c:	3501      	adds	r5, #1
 800458e:	e7c6      	b.n	800451e <_printf_common+0x3e>
 8004590:	18e1      	adds	r1, r4, r3
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	2030      	movs	r0, #48	@ 0x30
 8004596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800459a:	4422      	add	r2, r4
 800459c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045a4:	3302      	adds	r3, #2
 80045a6:	e7c7      	b.n	8004538 <_printf_common+0x58>
 80045a8:	2301      	movs	r3, #1
 80045aa:	4622      	mov	r2, r4
 80045ac:	4641      	mov	r1, r8
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c8      	blx	r9
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0e6      	beq.n	8004584 <_printf_common+0xa4>
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7d9      	b.n	800456e <_printf_common+0x8e>
	...

080045bc <_printf_i>:
 80045bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045c0:	7e0f      	ldrb	r7, [r1, #24]
 80045c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80045c4:	2f78      	cmp	r7, #120	@ 0x78
 80045c6:	4691      	mov	r9, r2
 80045c8:	4680      	mov	r8, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	469a      	mov	sl, r3
 80045ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80045d2:	d807      	bhi.n	80045e4 <_printf_i+0x28>
 80045d4:	2f62      	cmp	r7, #98	@ 0x62
 80045d6:	d80a      	bhi.n	80045ee <_printf_i+0x32>
 80045d8:	2f00      	cmp	r7, #0
 80045da:	f000 80d2 	beq.w	8004782 <_printf_i+0x1c6>
 80045de:	2f58      	cmp	r7, #88	@ 0x58
 80045e0:	f000 80b9 	beq.w	8004756 <_printf_i+0x19a>
 80045e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045ec:	e03a      	b.n	8004664 <_printf_i+0xa8>
 80045ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045f2:	2b15      	cmp	r3, #21
 80045f4:	d8f6      	bhi.n	80045e4 <_printf_i+0x28>
 80045f6:	a101      	add	r1, pc, #4	@ (adr r1, 80045fc <_printf_i+0x40>)
 80045f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045fc:	08004655 	.word	0x08004655
 8004600:	08004669 	.word	0x08004669
 8004604:	080045e5 	.word	0x080045e5
 8004608:	080045e5 	.word	0x080045e5
 800460c:	080045e5 	.word	0x080045e5
 8004610:	080045e5 	.word	0x080045e5
 8004614:	08004669 	.word	0x08004669
 8004618:	080045e5 	.word	0x080045e5
 800461c:	080045e5 	.word	0x080045e5
 8004620:	080045e5 	.word	0x080045e5
 8004624:	080045e5 	.word	0x080045e5
 8004628:	08004769 	.word	0x08004769
 800462c:	08004693 	.word	0x08004693
 8004630:	08004723 	.word	0x08004723
 8004634:	080045e5 	.word	0x080045e5
 8004638:	080045e5 	.word	0x080045e5
 800463c:	0800478b 	.word	0x0800478b
 8004640:	080045e5 	.word	0x080045e5
 8004644:	08004693 	.word	0x08004693
 8004648:	080045e5 	.word	0x080045e5
 800464c:	080045e5 	.word	0x080045e5
 8004650:	0800472b 	.word	0x0800472b
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6032      	str	r2, [r6, #0]
 800465c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004664:	2301      	movs	r3, #1
 8004666:	e09d      	b.n	80047a4 <_printf_i+0x1e8>
 8004668:	6833      	ldr	r3, [r6, #0]
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	1d19      	adds	r1, r3, #4
 800466e:	6031      	str	r1, [r6, #0]
 8004670:	0606      	lsls	r6, r0, #24
 8004672:	d501      	bpl.n	8004678 <_printf_i+0xbc>
 8004674:	681d      	ldr	r5, [r3, #0]
 8004676:	e003      	b.n	8004680 <_printf_i+0xc4>
 8004678:	0645      	lsls	r5, r0, #25
 800467a:	d5fb      	bpl.n	8004674 <_printf_i+0xb8>
 800467c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004680:	2d00      	cmp	r5, #0
 8004682:	da03      	bge.n	800468c <_printf_i+0xd0>
 8004684:	232d      	movs	r3, #45	@ 0x2d
 8004686:	426d      	negs	r5, r5
 8004688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800468c:	4859      	ldr	r0, [pc, #356]	@ (80047f4 <_printf_i+0x238>)
 800468e:	230a      	movs	r3, #10
 8004690:	e011      	b.n	80046b6 <_printf_i+0xfa>
 8004692:	6821      	ldr	r1, [r4, #0]
 8004694:	6833      	ldr	r3, [r6, #0]
 8004696:	0608      	lsls	r0, r1, #24
 8004698:	f853 5b04 	ldr.w	r5, [r3], #4
 800469c:	d402      	bmi.n	80046a4 <_printf_i+0xe8>
 800469e:	0649      	lsls	r1, r1, #25
 80046a0:	bf48      	it	mi
 80046a2:	b2ad      	uxthmi	r5, r5
 80046a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80046a6:	4853      	ldr	r0, [pc, #332]	@ (80047f4 <_printf_i+0x238>)
 80046a8:	6033      	str	r3, [r6, #0]
 80046aa:	bf14      	ite	ne
 80046ac:	230a      	movne	r3, #10
 80046ae:	2308      	moveq	r3, #8
 80046b0:	2100      	movs	r1, #0
 80046b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046b6:	6866      	ldr	r6, [r4, #4]
 80046b8:	60a6      	str	r6, [r4, #8]
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	bfa2      	ittt	ge
 80046be:	6821      	ldrge	r1, [r4, #0]
 80046c0:	f021 0104 	bicge.w	r1, r1, #4
 80046c4:	6021      	strge	r1, [r4, #0]
 80046c6:	b90d      	cbnz	r5, 80046cc <_printf_i+0x110>
 80046c8:	2e00      	cmp	r6, #0
 80046ca:	d04b      	beq.n	8004764 <_printf_i+0x1a8>
 80046cc:	4616      	mov	r6, r2
 80046ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80046d2:	fb03 5711 	mls	r7, r3, r1, r5
 80046d6:	5dc7      	ldrb	r7, [r0, r7]
 80046d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046dc:	462f      	mov	r7, r5
 80046de:	42bb      	cmp	r3, r7
 80046e0:	460d      	mov	r5, r1
 80046e2:	d9f4      	bls.n	80046ce <_printf_i+0x112>
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d10b      	bne.n	8004700 <_printf_i+0x144>
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	07df      	lsls	r7, r3, #31
 80046ec:	d508      	bpl.n	8004700 <_printf_i+0x144>
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	6861      	ldr	r1, [r4, #4]
 80046f2:	4299      	cmp	r1, r3
 80046f4:	bfde      	ittt	le
 80046f6:	2330      	movle	r3, #48	@ 0x30
 80046f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004700:	1b92      	subs	r2, r2, r6
 8004702:	6122      	str	r2, [r4, #16]
 8004704:	f8cd a000 	str.w	sl, [sp]
 8004708:	464b      	mov	r3, r9
 800470a:	aa03      	add	r2, sp, #12
 800470c:	4621      	mov	r1, r4
 800470e:	4640      	mov	r0, r8
 8004710:	f7ff fee6 	bl	80044e0 <_printf_common>
 8004714:	3001      	adds	r0, #1
 8004716:	d14a      	bne.n	80047ae <_printf_i+0x1f2>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	b004      	add	sp, #16
 800471e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	f043 0320 	orr.w	r3, r3, #32
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	4833      	ldr	r0, [pc, #204]	@ (80047f8 <_printf_i+0x23c>)
 800472c:	2778      	movs	r7, #120	@ 0x78
 800472e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	6831      	ldr	r1, [r6, #0]
 8004736:	061f      	lsls	r7, r3, #24
 8004738:	f851 5b04 	ldr.w	r5, [r1], #4
 800473c:	d402      	bmi.n	8004744 <_printf_i+0x188>
 800473e:	065f      	lsls	r7, r3, #25
 8004740:	bf48      	it	mi
 8004742:	b2ad      	uxthmi	r5, r5
 8004744:	6031      	str	r1, [r6, #0]
 8004746:	07d9      	lsls	r1, r3, #31
 8004748:	bf44      	itt	mi
 800474a:	f043 0320 	orrmi.w	r3, r3, #32
 800474e:	6023      	strmi	r3, [r4, #0]
 8004750:	b11d      	cbz	r5, 800475a <_printf_i+0x19e>
 8004752:	2310      	movs	r3, #16
 8004754:	e7ac      	b.n	80046b0 <_printf_i+0xf4>
 8004756:	4827      	ldr	r0, [pc, #156]	@ (80047f4 <_printf_i+0x238>)
 8004758:	e7e9      	b.n	800472e <_printf_i+0x172>
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	f023 0320 	bic.w	r3, r3, #32
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	e7f6      	b.n	8004752 <_printf_i+0x196>
 8004764:	4616      	mov	r6, r2
 8004766:	e7bd      	b.n	80046e4 <_printf_i+0x128>
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	6825      	ldr	r5, [r4, #0]
 800476c:	6961      	ldr	r1, [r4, #20]
 800476e:	1d18      	adds	r0, r3, #4
 8004770:	6030      	str	r0, [r6, #0]
 8004772:	062e      	lsls	r6, r5, #24
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	d501      	bpl.n	800477c <_printf_i+0x1c0>
 8004778:	6019      	str	r1, [r3, #0]
 800477a:	e002      	b.n	8004782 <_printf_i+0x1c6>
 800477c:	0668      	lsls	r0, r5, #25
 800477e:	d5fb      	bpl.n	8004778 <_printf_i+0x1bc>
 8004780:	8019      	strh	r1, [r3, #0]
 8004782:	2300      	movs	r3, #0
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	4616      	mov	r6, r2
 8004788:	e7bc      	b.n	8004704 <_printf_i+0x148>
 800478a:	6833      	ldr	r3, [r6, #0]
 800478c:	1d1a      	adds	r2, r3, #4
 800478e:	6032      	str	r2, [r6, #0]
 8004790:	681e      	ldr	r6, [r3, #0]
 8004792:	6862      	ldr	r2, [r4, #4]
 8004794:	2100      	movs	r1, #0
 8004796:	4630      	mov	r0, r6
 8004798:	f7fb fd1a 	bl	80001d0 <memchr>
 800479c:	b108      	cbz	r0, 80047a2 <_printf_i+0x1e6>
 800479e:	1b80      	subs	r0, r0, r6
 80047a0:	6060      	str	r0, [r4, #4]
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	2300      	movs	r3, #0
 80047a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ac:	e7aa      	b.n	8004704 <_printf_i+0x148>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	4632      	mov	r2, r6
 80047b2:	4649      	mov	r1, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	47d0      	blx	sl
 80047b8:	3001      	adds	r0, #1
 80047ba:	d0ad      	beq.n	8004718 <_printf_i+0x15c>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	079b      	lsls	r3, r3, #30
 80047c0:	d413      	bmi.n	80047ea <_printf_i+0x22e>
 80047c2:	68e0      	ldr	r0, [r4, #12]
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	4298      	cmp	r0, r3
 80047c8:	bfb8      	it	lt
 80047ca:	4618      	movlt	r0, r3
 80047cc:	e7a6      	b.n	800471c <_printf_i+0x160>
 80047ce:	2301      	movs	r3, #1
 80047d0:	4632      	mov	r2, r6
 80047d2:	4649      	mov	r1, r9
 80047d4:	4640      	mov	r0, r8
 80047d6:	47d0      	blx	sl
 80047d8:	3001      	adds	r0, #1
 80047da:	d09d      	beq.n	8004718 <_printf_i+0x15c>
 80047dc:	3501      	adds	r5, #1
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	9903      	ldr	r1, [sp, #12]
 80047e2:	1a5b      	subs	r3, r3, r1
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dcf2      	bgt.n	80047ce <_printf_i+0x212>
 80047e8:	e7eb      	b.n	80047c2 <_printf_i+0x206>
 80047ea:	2500      	movs	r5, #0
 80047ec:	f104 0619 	add.w	r6, r4, #25
 80047f0:	e7f5      	b.n	80047de <_printf_i+0x222>
 80047f2:	bf00      	nop
 80047f4:	08004c2d 	.word	0x08004c2d
 80047f8:	08004c3e 	.word	0x08004c3e

080047fc <__sflush_r>:
 80047fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004804:	0716      	lsls	r6, r2, #28
 8004806:	4605      	mov	r5, r0
 8004808:	460c      	mov	r4, r1
 800480a:	d454      	bmi.n	80048b6 <__sflush_r+0xba>
 800480c:	684b      	ldr	r3, [r1, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	dc02      	bgt.n	8004818 <__sflush_r+0x1c>
 8004812:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004814:	2b00      	cmp	r3, #0
 8004816:	dd48      	ble.n	80048aa <__sflush_r+0xae>
 8004818:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800481a:	2e00      	cmp	r6, #0
 800481c:	d045      	beq.n	80048aa <__sflush_r+0xae>
 800481e:	2300      	movs	r3, #0
 8004820:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004824:	682f      	ldr	r7, [r5, #0]
 8004826:	6a21      	ldr	r1, [r4, #32]
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	d030      	beq.n	800488e <__sflush_r+0x92>
 800482c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	0759      	lsls	r1, r3, #29
 8004832:	d505      	bpl.n	8004840 <__sflush_r+0x44>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800483a:	b10b      	cbz	r3, 8004840 <__sflush_r+0x44>
 800483c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004844:	6a21      	ldr	r1, [r4, #32]
 8004846:	4628      	mov	r0, r5
 8004848:	47b0      	blx	r6
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	d106      	bne.n	800485e <__sflush_r+0x62>
 8004850:	6829      	ldr	r1, [r5, #0]
 8004852:	291d      	cmp	r1, #29
 8004854:	d82b      	bhi.n	80048ae <__sflush_r+0xb2>
 8004856:	4a2a      	ldr	r2, [pc, #168]	@ (8004900 <__sflush_r+0x104>)
 8004858:	410a      	asrs	r2, r1
 800485a:	07d6      	lsls	r6, r2, #31
 800485c:	d427      	bmi.n	80048ae <__sflush_r+0xb2>
 800485e:	2200      	movs	r2, #0
 8004860:	6062      	str	r2, [r4, #4]
 8004862:	04d9      	lsls	r1, r3, #19
 8004864:	6922      	ldr	r2, [r4, #16]
 8004866:	6022      	str	r2, [r4, #0]
 8004868:	d504      	bpl.n	8004874 <__sflush_r+0x78>
 800486a:	1c42      	adds	r2, r0, #1
 800486c:	d101      	bne.n	8004872 <__sflush_r+0x76>
 800486e:	682b      	ldr	r3, [r5, #0]
 8004870:	b903      	cbnz	r3, 8004874 <__sflush_r+0x78>
 8004872:	6560      	str	r0, [r4, #84]	@ 0x54
 8004874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004876:	602f      	str	r7, [r5, #0]
 8004878:	b1b9      	cbz	r1, 80048aa <__sflush_r+0xae>
 800487a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800487e:	4299      	cmp	r1, r3
 8004880:	d002      	beq.n	8004888 <__sflush_r+0x8c>
 8004882:	4628      	mov	r0, r5
 8004884:	f7ff fbf2 	bl	800406c <_free_r>
 8004888:	2300      	movs	r3, #0
 800488a:	6363      	str	r3, [r4, #52]	@ 0x34
 800488c:	e00d      	b.n	80048aa <__sflush_r+0xae>
 800488e:	2301      	movs	r3, #1
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	4602      	mov	r2, r0
 8004896:	1c50      	adds	r0, r2, #1
 8004898:	d1c9      	bne.n	800482e <__sflush_r+0x32>
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0c6      	beq.n	800482e <__sflush_r+0x32>
 80048a0:	2b1d      	cmp	r3, #29
 80048a2:	d001      	beq.n	80048a8 <__sflush_r+0xac>
 80048a4:	2b16      	cmp	r3, #22
 80048a6:	d11e      	bne.n	80048e6 <__sflush_r+0xea>
 80048a8:	602f      	str	r7, [r5, #0]
 80048aa:	2000      	movs	r0, #0
 80048ac:	e022      	b.n	80048f4 <__sflush_r+0xf8>
 80048ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	e01b      	b.n	80048ee <__sflush_r+0xf2>
 80048b6:	690f      	ldr	r7, [r1, #16]
 80048b8:	2f00      	cmp	r7, #0
 80048ba:	d0f6      	beq.n	80048aa <__sflush_r+0xae>
 80048bc:	0793      	lsls	r3, r2, #30
 80048be:	680e      	ldr	r6, [r1, #0]
 80048c0:	bf08      	it	eq
 80048c2:	694b      	ldreq	r3, [r1, #20]
 80048c4:	600f      	str	r7, [r1, #0]
 80048c6:	bf18      	it	ne
 80048c8:	2300      	movne	r3, #0
 80048ca:	eba6 0807 	sub.w	r8, r6, r7
 80048ce:	608b      	str	r3, [r1, #8]
 80048d0:	f1b8 0f00 	cmp.w	r8, #0
 80048d4:	dde9      	ble.n	80048aa <__sflush_r+0xae>
 80048d6:	6a21      	ldr	r1, [r4, #32]
 80048d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80048da:	4643      	mov	r3, r8
 80048dc:	463a      	mov	r2, r7
 80048de:	4628      	mov	r0, r5
 80048e0:	47b0      	blx	r6
 80048e2:	2800      	cmp	r0, #0
 80048e4:	dc08      	bgt.n	80048f8 <__sflush_r+0xfc>
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048f8:	4407      	add	r7, r0
 80048fa:	eba8 0800 	sub.w	r8, r8, r0
 80048fe:	e7e7      	b.n	80048d0 <__sflush_r+0xd4>
 8004900:	dfbffffe 	.word	0xdfbffffe

08004904 <_fflush_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	4605      	mov	r5, r0
 800490a:	460c      	mov	r4, r1
 800490c:	b913      	cbnz	r3, 8004914 <_fflush_r+0x10>
 800490e:	2500      	movs	r5, #0
 8004910:	4628      	mov	r0, r5
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	b118      	cbz	r0, 800491e <_fflush_r+0x1a>
 8004916:	6a03      	ldr	r3, [r0, #32]
 8004918:	b90b      	cbnz	r3, 800491e <_fflush_r+0x1a>
 800491a:	f7ff fa9f 	bl	8003e5c <__sinit>
 800491e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f3      	beq.n	800490e <_fflush_r+0xa>
 8004926:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004928:	07d0      	lsls	r0, r2, #31
 800492a:	d404      	bmi.n	8004936 <_fflush_r+0x32>
 800492c:	0599      	lsls	r1, r3, #22
 800492e:	d402      	bmi.n	8004936 <_fflush_r+0x32>
 8004930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004932:	f7ff fb98 	bl	8004066 <__retarget_lock_acquire_recursive>
 8004936:	4628      	mov	r0, r5
 8004938:	4621      	mov	r1, r4
 800493a:	f7ff ff5f 	bl	80047fc <__sflush_r>
 800493e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004940:	07da      	lsls	r2, r3, #31
 8004942:	4605      	mov	r5, r0
 8004944:	d4e4      	bmi.n	8004910 <_fflush_r+0xc>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	059b      	lsls	r3, r3, #22
 800494a:	d4e1      	bmi.n	8004910 <_fflush_r+0xc>
 800494c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800494e:	f7ff fb8b 	bl	8004068 <__retarget_lock_release_recursive>
 8004952:	e7dd      	b.n	8004910 <_fflush_r+0xc>

08004954 <__swbuf_r>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	460e      	mov	r6, r1
 8004958:	4614      	mov	r4, r2
 800495a:	4605      	mov	r5, r0
 800495c:	b118      	cbz	r0, 8004966 <__swbuf_r+0x12>
 800495e:	6a03      	ldr	r3, [r0, #32]
 8004960:	b90b      	cbnz	r3, 8004966 <__swbuf_r+0x12>
 8004962:	f7ff fa7b 	bl	8003e5c <__sinit>
 8004966:	69a3      	ldr	r3, [r4, #24]
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	071a      	lsls	r2, r3, #28
 800496e:	d501      	bpl.n	8004974 <__swbuf_r+0x20>
 8004970:	6923      	ldr	r3, [r4, #16]
 8004972:	b943      	cbnz	r3, 8004986 <__swbuf_r+0x32>
 8004974:	4621      	mov	r1, r4
 8004976:	4628      	mov	r0, r5
 8004978:	f000 f82a 	bl	80049d0 <__swsetup_r>
 800497c:	b118      	cbz	r0, 8004986 <__swbuf_r+0x32>
 800497e:	f04f 37ff 	mov.w	r7, #4294967295
 8004982:	4638      	mov	r0, r7
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	6922      	ldr	r2, [r4, #16]
 800498a:	1a98      	subs	r0, r3, r2
 800498c:	6963      	ldr	r3, [r4, #20]
 800498e:	b2f6      	uxtb	r6, r6
 8004990:	4283      	cmp	r3, r0
 8004992:	4637      	mov	r7, r6
 8004994:	dc05      	bgt.n	80049a2 <__swbuf_r+0x4e>
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f7ff ffb3 	bl	8004904 <_fflush_r>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d1ed      	bne.n	800497e <__swbuf_r+0x2a>
 80049a2:	68a3      	ldr	r3, [r4, #8]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	60a3      	str	r3, [r4, #8]
 80049a8:	6823      	ldr	r3, [r4, #0]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	701e      	strb	r6, [r3, #0]
 80049b0:	6962      	ldr	r2, [r4, #20]
 80049b2:	1c43      	adds	r3, r0, #1
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d004      	beq.n	80049c2 <__swbuf_r+0x6e>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	07db      	lsls	r3, r3, #31
 80049bc:	d5e1      	bpl.n	8004982 <__swbuf_r+0x2e>
 80049be:	2e0a      	cmp	r6, #10
 80049c0:	d1df      	bne.n	8004982 <__swbuf_r+0x2e>
 80049c2:	4621      	mov	r1, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f7ff ff9d 	bl	8004904 <_fflush_r>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d0d9      	beq.n	8004982 <__swbuf_r+0x2e>
 80049ce:	e7d6      	b.n	800497e <__swbuf_r+0x2a>

080049d0 <__swsetup_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4b29      	ldr	r3, [pc, #164]	@ (8004a78 <__swsetup_r+0xa8>)
 80049d4:	4605      	mov	r5, r0
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	460c      	mov	r4, r1
 80049da:	b118      	cbz	r0, 80049e4 <__swsetup_r+0x14>
 80049dc:	6a03      	ldr	r3, [r0, #32]
 80049de:	b90b      	cbnz	r3, 80049e4 <__swsetup_r+0x14>
 80049e0:	f7ff fa3c 	bl	8003e5c <__sinit>
 80049e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e8:	0719      	lsls	r1, r3, #28
 80049ea:	d422      	bmi.n	8004a32 <__swsetup_r+0x62>
 80049ec:	06da      	lsls	r2, r3, #27
 80049ee:	d407      	bmi.n	8004a00 <__swsetup_r+0x30>
 80049f0:	2209      	movs	r2, #9
 80049f2:	602a      	str	r2, [r5, #0]
 80049f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295
 80049fe:	e033      	b.n	8004a68 <__swsetup_r+0x98>
 8004a00:	0758      	lsls	r0, r3, #29
 8004a02:	d512      	bpl.n	8004a2a <__swsetup_r+0x5a>
 8004a04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a06:	b141      	cbz	r1, 8004a1a <__swsetup_r+0x4a>
 8004a08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	d002      	beq.n	8004a16 <__swsetup_r+0x46>
 8004a10:	4628      	mov	r0, r5
 8004a12:	f7ff fb2b 	bl	800406c <_free_r>
 8004a16:	2300      	movs	r3, #0
 8004a18:	6363      	str	r3, [r4, #52]	@ 0x34
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	2300      	movs	r3, #0
 8004a24:	6063      	str	r3, [r4, #4]
 8004a26:	6923      	ldr	r3, [r4, #16]
 8004a28:	6023      	str	r3, [r4, #0]
 8004a2a:	89a3      	ldrh	r3, [r4, #12]
 8004a2c:	f043 0308 	orr.w	r3, r3, #8
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	6923      	ldr	r3, [r4, #16]
 8004a34:	b94b      	cbnz	r3, 8004a4a <__swsetup_r+0x7a>
 8004a36:	89a3      	ldrh	r3, [r4, #12]
 8004a38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a40:	d003      	beq.n	8004a4a <__swsetup_r+0x7a>
 8004a42:	4621      	mov	r1, r4
 8004a44:	4628      	mov	r0, r5
 8004a46:	f000 f84f 	bl	8004ae8 <__smakebuf_r>
 8004a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a4e:	f013 0201 	ands.w	r2, r3, #1
 8004a52:	d00a      	beq.n	8004a6a <__swsetup_r+0x9a>
 8004a54:	2200      	movs	r2, #0
 8004a56:	60a2      	str	r2, [r4, #8]
 8004a58:	6962      	ldr	r2, [r4, #20]
 8004a5a:	4252      	negs	r2, r2
 8004a5c:	61a2      	str	r2, [r4, #24]
 8004a5e:	6922      	ldr	r2, [r4, #16]
 8004a60:	b942      	cbnz	r2, 8004a74 <__swsetup_r+0xa4>
 8004a62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a66:	d1c5      	bne.n	80049f4 <__swsetup_r+0x24>
 8004a68:	bd38      	pop	{r3, r4, r5, pc}
 8004a6a:	0799      	lsls	r1, r3, #30
 8004a6c:	bf58      	it	pl
 8004a6e:	6962      	ldrpl	r2, [r4, #20]
 8004a70:	60a2      	str	r2, [r4, #8]
 8004a72:	e7f4      	b.n	8004a5e <__swsetup_r+0x8e>
 8004a74:	2000      	movs	r0, #0
 8004a76:	e7f7      	b.n	8004a68 <__swsetup_r+0x98>
 8004a78:	20000018 	.word	0x20000018

08004a7c <_sbrk_r>:
 8004a7c:	b538      	push	{r3, r4, r5, lr}
 8004a7e:	4d06      	ldr	r5, [pc, #24]	@ (8004a98 <_sbrk_r+0x1c>)
 8004a80:	2300      	movs	r3, #0
 8004a82:	4604      	mov	r4, r0
 8004a84:	4608      	mov	r0, r1
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc f818 	bl	8000abc <_sbrk>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_sbrk_r+0x1a>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_sbrk_r+0x1a>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	200002d8 	.word	0x200002d8

08004a9c <__swhatbuf_r>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	b096      	sub	sp, #88	@ 0x58
 8004aa8:	4615      	mov	r5, r2
 8004aaa:	461e      	mov	r6, r3
 8004aac:	da0d      	bge.n	8004aca <__swhatbuf_r+0x2e>
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ab4:	f04f 0100 	mov.w	r1, #0
 8004ab8:	bf14      	ite	ne
 8004aba:	2340      	movne	r3, #64	@ 0x40
 8004abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	6031      	str	r1, [r6, #0]
 8004ac4:	602b      	str	r3, [r5, #0]
 8004ac6:	b016      	add	sp, #88	@ 0x58
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
 8004aca:	466a      	mov	r2, sp
 8004acc:	f000 f848 	bl	8004b60 <_fstat_r>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	dbec      	blt.n	8004aae <__swhatbuf_r+0x12>
 8004ad4:	9901      	ldr	r1, [sp, #4]
 8004ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ade:	4259      	negs	r1, r3
 8004ae0:	4159      	adcs	r1, r3
 8004ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ae6:	e7eb      	b.n	8004ac0 <__swhatbuf_r+0x24>

08004ae8 <__smakebuf_r>:
 8004ae8:	898b      	ldrh	r3, [r1, #12]
 8004aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004aec:	079d      	lsls	r5, r3, #30
 8004aee:	4606      	mov	r6, r0
 8004af0:	460c      	mov	r4, r1
 8004af2:	d507      	bpl.n	8004b04 <__smakebuf_r+0x1c>
 8004af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	6123      	str	r3, [r4, #16]
 8004afc:	2301      	movs	r3, #1
 8004afe:	6163      	str	r3, [r4, #20]
 8004b00:	b003      	add	sp, #12
 8004b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b04:	ab01      	add	r3, sp, #4
 8004b06:	466a      	mov	r2, sp
 8004b08:	f7ff ffc8 	bl	8004a9c <__swhatbuf_r>
 8004b0c:	9f00      	ldr	r7, [sp, #0]
 8004b0e:	4605      	mov	r5, r0
 8004b10:	4639      	mov	r1, r7
 8004b12:	4630      	mov	r0, r6
 8004b14:	f7ff fb16 	bl	8004144 <_malloc_r>
 8004b18:	b948      	cbnz	r0, 8004b2e <__smakebuf_r+0x46>
 8004b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b1e:	059a      	lsls	r2, r3, #22
 8004b20:	d4ee      	bmi.n	8004b00 <__smakebuf_r+0x18>
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	f043 0302 	orr.w	r3, r3, #2
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	e7e2      	b.n	8004af4 <__smakebuf_r+0xc>
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	6020      	str	r0, [r4, #0]
 8004b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	9b01      	ldr	r3, [sp, #4]
 8004b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004b3e:	b15b      	cbz	r3, 8004b58 <__smakebuf_r+0x70>
 8004b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b44:	4630      	mov	r0, r6
 8004b46:	f000 f81d 	bl	8004b84 <_isatty_r>
 8004b4a:	b128      	cbz	r0, 8004b58 <__smakebuf_r+0x70>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	81a3      	strh	r3, [r4, #12]
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	431d      	orrs	r5, r3
 8004b5c:	81a5      	strh	r5, [r4, #12]
 8004b5e:	e7cf      	b.n	8004b00 <__smakebuf_r+0x18>

08004b60 <_fstat_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	4d07      	ldr	r5, [pc, #28]	@ (8004b80 <_fstat_r+0x20>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	602b      	str	r3, [r5, #0]
 8004b6e:	f7fb ff7c 	bl	8000a6a <_fstat>
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	d102      	bne.n	8004b7c <_fstat_r+0x1c>
 8004b76:	682b      	ldr	r3, [r5, #0]
 8004b78:	b103      	cbz	r3, 8004b7c <_fstat_r+0x1c>
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	bd38      	pop	{r3, r4, r5, pc}
 8004b7e:	bf00      	nop
 8004b80:	200002d8 	.word	0x200002d8

08004b84 <_isatty_r>:
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4d06      	ldr	r5, [pc, #24]	@ (8004ba0 <_isatty_r+0x1c>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4604      	mov	r4, r0
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	602b      	str	r3, [r5, #0]
 8004b90:	f7fb ff7b 	bl	8000a8a <_isatty>
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d102      	bne.n	8004b9e <_isatty_r+0x1a>
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	b103      	cbz	r3, 8004b9e <_isatty_r+0x1a>
 8004b9c:	6023      	str	r3, [r4, #0]
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	200002d8 	.word	0x200002d8

08004ba4 <_init>:
 8004ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba6:	bf00      	nop
 8004ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004baa:	bc08      	pop	{r3}
 8004bac:	469e      	mov	lr, r3
 8004bae:	4770      	bx	lr

08004bb0 <_fini>:
 8004bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb2:	bf00      	nop
 8004bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bb6:	bc08      	pop	{r3}
 8004bb8:	469e      	mov	lr, r3
 8004bba:	4770      	bx	lr
